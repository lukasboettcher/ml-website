(self.webpackChunkipyvolume=self.webpackChunkipyvolume||[]).push([[568],{504:e=>{"use strict";e.exports=JSON.parse('{"normals":[[0.6722792983055115,0.7387584447860718,0.04771288111805916],[0.7488530874252319,0.6626735329627991,0.009104926139116287],[0.992845356464386,0.1163879781961441,-0.026680562645196915],[0.988349199295044,0.1501944661140442,-0.0246476661413908],[0.9485647082328796,-0.2816155254840851,-0.14462943375110626],[0.925125002861023,-0.375169962644577,-0.058234188705682755],[0.988349199295044,0.1501944661140442,-0.0246476661413908],[0.992845356464386,0.1163879781961441,-0.026680562645196915],[0.9870246648788452,-0.13484345376491547,0.08717460930347443],[0.9485647082328796,-0.2816155254840851,-0.14462943375110626],[0.992845356464386,0.1163879781961441,-0.026680562645196915],[0.9768072366714478,0.1450829803943634,0.1574755609035492],[0.9768072366714478,0.1450829803943634,0.1574755609035492],[0.992845356464386,0.1163879781961441,-0.026680562645196915],[0.7488530874252319,0.6626735329627991,0.009104926139116287],[0.7618468403816223,0.646384596824646,0.04214463010430336],[0.4218263030052185,0.893310010433197,-0.15511257946491241],[0.35690364241600037,0.9336850047111511,-0.029189903289079666],[0.2723502814769745,0.9614163041114807,-0.03878369182348251],[0.2525371015071869,0.9163177609443665,-0.3107839524745941],[0.9953411221504211,0.09576618671417236,0.011168275028467178],[0.6457383632659912,0.7610315084457397,0.06207112967967987],[0.6722792983055115,0.7387584447860718,0.04771288111805916],[0.988349199295044,0.1501944661140442,-0.0246476661413908],[0.9291253089904785,-0.3697633743286133,-0.0010595708154141903],[0.9953411221504211,0.09576618671417236,0.011168275028467178],[0.988349199295044,0.1501944661140442,-0.0246476661413908],[0.925125002861023,-0.375169962644577,-0.058234188705682755],[-0.007396361790597439,-0.9999653697013855,0.003803872736170888],[-0.009718821384012699,-0.9997833967208862,-0.018406139686703682],[-0.007655521389096975,-0.9999698996543884,0.001327343052253127],[0.5234197378158569,0.8474974632263184,-0.08820322155952454],[0.8727967739105225,0.48596683144569397,-0.04540829733014107],[0.6919021606445312,0.6509979963302612,-0.3122063875198364],[0.5376883745193481,0.8232352137565613,-0.18213941156864166],[0.6919021606445312,0.6509979963302612,-0.3122063875198364],[0.8727967739105225,0.48596683144569397,-0.04540829733014107],[0.9940851926803589,0.10859742015600204,0.0011142655275762081],[0.8643118143081665,0.35945847630500793,-0.35178789496421814],[-0.003276081522926688,-0.9999516010284424,0.00927703082561493],[-0.0032760819885879755,-0.9999516606330872,0.00927703082561493],[-0.003276081522926688,-0.9999516010284424,0.009277029894292355],[-0.003276081755757332,-0.9999516606330872,0.009277029894292355],[0.5376883745193481,0.8232352137565613,-0.18213941156864166],[0.6919021606445312,0.6509979963302612,-0.3122063875198364],[0.37462636828422546,0.6200053691864014,-0.6893826723098755],[0.41769927740097046,0.4760781228542328,-0.7738713026046753],[0.6919021606445312,0.6509979963302612,-0.3122063875198364],[0.8643118143081665,0.35945847630500793,-0.35178789496421814],[0.34577468037605286,0.5889291763305664,-0.7304808497428894],[0.37462636828422546,0.6200053691864014,-0.6893826723098755],[0.9940851926803589,0.10859742015600204,0.0011142655275762081],[0.994776725769043,-0.10139967501163483,0.011717659421265125],[0.9535025358200073,0.03478159382939339,-0.29937097430229187],[0.8643118143081665,0.35945847630500793,-0.35178789496421814],[0.5455085635185242,-0.8378602266311646,0.020260393619537354],[0.9291253089904785,-0.3697633743286133,-0.0010595708154141903],[0.925125002861023,-0.375169962644577,-0.058234188705682755],[0.5313248038291931,-0.8438926935195923,-0.07442483305931091],[0.9477870464324951,-0.3114435374736786,0.06857644021511078],[0.7406501770019531,-0.43752405047416687,-0.5099119544029236],[0.9485647082328796,-0.2816155254840851,-0.14462943375110626],[0.9870246648788452,-0.13484345376491547,0.08717460930347443],[0.7618468403816223,0.646384596824646,0.04214463010430336],[0.8426366448402405,0.4910145699977875,0.22106125950813293],[0.9381476044654846,0.19051600992679596,0.28910666704177856],[0.9768072366714478,0.1450829803943634,0.1574755609035492],[0.7488530874252319,0.6626735329627991,0.009104926139116287],[0.35690364241600037,0.9336850047111511,-0.029189903289079666],[0.4218263030052185,0.893310010433197,-0.15511257946491241],[0.7618468403816223,0.646384596824646,0.04214463010430336],[0.3756128251552582,0.9234598278999329,0.0783376395702362],[0.35690364241600037,0.9336850047111511,-0.029189903289079666],[0.7488530874252319,0.6626735329627991,0.009104926139116287],[0.6722792983055115,0.7387584447860718,0.04771288111805916],[0.6457383632659912,0.7610315084457397,0.06207112967967987],[0.38265588879585266,0.9199751615524292,0.08497147262096405],[0.3756128251552582,0.9234598278999329,0.0783376395702362],[0.6722792983055115,0.7387584447860718,0.04771288111805916],[0.5150745511054993,0.8528239727020264,-0.08596205711364746],[0.426266610622406,0.8994579315185547,-0.09629113972187042],[0.5234197378158569,0.8474974632263184,-0.08820322155952454],[0.5376883745193481,0.8232352137565613,-0.18213941156864166],[0.7433125972747803,-0.6685736179351807,0.02226567082107067],[0.7520958781242371,-0.6584120392799377,0.02907477132976055],[0.28822171688079834,-0.9561523795127869,0.05196940153837204],[0.29988452792167664,-0.9533481597900391,0.034590303897857666],[0.8036648631095886,0.5537902116775513,-0.217805415391922],[0.6157482266426086,0.7863949537277222,-0.049367424100637436],[0.5150745511054993,0.8528239727020264,-0.08596205711364746],[0.5376883745193481,0.8232352137565613,-0.18213941156864166],[0.7460655570030212,-0.6658671498298645,0.0026501123793423176],[0.7433125972747803,-0.6685736179351807,0.02226567082107067],[0.29988452792167664,-0.9533481597900391,0.034590303897857666],[0.31369441747665405,-0.9492788314819336,0.02157321386039257],[0.9991246461868286,-0.034952837973833084,-0.022984294220805168],[0.812343418598175,0.5824594497680664,-0.0289674773812294],[0.7433125972747803,-0.6685736179351807,0.02226567082107067],[0.7460655570030212,-0.6658671498298645,0.0026501123793423176],[0.9962080717086792,-0.0641126036643982,-0.05881289765238762],[0.9991246461868286,-0.034952837973833084,-0.022984294220805168],[0.7460655570030212,-0.6658671498298645,0.0026501123793423176],[0.7457423210144043,-0.6656472086906433,-0.027963895350694656],[0.7457423210144043,-0.6656472086906433,-0.027963895350694656],[0.7460655570030212,-0.6658671498298645,0.0026501123793423176],[0.31369441747665405,-0.9492788314819336,0.02157321386039257],[0.34119275212287903,-0.9399923086166382,0.0014598877169191837],[0.996460497379303,-0.06455107778310776,-0.053849659860134125],[0.9962080717086792,-0.0641126036643982,-0.05881289765238762],[0.7457423210144043,-0.6656472086906433,-0.027963895350694656],[0.7923128604888916,-0.6072733998298645,-0.05881620571017265],[0.7923128604888916,-0.6072733998298645,-0.05881620571017265],[0.7457423210144043,-0.6656472086906433,-0.027963895350694656],[0.34119275212287903,-0.9399923086166382,0.0014598877169191837],[0.3986782729625702,-0.9157551527023315,-0.04947711527347565],[0.9978228807449341,-0.05201764032244682,-0.040543824434280396],[0.996460497379303,-0.06455107778310776,-0.053849659860134125],[0.7923128604888916,-0.6072733998298645,-0.05881620571017265],[0.8045254349708557,-0.5899364948272705,-0.06865765154361725],[0.8045254349708557,-0.5899364948272705,-0.06865765154361725],[0.7923128604888916,-0.6072733998298645,-0.05881620571017265],[0.3986782729625702,-0.9157551527023315,-0.04947711527347565],[0.42811119556427,-0.9006050229072571,-0.07504191249608994],[0.9999374747276306,-0.010656150989234447,-0.0033726822584867477],[0.9999375343322754,-0.010656150989234447,-0.003372682724148035],[0.9999374747276306,-0.010656150057911873,-0.0033726817928254604],[0.9999375343322754,-0.010656151920557022,-0.0033726824913173914],[0.4665221869945526,-0.8773672580718994,-0.1121765673160553],[0.4665221571922302,-0.8773673176765442,-0.1121765673160553],[0.4665221869945526,-0.877367377281189,-0.1121765673160553],[0.4665221869945526,-0.877367377281189,-0.1121765673160553],[0.998106837272644,0.010563117451965809,-0.060587748885154724],[0.9981068968772888,0.010563117451965809,-0.060587748885154724],[0.9981070160865784,0.010563119314610958,-0.06058775633573532],[0.9981069564819336,0.010563118383288383,-0.06058775261044502],[0.511317789554596,-0.8463999629020691,-0.14886613190174103],[0.511317789554596,-0.8464000821113586,-0.14886613190174103],[0.5113177299499512,-0.8463999629020691,-0.14886613190174103],[0.511317789554596,-0.8463999629020691,-0.14886611700057983],[0.7703723907470703,0.364370197057724,-0.5232215523719788],[0.7184544801712036,0.4904933571815491,-0.4931929409503937],[0.7226928472518921,-0.0716477632522583,-0.6874456405639648],[0.7748353481292725,0.075252965092659,-0.6276678442955017],[0.7748353481292725,0.075252965092659,-0.6276678442955017],[0.7226928472518921,-0.0716477632522583,-0.6874456405639648],[0.3967260420322418,-0.543319821357727,-0.739872932434082],[0.36102649569511414,0.7485342025756836,0.5561981797218323],[0.36102646589279175,0.7485341429710388,0.5561981201171875],[0.43389180302619934,0.48191967606544495,0.7612432837486267],[0.4282975196838379,0.5146201848983765,0.7427835464477539],[0.3756128251552582,0.9234598278999329,0.0783376395702362],[0.30924931168556213,0.946604311466217,0.09113304316997528],[0.2723502814769745,0.9614163041114807,-0.03878369182348251],[0.35690364241600037,0.9336850047111511,-0.029189903289079666],[0.38265588879585266,0.9199751615524292,0.08497147262096405],[0.32308486104011536,0.9413825273513794,0.09703188389539719],[0.30924931168556213,0.946604311466217,0.09113304316997528],[0.3756128251552582,0.9234598278999329,0.0783376395702362],[0.5150745511054993,0.8528239727020264,-0.08596205711364746],[0.4702720046043396,0.8819447159767151,-0.031901802867650986],[0.4184861183166504,0.9036914706230164,-0.09061478823423386],[0.426266610622406,0.8994579315185547,-0.09629113972187042],[0.6157482266426086,0.7863949537277222,-0.049367424100637436],[0.49254393577575684,0.8694345355033875,0.03852318972349167],[0.4702720046043396,0.8819447159767151,-0.031901802867650986],[0.5150745511054993,0.8528239727020264,-0.08596205711364746],[0.4887421131134033,0.8688849806785583,-0.07854924350976944],[0.4874696135520935,0.8697015643119812,-0.0774112120270729],[0.5186543464660645,0.8537455201148987,-0.04600219428539276],[0.812343418598175,0.5824594497680664,-0.0289674773812294],[0.4989731013774872,0.8658507466316223,-0.03644828870892525],[0.4985501170158386,0.8660682439804077,-0.0370621494948864],[0.4874696135520935,0.8697015643119812,-0.0774112120270729],[0.4887421131134033,0.8688849806785583,-0.07854924350976944],[0.5233396887779236,0.852124035358429,-0.0002806649135891348],[0.5233396887779236,0.8521241545677185,-0.00028066494269296527],[0.4985501170158386,0.8660682439804077,-0.0370621494948864],[0.4989731013774872,0.8658507466316223,-0.03644828870892525],[0.5939923524856567,0.8027538657188416,0.05252972990274429],[0.5939922332763672,0.8027538061141968,0.05252972990274429],[0.593992292881012,0.8027538061141968,0.05252972990274429],[0.593992292881012,0.802753746509552,0.05252972990274429],[0.6263990998268127,0.7756832242012024,0.0770687535405159],[0.6263991594314575,0.7756832838058472,0.0770687684416771],[0.6263991594314575,0.7756832242012024,0.0770687684416771],[0.6263991594314575,0.7756832838058472,0.0770687609910965],[0.6624122858047485,0.7462863922119141,0.06531935185194016],[0.6624122858047485,0.7462863922119141,0.06531934440135956],[0.6624122858047485,0.7462863922119141,0.06531935185194016],[0.6624122262001038,0.7462863326072693,0.06531935185194016],[0.7703723907470703,0.364370197057724,-0.5232215523719788],[0.5710009336471558,0.715075671672821,-0.40326735377311707],[0.7184544801712036,0.4904933571815491,-0.4931929409503937],[0.37462636828422546,0.6200053691864014,-0.6893826723098755],[0.016368180513381958,0.41040074825286865,-0.911758303642273],[0.07877559959888458,-0.25413259863853455,-0.9639558792114258],[0.41769927740097046,0.4760781228542328,-0.7738713026046753],[0.37462636828422546,0.6200053691864014,-0.6893826723098755],[0.34577468037605286,0.5889291763305664,-0.7304808497428894],[0.0019773005042225122,0.5299733281135559,-0.8480120301246643],[0.016368180513381958,0.41040074825286865,-0.911758303642273],[0.9417835474014282,-0.049175508320331573,0.3326040506362915],[0.9091628789901733,-0.16485607624053955,0.38242053985595703],[0.9477870464324951,-0.3114435374736786,0.06857644021511078],[0.9870246648788452,-0.13484345376491547,0.08717460930347443],[0.14885027706623077,-0.9885218143463135,0.0258492399007082],[0.5455085635185242,-0.8378602266311646,0.020260393619537354],[0.5313248038291931,-0.8438926935195923,-0.07442483305931091],[0.1343700885772705,-0.9893593192100525,-0.05579141527414322],[0.994776725769043,-0.10139967501163483,0.011717659421265125],[0.9454845190048218,-0.18804335594177246,0.26589235663414],[0.9277397990226746,-0.26224467158317566,0.2655685245990753],[0.9816802144050598,-0.18131236732006073,0.05856389179825783],[0.07883576303720474,-0.9942485690116882,-0.07248955965042114],[0.07883576303720474,-0.9942484498023987,-0.07248955219984055],[0.07883577048778534,-0.9942485690116882,-0.07248955965042114],[0.9535025358200073,0.03478159382939339,-0.29937097430229187],[0.994776725769043,-0.10139967501163483,0.011717659421265125],[0.9816802144050598,-0.18131236732006073,0.05856389179825783],[0.9511677026748657,-0.04723962023854256,-0.3050382733345032],[-0.19625768065452576,-0.11801380664110184,-0.9734246730804443],[-0.2926790714263916,-0.3033236265182495,-0.9068261384963989],[-0.32536008954048157,-0.23565585911273956,-0.9157549738883972],[-0.3316536545753479,-0.3071261942386627,-0.8920086622238159],[-0.05927730351686478,0.1270371675491333,-0.9901250600814819],[-0.05927730351686478,0.1270371526479721,-0.9901250600814819],[-0.2926790714263916,-0.3033236265182495,-0.9068261384963989],[-0.19625768065452576,-0.11801380664110184,-0.9734246730804443],[0.5783531069755554,0.037188682705163956,-0.8149384260177612],[0.5758730173110962,0.09083724021911621,-0.8124769330024719],[0.5564614534378052,0.26213952898979187,-0.7884374260902405],[0.5564614534378052,0.26213952898979187,-0.7884373664855957],[0.6000460982322693,-0.09697715193033218,-0.794065535068512],[0.5758730173110962,0.09083724021911621,-0.8124769330024719],[0.5783531069755554,0.037188682705163956,-0.8149384260177612],[0.6286618709564209,-0.02641300857067108,-0.7772300839424133],[0.9816802144050598,-0.18131236732006073,0.05856389179825783],[0.9277397990226746,-0.26224467158317566,0.2655685245990753],[0.880256712436676,-0.2203819453716278,0.42021414637565613],[0.9598467946052551,-0.14224128425121307,0.24178816378116608],[-0.4995267689228058,-0.6674507260322571,0.5522522330284119],[-0.4995267689228058,-0.6674506664276123,0.5522521734237671],[-0.7392453551292419,-0.5592052340507507,0.37524107098579407],[-0.8281887769699097,-0.48730725049972534,0.2768303155899048],[0.9511677026748657,-0.04723962023854256,-0.3050382733345032],[0.9816802144050598,-0.18131236732006073,0.05856389179825783],[0.9598467946052551,-0.14224128425121307,0.24178816378116608],[0.9868009686470032,0.016181373968720436,-0.16112716495990753],[-0.3316536545753479,-0.3071261942386627,-0.8920086622238159],[-0.32536008954048157,-0.23565585911273956,-0.9157549738883972],[-0.21552973985671997,0.056692883372306824,-0.9748501777648926],[-0.21570317447185516,0.05686187371611595,-0.9748018980026245],[0.6000460982322693,-0.09697715193033218,-0.794065535068512],[0.6286618709564209,-0.02641300857067108,-0.7772300839424133],[0.7030335664749146,0.08082249015569687,-0.7065488696098328],[0.6975869536399841,0.09133404493331909,-0.7106549739837646],[0.9598467946052551,-0.14224128425121307,0.24178816378116608],[0.880256712436676,-0.2203819453716278,0.42021414637565613],[0.5838391780853271,0.21363331377506256,0.7832577228546143],[0.9488987326622009,0.10196034610271454,0.29865553975105286],[-0.46847423911094666,-0.1571734994649887,0.8693839311599731],[-0.4684741497039795,-0.15717348456382751,0.8693838119506836],[-0.8334598541259766,-0.12069139629602432,0.539238452911377],[-0.8397976756095886,-0.11944134533405304,0.5295974612236023],[0.9868009686470032,0.016181373968720436,-0.16112716495990753],[0.9598467946052551,-0.14224128425121307,0.24178816378116608],[0.9488987326622009,0.10196034610271454,0.29865553975105286],[0.994851291179657,0.025057118386030197,-0.09819892793893814],[-0.21570317447185516,0.05686187371611595,-0.9748018980026245],[-0.21552973985671997,0.056692883372306824,-0.9748501777648926],[-0.14557555317878723,-0.182363361120224,-0.9723946452140808],[-0.1493588238954544,-0.2086780071258545,-0.9665119051933289],[0.6975869536399841,0.09133404493331909,-0.7106549739837646],[0.7030335664749146,0.08082249015569687,-0.7065488696098328],[0.7033784985542297,-0.1011778935790062,-0.7035778760910034],[0.7059258818626404,-0.09110114723443985,-0.7024023532867432],[0.9488987326622009,0.10196034610271454,0.29865553975105286],[0.5838391780853271,0.21363331377506256,0.7832577228546143],[0.5448250770568848,0.30212247371673584,0.7822324633598328],[0.8804023265838623,0.20492564141750336,0.4276648163795471],[-0.47070038318634033,0.29190725088119507,0.8326050043106079],[-0.4707004427909851,0.29190728068351746,0.8326051235198975],[-0.8098574280738831,0.1927443891763687,0.5540580153465271],[-0.7826141715049744,0.20474077761173248,0.5878743529319763],[0.994851291179657,0.025057118386030197,-0.09819892793893814],[0.9488987326622009,0.10196034610271454,0.29865553975105286],[0.8804023265838623,0.20492564141750336,0.4276648163795471],[0.991542637348175,0.02448795922100544,-0.12745055556297302],[-0.9741464257240295,-0.09507003426551819,-0.20493975281715393],[-0.9741464853286743,-0.09507003426551819,-0.20493975281715393],[-0.9741464257240295,-0.09507003426551819,-0.20493975281715393],[-0.9741464853286743,-0.09507004171609879,-0.20493976771831512],[-0.1493588238954544,-0.2086780071258545,-0.9665119051933289],[-0.14557555317878723,-0.182363361120224,-0.9723946452140808],[-0.15870679914951324,-0.27659744024276733,-0.9477900862693787],[-0.15870678424835205,-0.27659744024276733,-0.9477900266647339],[0.7059258818626404,-0.09110114723443985,-0.7024023532867432],[0.7033784985542297,-0.1011778935790062,-0.7035778760910034],[0.6870550513267517,-0.1595001220703125,-0.7088828682899475],[0.6870550513267517,-0.1595001220703125,-0.7088829874992371],[-0.7594459652900696,-0.5591992139816284,-0.3324725925922394],[-0.7612725496292114,-0.5448256731033325,-0.35160934925079346],[-0.7639512419700623,-0.4725126326084137,-0.4394431710243225],[-0.7639512419700623,-0.4725125730037689,-0.4394431710243225],[-0.6542017459869385,-0.7388257384300232,0.1617303341627121],[-0.7013145685195923,-0.7126237154006958,0.01804005168378353],[-0.7612725496292114,-0.5448256731033325,-0.35160934925079346],[-0.7594459652900696,-0.5591992139816284,-0.3324725925922394],[-0.9570808410644531,-0.2858492136001587,-0.047818198800086975],[-0.9580674171447754,-0.2737380564212799,-0.08470072597265244],[-0.907597541809082,-0.15491488575935364,-0.3902152180671692],[-0.9075976014137268,-0.15491488575935364,-0.3902152478694916],[-0.8281887769699097,-0.48730725049972534,0.2768303155899048],[-0.7392453551292419,-0.5592052340507507,0.37524107098579407],[-0.9580674171447754,-0.2737380564212799,-0.08470072597265244],[-0.9570808410644531,-0.2858492136001587,-0.047818198800086975],[-0.8397976756095886,-0.11944134533405304,0.5295974612236023],[-0.8334598541259766,-0.12069139629602432,0.539238452911377],[-0.9977579712867737,-0.06672408431768417,-0.005191626958549023],[-0.9967944622039795,-0.06933978199958801,0.03990751504898071],[-0.9967944622039795,-0.06933978199958801,0.03990751504898071],[-0.9977579712867737,-0.06672408431768417,-0.005191626958549023],[-0.968826413154602,-0.05067602917551994,-0.2425018846988678],[-0.968826413154602,-0.05067602917551994,-0.2425018846988678],[-0.007080026902258396,-0.9999517202377319,0.0068261693231761456],[-0.0070800259709358215,-0.9999516606330872,0.006826168857514858],[-0.007396361790597439,-0.9999653697013855,0.003803872736170888],[-0.007655521389096975,-0.9999698996543884,0.001327343052253127],[-0.8098574280738831,0.1927443891763687,0.5540580153465271],[-0.9692126512527466,0.07919885963201523,0.23313987255096436],[-0.9692126512527466,0.07919885963201523,0.23313987255096436],[-0.7826141715049744,0.20474077761173248,0.5878743529319763],[0.9766407608985901,-0.049606338143348694,0.20907409489154816],[0.9454845190048218,-0.18804335594177246,0.26589235663414],[0.994776725769043,-0.10139967501163483,0.011717659421265125],[0.9940851926803589,0.10859742015600204,0.0011142655275762081],[0.8727967739105225,0.48596683144569397,-0.04540829733014107],[0.8970381617546082,0.4411088824272156,0.027302822098135948],[0.9766407608985901,-0.049606338143348694,0.20907409489154816],[0.9940851926803589,0.10859742015600204,0.0011142655275762081],[0.5234197378158569,0.8474974632263184,-0.08820322155952454],[0.5382925271987915,0.8391603231430054,-0.07778876274824142],[0.8970381617546082,0.4411088824272156,0.027302822098135948],[0.8727967739105225,0.48596683144569397,-0.04540829733014107],[0.426266610622406,0.8994579315185547,-0.09629113972187042],[0.4193996787071228,0.9029867649078369,-0.09337382763624191],[0.5382925271987915,0.8391603231430054,-0.07778876274824142],[0.5234197378158569,0.8474974632263184,-0.08820322155952454],[0.426266610622406,0.8994579315185547,-0.09629113972187042],[0.4184861183166504,0.9036914706230164,-0.09061478823423386],[0.397386759519577,0.9139290452003479,-0.08256830275058746],[0.4193996787071228,0.9029867649078369,-0.09337382763624191],[-0.4563031494617462,-0.7228989601135254,0.5188493132591248],[-0.45630308985710144,-0.7228989005088806,0.51884925365448],[-0.7013145685195923,-0.7126237154006958,0.01804005168378353],[-0.6542017459869385,-0.7388257384300232,0.1617303341627121],[0.812343418598175,0.5824594497680664,-0.0289674773812294],[0.8409687876701355,0.5410745739936829,-0.003117515239864588],[0.7520958781242371,-0.6584120392799377,0.02907477132976055],[0.7433125972747803,-0.6685736179351807,0.02226567082107067],[0.812343418598175,0.5824594497680664,-0.0289674773812294],[0.5186543464660645,0.8537455201148987,-0.04600219428539276],[0.5403411984443665,0.8414300680160522,0.005176173057407141],[0.8409687876701355,0.5410745739936829,-0.003117515239864588],[0.9381476044654846,0.19051600992679596,0.28910666704177856],[0.9417835474014282,-0.049175508320331573,0.3326040506362915],[0.9870246648788452,-0.13484345376491547,0.08717460930347443],[0.9768072366714478,0.1450829803943634,0.1574755609035492],[0.3048708438873291,-0.3601263463497162,0.8816817402839661],[0.3048708438873291,-0.3601263463497162,0.8816817998886108],[0.3048708736896515,-0.3601263761520386,0.8816817998886108],[0.009669899009168148,-0.9999527335166931,-0.0009911151137202978],[0.01335916668176651,-0.9997296333312988,-0.019029799848794937],[0.008899079635739326,-0.9999565482139587,0.002775831613689661],[0.008292901329696178,-0.9999492168426514,0.005737709812819958],[0.009669899009168148,-0.9999527335166931,-0.0009911151137202978],[0.008899079635739326,-0.9999565482139587,0.002775831613689661],[0.008292900398373604,-0.9999490976333618,0.00573770934715867],[-0.000327377172652632,-0.9999869465827942,0.005087403580546379],[-0.0003273772308602929,-0.9999870657920837,0.005087404511868954],[-0.00032737720175646245,-0.999987006187439,0.005087404046207666],[-0.000327377172652632,-0.9999869465827942,0.005087404046207666],[0.1814485490322113,0.09529119729995728,-0.9787726402282715],[0.7972792387008667,0.2637723684310913,-0.5429269671440125],[0.6811290383338928,0.1718948930501938,-0.7116989493370056],[0.08690784126520157,0.012723428197205067,-0.9961351156234741],[0.6811290383338928,0.1718948930501938,-0.7116989493370056],[0.7972792387008667,0.2637723684310913,-0.5429269671440125],[0.8920365571975708,0.3482467830181122,-0.2880887985229492],[0.892036497592926,0.3482467532157898,-0.2880887985229492],[0.05003644526004791,0.7857836484909058,0.6164740920066833],[-0.5313484072685242,0.7057963013648987,0.4685301184654236],[-0.5509044528007507,0.7043324112892151,0.447683185338974],[0.2159183919429779,0.5571125745773315,0.8018757700920105],[-0.5313484072685242,0.7057963013648987,0.4685301184654236],[-0.8174833655357361,0.5758097767829895,0.012800747528672218],[-0.5509044528007507,0.7043324112892151,0.447683185338974],[-0.8916581869125366,0.42880943417549133,-0.145148366689682],[-0.6992805600166321,0.27376049757003784,-0.6603497862815857],[-0.5561168193817139,0.14663560688495636,-0.8180659413337708],[-0.8941298723220825,0.40962284803390503,-0.18094424903392792],[-0.6992805600166321,0.27376049757003784,-0.6603497862815857],[0.1814485490322113,0.09529119729995728,-0.9787726402282715],[0.08690784126520157,0.012723428197205067,-0.9961351156234741],[-0.5561168193817139,0.14663560688495636,-0.8180659413337708],[0.6097199320793152,0.38178151845932007,0.6946110129356384],[0.2159183919429779,0.5571125745773315,0.8018757700920105],[0.5276976823806763,-0.13558554649353027,0.8385413885116577],[0.5276976823806763,-0.13558554649353027,0.8385413885116577],[0.08690784126520157,0.012723428197205067,-0.9961351156234741],[0.6811290383338928,0.1718948930501938,-0.7116989493370056],[0.35492509603500366,-0.03222038596868515,-0.9343393445014954],[0.06122444570064545,-0.05399129539728165,-0.9966627359390259],[0.9835129380226135,-0.17904329299926758,0.025407595559954643],[0.9835130572319031,-0.17904330790042877,0.025407597422599792],[0.9835129976272583,-0.17904330790042877,0.025407597422599792],[0.9835131168365479,-0.17904330790042877,0.02540759928524494],[-0.5027428865432739,-0.15944384038448334,0.8496041893959045],[-0.5027428269386292,-0.15944382548332214,0.8496041297912598],[-0.5027428269386292,-0.15944382548332214,0.8496041893959045],[-0.5027428865432739,-0.15944384038448334,0.8496041297912598],[-0.9903079867362976,-0.13654690980911255,-0.02539708837866783],[-0.9903079867362976,-0.13654690980911255,-0.02539708837866783],[-0.9903078675270081,-0.13654689490795135,-0.025397086516022682],[-0.9903079867362976,-0.13654692471027374,-0.02539709024131298],[-0.9545094966888428,-0.051332514733076096,-0.293728768825531],[-0.9545094966888428,-0.051332518458366394,-0.293728768825531],[-0.9545095562934875,-0.05133252218365669,-0.293728768825531],[-0.9545095562934875,-0.05133252218365669,-0.2937287986278534],[-0.5561168193817139,0.14663560688495636,-0.8180659413337708],[0.08690784126520157,0.012723428197205067,-0.9961351156234741],[0.06122444570064545,-0.05399129539728165,-0.9966627359390259],[-0.21681351959705353,-0.06985045969486237,-0.9737108945846558],[0.5794637203216553,0.6613138914108276,0.47632521390914917],[0.05003644526004791,0.7857836484909058,0.6164740920066833],[0.2159183919429779,0.5571125745773315,0.8018757700920105],[0.6097199320793152,0.38178151845932007,0.6946110129356384],[-0.8372636437416077,0.5378450155258179,0.09855113178491592],[-0.8916581869125366,0.42880943417549133,-0.145148366689682],[-0.8941298723220825,0.40962284803390503,-0.18094424903392792],[0.8823044300079346,-0.05031672492623329,-0.4679820239543915],[0.8823044300079346,-0.05031672865152359,-0.4679820239543915],[0.8823044300079346,-0.05031673237681389,-0.4679820239543915],[0.8823044300079346,-0.05031672120094299,-0.4679819941520691],[0.9080635905265808,0.41698211431503296,0.03932438790798187],[0.5794637203216553,0.6613138914108276,0.47632521390914917],[0.6097199320793152,0.38178151845932007,0.6946110129356384],[0.4252643287181854,-0.326079785823822,-0.8442878723144531],[0.41716256737709045,-0.5338594913482666,-0.7355061769485474],[0.4247870147228241,-0.3042740523815155,-0.8526272177696228],[0.7406501770019531,-0.43752405047416687,-0.5099119544029236],[0.9477870464324951,-0.3114435374736786,0.06857644021511078],[0.9551147222518921,-0.2813762128353119,0.09264519810676575],[0.9193760752677917,-0.18071384727954865,-0.34941378235816956],[0.17346534132957458,-0.4330552816390991,0.8845183849334717],[0.09481082111597061,-0.5233485102653503,0.8468276262283325],[0.27656683325767517,-0.2505062520503998,0.9277701377868652],[0.26483190059661865,-0.24258455634117126,0.9332828521728516],[-0.8077946901321411,-0.550134539604187,0.21170684695243835],[-0.8316102027893066,-0.4946551024913788,-0.25246918201446533],[-0.8786116242408752,-0.32081088423728943,-0.3537260591983795],[-0.9311760663986206,-0.36401504278182983,-0.020105909556150436],[0.4247870147228241,-0.3042740523815155,-0.8526272177696228],[0.37875980138778687,-0.09532086551189423,-0.9205731153488159],[0.38566529750823975,-0.1070541962981224,-0.9164069294929504],[0.4252643287181854,-0.326079785823822,-0.8442878723144531],[0.9551147222518921,-0.2813762128353119,0.09264519810676575],[0.9803988933563232,-0.06604071706533432,0.18562422692775726],[0.9505224823951721,-0.025599543005228043,-0.309599369764328],[0.9193760752677917,-0.18071384727954865,-0.34941378235816956],[-0.012466281652450562,-0.10213904082775116,0.9946919083595276],[0.01848628744482994,-0.11704268306493759,0.9929547905921936],[-0.191960871219635,-0.013161209411919117,0.9813143610954285],[-0.19196085631847382,-0.013161208480596542,0.9813142418861389],[-0.9780387878417969,-0.11297819763422012,-0.17514568567276],[-0.8510448932647705,-0.09574438631534576,-0.5162901282310486],[-0.8051036596298218,-0.04565700888633728,-0.5913742184638977],[-0.9590003490447998,-0.05345573276281357,-0.2783178687095642],[0.36195024847984314,-0.00780502799898386,-0.9321647882461548],[0.37022340297698975,-0.006347283720970154,-0.9289209842681885],[0.39872634410858154,-0.001279944204725325,-0.9170689582824707],[0.39872637391090393,-0.001279944321140647,-0.9170690774917603],[0.9600644707679749,0.017666827887296677,-0.2792203724384308],[0.9999285340309143,-0.008907451294362545,0.007981736212968826],[0.9705500602722168,0.041453126817941666,-0.2373063713312149],[0.970550000667572,0.04145312309265137,-0.23730634152889252],[0.3728489577770233,-0.427837997674942,0.8233699798583984],[0.3866685628890991,-0.2683693468570709,0.8823068141937256],[0.3863925039768219,-0.27374768257141113,0.8807740807533264],[0.3896631896495819,-0.14819471538066864,0.9089559316635132],[0.3863925039768219,-0.27374768257141113,0.8807740807533264],[0.3866685628890991,-0.2683693468570709,0.8823068141937256],[0.4050523042678833,0.8312997221946716,-0.3806225061416626],[0.4218263030052185,0.893310010433197,-0.15511257946491241],[0.2525371015071869,0.9163177609443665,-0.3107839524745941],[0.2435235232114792,0.8133171796798706,-0.5284045338630676],[0.766213059425354,-0.4164203405380249,0.48939943313598633],[0.9551147222518921,-0.2813762128353119,0.09264519810676575],[0.9477870464324951,-0.3114435374736786,0.06857644021511078],[0.9091628789901733,-0.16485607624053955,0.38242053985595703],[0.766213059425354,-0.4164203405380249,0.48939943313598633],[0.8380744457244873,-0.08995909243822098,0.5380879640579224],[0.9803988933563232,-0.06604071706533432,0.18562422692775726],[0.9551147222518921,-0.2813762128353119,0.09264519810676575],[-0.9798529148101807,-0.11036249250173569,0.16645821928977966],[-0.9780387878417969,-0.11297819763422012,-0.17514568567276],[-0.9590003490447998,-0.05345573276281357,-0.2783178687095642],[-0.9920427203178406,-0.05442262068390846,0.11353173851966858],[-0.6722142696380615,-0.5465120673179626,0.49945202469825745],[-0.8077946901321411,-0.550134539604187,0.21170684695243835],[-0.9311760663986206,-0.36401504278182983,-0.020105909556150436],[-0.8176161050796509,-0.39186012744903564,0.4218408763408661],[-0.5182480812072754,-0.6767961978912354,0.5228439569473267],[-0.8077946901321411,-0.550134539604187,0.21170684695243835],[-0.6722142696380615,-0.5465120673179626,0.49945202469825745],[-0.002707137493416667,-0.9999943375587463,-0.0020069817546755075],[-0.00009738043445395306,-1,-0.00008159968274412677],[-0.0024870464112609625,-0.9999951720237732,-0.0018446068279445171],[-0.0030398331582546234,-0.999992847442627,-0.002252432284876704],[-0.002707137493416667,-0.9999943375587463,-0.0020069817546755075],[-0.0024870464112609625,-0.9999951720237732,-0.0018446068279445171],[-0.0030398338567465544,-0.9999929666519165,-0.0022524327505379915],[0.002526939148083329,-0.999995231628418,-0.001767946989275515],[0.000009873355338640977,-0.9999999403953552,-0.00008601942681707442],[0.002916933037340641,-0.9999936819076538,-0.0020285448990762234],[0.002916933037340641,-0.9999936819076538,-0.0020285448990762234],[0.003246558364480734,-0.9999921917915344,-0.002248803386464715],[0.0032465581316500902,-0.9999921917915344,-0.0022488031536340714],[0.002526939148083329,-0.999995231628418,-0.001767946989275515],[-0.13146741688251495,0.2366977334022522,-0.9626476764678955],[0.697407603263855,0.42583221197128296,-0.5764456391334534],[0.7435843348503113,0.27636152505874634,-0.608856737613678],[-0.005266580265015364,0.020573601126670837,-0.9997743964195251],[0.7435843348503113,0.27636152505874634,-0.608856737613678],[0.697407603263855,0.42583221197128296,-0.5764456391334534],[0.8141242861747742,0.5578469038009644,-0.16127179563045502],[0.8141242265701294,0.5578469038009644,-0.16127179563045502],[-0.3610418736934662,0.7736912369728088,0.5206252932548523],[-0.6349890232086182,0.7232478260993958,0.2714802026748657],[-0.5544269680976868,0.7512640357017517,0.35806867480278015],[-0.3610419034957886,0.7736911177635193,0.5206252336502075],[-0.5544269680976868,0.7512640357017517,0.35806867480278015],[-0.6349890232086182,0.7232478260993958,0.2714802026748657],[-0.8289161920547485,0.35599374771118164,-0.4314700663089752],[-0.7784214615821838,0.2177102118730545,-0.5887802839279175],[-0.8289161920547485,0.35599374771118164,-0.4314700663089752],[-0.13146741688251495,0.2366977334022522,-0.9626476764678955],[-0.005266580265015364,0.020573601126670837,-0.9997743964195251],[-0.7784214615821838,0.2177102118730545,-0.5887802839279175],[0.5507657527923584,-0.1490505039691925,0.8212436437606812],[0.5507657527923584,-0.1490505188703537,0.8212436437606812],[0.5507656931877136,-0.1490504890680313,0.8212435245513916],[0.5507657527923584,-0.1490504890680313,0.8212435841560364],[-0.005266580265015364,0.020573601126670837,-0.9997743964195251],[0.7435843348503113,0.27636152505874634,-0.608856737613678],[0.5358596444129944,-0.11738801002502441,-0.8361066579818726],[-0.02385599911212921,-0.09995710104703903,-0.9947056770324707],[0.9810167551040649,-0.06483679264783859,-0.18276314437389374],[0.9810166358947754,-0.06483679264783859,-0.18276314437389374],[0.9810167551040649,-0.06483680009841919,-0.18276314437389374],[0.9810166954994202,-0.064836785197258,-0.18276312947273254],[-0.5430971384048462,-0.20497308671474457,0.8142674565315247],[-0.543097198009491,-0.20497307181358337,0.8142675161361694],[-0.5430971384048462,-0.20497310161590576,0.8142674565315247],[-0.5430971384048462,-0.20497310161590576,0.8142675757408142],[-0.976665198802948,0.012919560074806213,-0.2143784761428833],[-0.976665198802948,0.012919561006128788,-0.21437852084636688],[-0.976665198802948,0.012919559143483639,-0.2143784761428833],[-0.9766652584075928,0.012919561006128788,-0.2143784910440445],[-0.7784214615821838,0.2177102118730545,-0.5887802839279175],[-0.005266580265015364,0.020573601126670837,-0.9997743964195251],[-0.02385599911212921,-0.09995710104703903,-0.9947056770324707],[-0.5808340907096863,-0.0479637086391449,-0.8126077055931091],[0.9485647082328796,-0.2816155254840851,-0.14462943375110626],[0.7406501770019531,-0.43752405047416687,-0.5099119544029236],[0.2705770432949066,-0.6124230623245239,-0.7427825927734375],[0.9803988933563232,-0.06604071706533432,0.18562422692775726],[0.9999285340309143,-0.008907451294362545,0.007981736212968826],[0.9600644707679749,0.017666827887296677,-0.2792203724384308],[0.9505224823951721,-0.025599543005228043,-0.309599369764328],[0.38566529750823975,-0.1070541962981224,-0.9164069294929504],[0.37875980138778687,-0.09532086551189423,-0.9205731153488159],[0.37022340297698975,-0.006347283720970154,-0.9289209842681885],[0.36195024847984314,-0.00780502799898386,-0.9321647882461548],[-0.9311760663986206,-0.36401504278182983,-0.020105909556150436],[-0.8786116242408752,-0.32081088423728943,-0.3537260591983795],[-0.8510448932647705,-0.09574438631534576,-0.5162901282310486],[-0.9780387878417969,-0.11297819763422012,-0.17514568567276],[-0.8176161050796509,-0.39186012744903564,0.4218408763408661],[-0.9311760663986206,-0.36401504278182983,-0.020105909556150436],[-0.9780387878417969,-0.11297819763422012,-0.17514568567276],[-0.9798529148101807,-0.11036249250173569,0.16645821928977966],[0.26483190059661865,-0.24258455634117126,0.9332828521728516],[0.27656683325767517,-0.2505062520503998,0.9277701377868652],[0.01848628744482994,-0.11704268306493759,0.9929547905921936],[-0.012466281652450562,-0.10213904082775116,0.9946919083595276],[0.9803988933563232,-0.06604071706533432,0.18562422692775726],[0.8380744457244873,-0.08995909243822098,0.5380879640579224],[0.7823804020881653,-0.0719861164689064,0.6186265349388123],[0.9999285340309143,-0.008907451294362545,0.007981736212968826],[0.06757760047912598,-0.5010526180267334,0.8627743124961853],[0.07932622730731964,-0.4095267057418823,0.9088428020477295],[0.07932621240615845,-0.40952667593955994,0.9088428020477295],[0.07088138908147812,-0.4764057397842407,0.8763636946678162],[0.17346534132957458,-0.4330552816390991,0.8845183849334717],[0.06757760047912598,-0.5010526180267334,0.8627743124961853],[0.07088138908147812,-0.4764057397842407,0.8763636946678162],[0.09481082111597061,-0.5233485102653503,0.8468276262283325],[0.3956208825111389,0.7391512393951416,-0.5451050400733948],[0.3956208825111389,0.7391512393951416,-0.54510498046875],[0.38196152448654175,0.7307950258255005,-0.56572425365448],[0.388986736536026,0.7351351380348206,-0.5552167296409607],[0.8651763796806335,0.20427031815052032,0.4579775333404541],[0.9119406938552856,0.39943942427635193,0.09387387335300446],[0.9397345781326294,0.2088989019393921,-0.2706661522388458],[0.9552299380302429,0.09224513918161392,0.2811165153980255],[0.13695234060287476,-0.32076290249824524,0.9372060298919678],[0.13695234060287476,-0.3207629323005676,0.9372060894966125],[0.13695234060287476,-0.32076290249824524,0.9372060894966125],[0.13695229589939117,-0.32076284289360046,0.9372059106826782],[0.7926474213600159,0.10113353282213211,0.6012336015701294],[0.8651763796806335,0.20427031815052032,0.4579775333404541],[0.9552299380302429,0.09224513918161392,0.2811165153980255],[0.8267838954925537,0.01610807329416275,0.5622889995574951],[0.388986736536026,0.7351351380348206,-0.5552167296409607],[0.38196152448654175,0.7307950258255005,-0.56572425365448],[0.3725777566432953,0.7248623967170715,-0.5794482827186584],[0.3725777566432953,0.7248624563217163,-0.5794482827186584],[0.9552299380302429,0.09224513918161392,0.2811165153980255],[0.9397345781326294,0.2088989019393921,-0.2706661522388458],[0.9984315037727356,0.05574440956115723,-0.005208582151681185],[0.9962441325187683,-0.08337707817554474,-0.023362543433904648],[0.2921980917453766,-0.5222808122634888,0.8011509776115417],[0.292198121547699,-0.5222808122634888,0.8011510372161865],[0.3535509705543518,-0.748909592628479,0.5604783296585083],[0.3495377004146576,-0.7314228415489197,0.5855288505554199],[0.8267838954925537,0.01610807329416275,0.5622889995574951],[0.9552299380302429,0.09224513918161392,0.2811165153980255],[0.9962441325187683,-0.08337707817554474,-0.023362543433904648],[0.9066129922866821,-0.3023506999015808,0.2943413257598877],[0.9962441325187683,-0.08337707817554474,-0.023362543433904648],[0.9984315037727356,0.05574440956115723,-0.005208582151681185],[0.9873501062393188,0.009570947848260403,0.15826503932476044],[0.9682334661483765,-0.19593490660190582,0.15534937381744385],[0.3495377004146576,-0.7314228415489197,0.5855288505554199],[0.3535509705543518,-0.748909592628479,0.5604783296585083],[0.3966310918331146,-0.874226450920105,0.28002092242240906],[0.3966022729873657,-0.8742861151695251,0.2798754870891571],[0.9066129922866821,-0.3023506999015808,0.2943413257598877],[0.9962441325187683,-0.08337707817554474,-0.023362543433904648],[0.9682334661483765,-0.19593490660190582,0.15534937381744385],[0.923740804195404,-0.35312986373901367,0.14833100140094757],[0.34378063678741455,0.7168905138969421,0.606533408164978],[0.34378060698509216,0.7168905138969421,0.6065334677696228],[0.3437805771827698,0.7168905138969421,0.606533408164978],[0.34378066658973694,0.7168905735015869,0.6065335273742676],[0.7423210144042969,0.22705449163913727,0.6304013133049011],[0.6109460592269897,0.4342992603778839,0.6619130969047546],[0.6109461188316345,0.4342992901802063,0.6619130969047546],[0.770629346370697,0.16736017167568207,0.6149153709411621],[0.3966022729873657,-0.8742861151695251,0.2798754870891571],[0.3966310918331146,-0.874226450920105,0.28002092242240906],[0.4231787323951721,-0.7899394631385803,0.4437515139579773],[0.4231787621974945,-0.7899393439292908,0.4437515437602997],[0.8336090445518494,-0.014377200976014137,0.5521677136421204],[0.7423210144042969,0.22705449163913727,0.6304013133049011],[0.770629346370697,0.16736017167568207,0.6149153709411621],[0.8336091041564941,-0.014377201907336712,0.5521677732467651],[0.45546984672546387,0.1650240272283554,0.8748223781585693],[0.45546987652778625,0.1650240421295166,0.8748224377632141],[0.4282975196838379,0.5146201848983765,0.7427835464477539],[0.43389180302619934,0.48191967606544495,0.7612432837486267],[0.10482406616210938,0.9720267653465271,0.21018041670322418],[0.10482407361268997,0.9720268249511719,0.21018043160438538],[0.10482407361268997,0.9720267653465271,0.21018043160438538],[0.10482405126094818,0.9720266461372375,0.210180401802063],[0.4050523042678833,0.8312997221946716,-0.3806225061416626],[0.7011295557022095,0.7121444940567017,0.035601671785116196],[0.7618468403816223,0.646384596824646,0.04214463010430336],[0.4218263030052185,0.893310010433197,-0.15511257946491241],[0.7128168344497681,0.5547977089881897,-0.42905882000923157],[0.8051605820655823,0.5251745581626892,-0.2755143642425537],[0.8051605224609375,0.5251745581626892,-0.2755143642425537],[0.6335839629173279,0.5647056102752686,-0.5288468599319458],[0.552563488483429,0.5657110810279846,-0.6120822429656982],[0.7128168344497681,0.5547977089881897,-0.42905882000923157],[0.6335839629173279,0.5647056102752686,-0.5288468599319458],[0.5525634288787842,0.5657110214233398,-0.6120821833610535],[0.48474282026290894,0.756238579750061,0.43946269154548645],[0.4847428798675537,0.7562386393547058,0.4394627809524536],[0.4847429096698761,0.7562386989593506,0.4394627511501312],[0.48474279046058655,0.756238579750061,0.43946269154548645],[0.27773410081863403,0.743943989276886,0.6077921390533447],[0.27773404121398926,0.7439438700675964,0.6077920198440552],[0.27773404121398926,0.743943989276886,0.6077920794487],[0.968436062335968,-0.17695017158985138,0.17555688321590424],[0.968436062335968,-0.17695018649101257,0.17555688321590424],[0.9684360027313232,-0.17695015668869019,0.17555686831474304],[0.9684361219406128,-0.17695017158985138,0.17555689811706543],[0.10337559878826141,0.23609063029289246,-0.9662166833877563],[0.10337559878826141,0.23609063029289246,-0.9662166833877563],[0.1213289424777031,0.28933531045913696,-0.9495073556900024],[0.12569350004196167,0.3023165762424469,-0.9448839426040649],[-0.5987306237220764,0.7815070748329163,0.1754090040922165],[-0.5987306237220764,0.7815070152282715,0.17540901899337769],[-0.5916424989700317,0.79185950756073,0.1513853222131729],[-0.5941922068595886,0.7882744669914246,0.15987159311771393],[-0.03073604218661785,0.06645089387893677,0.9973161220550537],[-0.030736036598682404,0.06645088642835617,0.9973161220550537],[-0.0025426747743040323,0.05963180214166641,0.9982172250747681],[-0.010676821693778038,0.06160430610179901,0.9980434775352478],[0.9105457663536072,-0.3529585599899292,0.215236097574234],[0.9105458855628967,-0.3529585897922516,0.2152361124753952],[0.9105457663536072,-0.3529585599899292,0.2152361124753952],[0.910545825958252,-0.3529585897922516,0.2152361422777176],[0.12569350004196167,0.3023165762424469,-0.9448839426040649],[0.1213289424777031,0.28933531045913696,-0.9495073556900024],[0.21081222593784332,0.5589836835861206,-0.8019322752952576],[0.21081221103668213,0.5589836239814758,-0.8019322156906128],[-0.5941922068595886,0.7882744669914246,0.15987159311771393],[-0.5916424989700317,0.79185950756073,0.1513853222131729],[-0.5729642510414124,0.8142195343971252,0.0935879647731781],[-0.5729641914367676,0.8142194747924805,0.0935879647731781],[-0.010676821693778038,0.06160430610179901,0.9980434775352478],[-0.0025426747743040323,0.05963180214166641,0.9982172250747681],[0.12312792986631393,0.028629768639802933,0.9919777512550354],[0.12312791496515274,0.028629764914512634,0.9919776320457458],[-0.6724090576171875,0.7385257482528687,0.04945340007543564],[-0.9888207912445068,0.14657975733280182,-0.027346821501851082],[-0.9914775490760803,0.12642793357372284,-0.03143296018242836],[-0.7527928948402405,0.6582412719726562,0.004626768175512552],[-0.9602015614509583,-0.24244357645511627,-0.13868680596351624],[-0.9914775490760803,0.12642793357372284,-0.03143296018242836],[-0.9888207912445068,0.14657975733280182,-0.027346821501851082],[-0.927798330783844,-0.3665548264980316,-0.06948138028383255],[-0.9889450073242188,-0.10021429508924484,0.10929232835769653],[-0.9776735305786133,0.1435503214597702,0.15345264971256256],[-0.9914775490760803,0.12642793357372284,-0.03143296018242836],[-0.9602015614509583,-0.24244357645511627,-0.13868680596351624],[-0.9776735305786133,0.1435503214597702,0.15345264971256256],[-0.7619723081588745,0.6466788649559021,0.03470776230096817],[-0.7527928948402405,0.6582412719726562,0.004626768175512552],[-0.9914775490760803,0.12642793357372284,-0.03143296018242836],[-0.42595726251602173,0.8905650973320007,-0.15954336524009705],[-0.2557784914970398,0.9142258763313293,-0.3142741918563843],[-0.27628374099731445,0.9602630138397217,-0.039524421095848083],[-0.3624524176120758,0.931523859500885,-0.029859352856874466],[-0.9968475699424744,0.07736142724752426,0.017608797177672386],[-0.9888207912445068,0.14657975733280182,-0.027346821501851082],[-0.6724090576171875,0.7385257482528687,0.04945340007543564],[-0.6531815528869629,0.7541465759277344,0.06794661283493042],[-0.9304522275924683,-0.3664124310016632,0.0007129135774448514],[-0.927798330783844,-0.3665548264980316,-0.06948138028383255],[-0.9888207912445068,0.14657975733280182,-0.027346821501851082],[-0.9968475699424744,0.07736142724752426,0.017608797177672386],[0.005796223413199186,-0.9999817609786987,0.0016803601756691933],[0.005813247058540583,-0.9999827742576599,0.0006093024858273566],[0.005953340791165829,-0.9999483823776245,-0.008220691233873367],[-0.522422730922699,0.8478277921676636,-0.09089833498001099],[-0.5374892950057983,0.8233551383018494,-0.18218517303466797],[-0.6925307512283325,0.65254807472229,-0.3075423836708069],[-0.8752921223640442,0.48130813241004944,-0.04696930944919586],[-0.6925307512283325,0.65254807472229,-0.3075423836708069],[-0.8652673363685608,0.35965806245803833,-0.34922564029693604],[-0.9942461252212524,0.10711942613124847,-0.0001879819465102628],[-0.8752921223640442,0.48130813241004944,-0.04696930944919586],[0.005804457701742649,-0.9999387860298157,0.009420884773135185],[0.0058044558390975,-0.9999386668205261,0.009420882910490036],[0.0058044567704200745,-0.9999387264251709,0.00942088384181261],[0.0058044558390975,-0.9999386668205261,0.00942088384181261],[-0.5374892950057983,0.8233551383018494,-0.18218517303466797],[-0.42644965648651123,0.44377845525741577,-0.7881631851196289],[-0.3751875162124634,0.6258243918418884,-0.6837967038154602],[-0.6925307512283325,0.65254807472229,-0.3075423836708069],[-0.6925307512283325,0.65254807472229,-0.3075423836708069],[-0.3751875162124634,0.6258243918418884,-0.6837967038154602],[-0.34529393911361694,0.6041271686553955,-0.718193769454956],[-0.8652673363685608,0.35965806245803833,-0.34922564029693604],[-0.9942461252212524,0.10711942613124847,-0.0001879819465102628],[-0.8652673363685608,0.35965806245803833,-0.34922564029693604],[-0.9524434804916382,0.03328288346529007,-0.30289217829704285],[-0.9950538277626038,-0.0990152582526207,0.007980860769748688],[-0.5452626347541809,-0.8380714058876038,0.01802668161690235],[-0.5241155624389648,-0.8468071222305298,-0.09066712856292725],[-0.927798330783844,-0.3665548264980316,-0.06948138028383255],[-0.9304522275924683,-0.3664124310016632,0.0007129135774448514],[-0.9473277926445007,-0.29350194334983826,0.12816645205020905],[-0.9889450073242188,-0.10021429508924484,0.10929232835769653],[-0.9602015614509583,-0.24244357645511627,-0.13868680596351624],[-0.8023288249969482,-0.39257118105888367,-0.4496179223060608],[-0.7619723081588745,0.6466788649559021,0.03470776230096817],[-0.9776735305786133,0.1435503214597702,0.15345264971256256],[-0.9415944814682007,0.18800051510334015,0.2793843746185303],[-0.8426296710968018,0.49594929814338684,0.20978452265262604],[-0.7527928948402405,0.6582412719726562,0.004626768175512552],[-0.7619723081588745,0.6466788649559021,0.03470776230096817],[-0.42595726251602173,0.8905650973320007,-0.15954336524009705],[-0.3624524176120758,0.931523859500885,-0.029859352856874466],[-0.37878361344337463,0.9222328662872314,0.077520452439785],[-0.6724090576171875,0.7385257482528687,0.04945340007543564],[-0.7527928948402405,0.6582412719726562,0.004626768175512552],[-0.3624524176120758,0.931523859500885,-0.029859352856874466],[-0.6531815528869629,0.7541465759277344,0.06794661283493042],[-0.6724090576171875,0.7385257482528687,0.04945340007543564],[-0.37878361344337463,0.9222328662872314,0.077520452439785],[-0.38555166125297546,0.9189807176589966,0.08260949701070786],[-0.5132337212562561,0.853890597820282,-0.08638280630111694],[-0.5374892950057983,0.8233551383018494,-0.18218517303466797],[-0.522422730922699,0.8478277921676636,-0.09089833498001099],[-0.42569205164909363,0.8998918533325195,-0.09476727247238159],[-0.7427892088890076,-0.6691581606864929,0.02216845005750656],[-0.3007699251174927,-0.9530642628669739,0.03472787141799927],[-0.28909388184547424,-0.9559243321418762,0.051316678524017334],[-0.7525398135185242,-0.6579435467720032,0.028177954256534576],[-0.7857488393783569,0.5784883499145508,-0.21897518634796143],[-0.5374892950057983,0.8233551383018494,-0.18218517303466797],[-0.5132337212562561,0.853890597820282,-0.08638280630111694],[-0.613581657409668,0.7878734469413757,-0.052658841013908386],[-0.7459130883216858,-0.6660369038581848,0.002902149921283126],[-0.3141822814941406,-0.9491105079650879,0.02188180387020111],[-0.3007699251174927,-0.9530642628669739,0.03472787141799927],[-0.7427892088890076,-0.6691581606864929,0.02216845005750656],[-0.9991235136985779,-0.03501037135720253,-0.022945178672671318],[-0.7459130883216858,-0.6660369038581848,0.002902149921283126],[-0.7427892088890076,-0.6691581606864929,0.02216845005750656],[-0.8112958073616028,0.5839515328407288,-0.02827322669327259],[-0.996208131313324,-0.0641126036643982,-0.058812860399484634],[-0.7457423210144043,-0.6656471490859985,-0.02796381339430809],[-0.7459130883216858,-0.6660369038581848,0.002902149921283126],[-0.9991235136985779,-0.03501037135720253,-0.022945178672671318],[-0.7457423210144043,-0.6656471490859985,-0.02796381339430809],[-0.34119269251823425,-0.9399923086166382,0.00145998306106776],[-0.3141822814941406,-0.9491105079650879,0.02188180387020111],[-0.7459130883216858,-0.6660369038581848,0.002902149921283126],[-0.9964603781700134,-0.06455106288194656,-0.05384964123368263],[-0.7923129200935364,-0.6072733402252197,-0.05881613865494728],[-0.7457423210144043,-0.6656471490859985,-0.02796381339430809],[-0.996208131313324,-0.0641126036643982,-0.058812860399484634],[-0.7923129200935364,-0.6072733402252197,-0.05881613865494728],[-0.39867833256721497,-0.9157551527023315,-0.04947701096534729],[-0.34119269251823425,-0.9399923086166382,0.00145998306106776],[-0.7457423210144043,-0.6656471490859985,-0.02796381339430809],[-0.9978228807449341,-0.052017636597156525,-0.04054385796189308],[-0.8045254349708557,-0.5899363160133362,-0.06865759193897247],[-0.7923129200935364,-0.6072733402252197,-0.05881613865494728],[-0.9964603781700134,-0.06455106288194656,-0.05384964123368263],[-0.8045254349708557,-0.5899363160133362,-0.06865759193897247],[-0.4281114637851715,-0.9006050229072571,-0.07504181563854218],[-0.39867833256721497,-0.9157551527023315,-0.04947701096534729],[-0.7923129200935364,-0.6072733402252197,-0.05881613865494728],[-0.9999374747276306,-0.010656140744686127,-0.0033726776018738747],[-0.9999374747276306,-0.010656139813363552,-0.0033726776018738747],[-0.9999374747276306,-0.010656139813363552,-0.0033726771362125874],[-0.9999374747276306,-0.010656141676008701,-0.003372677369043231],[-0.46652281284332275,-0.8773670196533203,-0.11217646300792694],[-0.46652284264564514,-0.8773669600486755,-0.11217647045850754],[-0.46652284264564514,-0.8773670196533203,-0.11217647045850754],[-0.46652284264564514,-0.8773670196533203,-0.11217647790908813],[-0.998106837272644,0.010563105344772339,-0.060587745159864426],[-0.9981069564819336,0.010563106276094913,-0.06058775261044502],[-0.9981070160865784,0.010563107207417488,-0.06058775261044502],[-0.9981068968772888,0.010563105344772339,-0.060587745159864426],[-0.511318027973175,-0.8463997840881348,-0.14886631071567535],[-0.511318027973175,-0.8463997840881348,-0.14886629581451416],[-0.5113179683685303,-0.8463996648788452,-0.14886628091335297],[-0.5113181471824646,-0.8463999032974243,-0.14886634051799774],[-0.7703719735145569,0.36437028646469116,-0.5232220888137817],[-0.7748350501060486,0.07525312900543213,-0.6276682615280151],[-0.7226925492286682,-0.07164765894412994,-0.6874459385871887],[-0.7184540033340454,0.49049338698387146,-0.4931935667991638],[-0.7748350501060486,0.07525312900543213,-0.6276682615280151],[-0.3967260420322418,-0.543319821357727,-0.739872932434082],[-0.7226925492286682,-0.07164765894412994,-0.6874459385871887],[-0.3866487145423889,0.7524677515029907,0.5331932306289673],[-0.4746325612068176,0.5189173817634583,0.7109490036964417],[-0.4824405908584595,0.4865904748439789,0.7283408641815186],[-0.3866487443447113,0.7524677515029907,0.5331932306289673],[-0.37878361344337463,0.9222328662872314,0.077520452439785],[-0.3624524176120758,0.931523859500885,-0.029859352856874466],[-0.27628374099731445,0.9602630138397217,-0.039524421095848083],[-0.3125985860824585,0.9456348419189453,0.08975975215435028],[-0.38555166125297546,0.9189807176589966,0.08260949701070786],[-0.37878361344337463,0.9222328662872314,0.077520452439785],[-0.3125985860824585,0.9456348419189453,0.08975975215435028],[-0.32564088702201843,0.9408991932868958,0.09309463202953339],[-0.5132337212562561,0.853890597820282,-0.08638280630111694],[-0.42569205164909363,0.8998918533325195,-0.09476727247238159],[-0.4223349988460541,0.9020577669143677,-0.08902166038751602],[-0.47521063685417175,0.8792427778244019,-0.03327258676290512],[-0.613581657409668,0.7878734469413757,-0.052658841013908386],[-0.5132337212562561,0.853890597820282,-0.08638280630111694],[-0.47521063685417175,0.8792427778244019,-0.03327258676290512],[-0.49966830015182495,0.8654713034629822,0.03592948615550995],[-0.48874396085739136,0.8688843250274658,-0.07854470610618591],[-0.8112958073616028,0.5839515328407288,-0.02827322669327259],[-0.5200663208961487,0.8529512286186218,-0.044778332114219666],[-0.48747149109840393,0.8697009682655334,-0.07740731537342072],[-0.4989730417728424,0.8658506870269775,-0.0364481545984745],[-0.48874396085739136,0.8688843250274658,-0.07854470610618591],[-0.48747149109840393,0.8697009682655334,-0.07740731537342072],[-0.4985499382019043,0.8660683035850525,-0.037062011659145355],[-0.5233396291732788,0.8521240949630737,-0.0002806649135891348],[-0.4989730417728424,0.8658506870269775,-0.0364481545984745],[-0.4985499382019043,0.8660683035850525,-0.037062011659145355],[-0.5233396887779236,0.8521241545677185,-0.00028066494269296527],[-0.593992292881012,0.8027538061141968,0.052529819309711456],[-0.5939923524856567,0.8027538061141968,0.052529823035001755],[-0.5939923524856567,0.8027538657188416,0.052529823035001755],[-0.5939922332763672,0.8027538061141968,0.052529819309711456],[-0.6263992786407471,0.7756830453872681,0.07706866413354874],[-0.6263992786407471,0.7756831049919128,0.07706867158412933],[-0.6263992786407471,0.7756831645965576,0.07706866413354874],[-0.6263993382453918,0.7756831049919128,0.07706866413354874],[-0.6624122858047485,0.7462863922119141,0.06531944870948792],[-0.6624122262001038,0.7462863326072693,0.06531944870948792],[-0.6624122262001038,0.7462863326072693,0.06531943380832672],[-0.6624122858047485,0.7462863922119141,0.06531944870948792],[-0.7703719735145569,0.36437028646469116,-0.5232220888137817],[-0.7184540033340454,0.49049338698387146,-0.4931935667991638],[-0.5710006952285767,0.7150753736495972,-0.40326809883117676],[-0.3751875162124634,0.6258243918418884,-0.6837967038154602],[-0.42644965648651123,0.44377845525741577,-0.7881631851196289],[-0.08843350410461426,-0.2680386006832123,-0.9593408107757568],[-0.01909593679010868,0.41793292760849,-0.908277153968811],[-0.3751875162124634,0.6258243918418884,-0.6837967038154602],[-0.01909593679010868,0.41793292760849,-0.908277153968811],[-0.0025348279159516096,0.5433701276779175,-0.8394894003868103],[-0.34529393911361694,0.6041271686553955,-0.718193769454956],[-0.9440922141075134,-0.05124950408935547,0.3256736099720001],[-0.9889450073242188,-0.10021429508924484,0.10929232835769653],[-0.9473277926445007,-0.29350194334983826,0.12816645205020905],[-0.9089924097061157,-0.16209730505943298,0.3840016722679138],[-0.14601776003837585,-0.9890109300613403,0.023154597729444504],[-0.1164323017001152,-0.9908350110054016,-0.06847979128360748],[-0.5241155624389648,-0.8468071222305298,-0.09066712856292725],[-0.5452626347541809,-0.8380714058876038,0.01802668161690235],[-0.9950538277626038,-0.0990152582526207,0.007980860769748688],[-0.9836636781692505,-0.17351125180721283,0.04795341566205025],[-0.9323112368583679,-0.2517188787460327,0.25967937707901],[-0.9480769634246826,-0.18246516585350037,0.2604924142360687],[-0.07733840495347977,-0.994351327419281,-0.07269264757633209],[-0.07733839005231857,-0.9943512678146362,-0.0726926326751709],[-0.07733841240406036,-0.994351327419281,-0.07269264757633209],[-0.9524434804916382,0.03328288346529007,-0.30289217829704285],[-0.9473239183425903,-0.03956227004528046,-0.3178243041038513],[-0.9836636781692505,-0.17351125180721283,0.04795341566205025],[-0.9950538277626038,-0.0990152582526207,0.007980860769748688],[0.19794845581054688,-0.10567755252122879,-0.9744991660118103],[0.36142194271087646,-0.31621846556663513,-0.8771430850028992],[0.3618732988834381,-0.24133867025375366,-0.9004461169242859],[0.3067537546157837,-0.2993679940700531,-0.9034827351570129],[0.05825778469443321,0.1261458396911621,-0.9902995228767395],[0.19794845581054688,-0.10567755252122879,-0.9744991660118103],[0.3067537546157837,-0.2993679940700531,-0.9034827351570129],[0.05825778841972351,0.1261458396911621,-0.9902995228767395],[-0.573340117931366,0.03138911724090576,-0.8187159895896912],[-0.5588298439979553,0.24200040102005005,-0.7931865453720093],[-0.5588299036026001,0.24200041592121124,-0.793186604976654],[-0.5725812315940857,0.07158352434635162,-0.8167169094085693],[-0.5824649333953857,-0.08963058143854141,-0.8078991174697876],[-0.5974618196487427,-0.026273036375641823,-0.801466703414917],[-0.573340117931366,0.03138911724090576,-0.8187159895896912],[-0.5725812315940857,0.07158352434635162,-0.8167169094085693],[-0.9836636781692505,-0.17351125180721283,0.04795341566205025],[-0.9701706767082214,-0.13367219269275665,0.20223893225193024],[-0.8858831524848938,-0.2169192135334015,0.4100697338581085],[-0.9323112368583679,-0.2517188787460327,0.25967937707901],[0.4892696440219879,-0.6696873307228088,0.5586896538734436],[0.8253296613693237,-0.4897189140319824,0.2810806930065155],[0.7361050248146057,-0.5608598589897156,0.37892648577690125],[0.48926958441734314,-0.6696872711181641,0.5586895942687988],[-0.9473239183425903,-0.03956227004528046,-0.3178243041038513],[-0.9773173332214355,0.023850541561841965,-0.21043281257152557],[-0.9701706767082214,-0.13367219269275665,0.20223893225193024],[-0.9836636781692505,-0.17351125180721283,0.04795341566205025],[0.36142194271087646,-0.31621846556663513,-0.8771430850028992],[0.30721333622932434,0.06397239118814468,-0.9494879841804504],[0.3064556419849396,0.06269384920597076,-0.9498180150985718],[0.3618732988834381,-0.24133867025375366,-0.9004461169242859],[-0.5824649333953857,-0.08963058143854141,-0.8078991174697876],[-0.6289485692977905,0.09341081976890564,-0.7718148827552795],[-0.6298378705978394,0.08495340496301651,-0.7720667123794556],[-0.5974618196487427,-0.026273036375641823,-0.801466703414917],[-0.9701706767082214,-0.13367219269275665,0.20223893225193024],[-0.9699404239654541,0.08530983328819275,0.22789880633354187],[-0.6252967715263367,0.2084946185350418,0.7520199418067932],[-0.8858831524848938,-0.2169192135334015,0.4100697338581085],[0.44077548384666443,-0.15774056315422058,0.8836487531661987],[0.8349682092666626,-0.11871185153722763,0.5373412370681763],[0.8264356851577759,-0.12037667632102966,0.5500122308731079],[0.44077542424201965,-0.1577405482530594,0.8836486339569092],[-0.9773173332214355,0.023850541561841965,-0.21043281257152557],[-0.9860050678253174,0.010643646121025085,-0.1663745939731598],[-0.9699404239654541,0.08530983328819275,0.22789880633354187],[-0.9701706767082214,-0.13367219269275665,0.20223893225193024],[0.30721333622932434,0.06397239118814468,-0.9494879841804504],[0.27058839797973633,-0.22081521153450012,-0.9370286464691162],[0.26844555139541626,-0.19278335571289062,-0.9438068270683289],[0.3064556419849396,0.06269384920597076,-0.9498180150985718],[-0.6289485692977905,0.09341081976890564,-0.7718148827552795],[-0.6188177466392517,-0.11514642834663391,-0.7770494222640991],[-0.6176766753196716,-0.12217335402965546,-0.7768841981887817],[-0.6298378705978394,0.08495340496301651,-0.7720667123794556],[-0.9699404239654541,0.08530983328819275,0.22789880633354187],[-0.9185221791267395,0.179682195186615,0.3521808981895447],[-0.5893592238426208,0.2972886562347412,0.751182496547699],[-0.6252967715263367,0.2084946185350418,0.7520199418067932],[0.45717763900756836,0.2989414632320404,0.8376291394233704],[0.7812478542327881,0.20770178735256195,0.5886525511741638],[0.8054727911949158,0.19689813256263733,0.5589675903320312],[0.45717766880989075,0.298941433429718,0.8376291990280151],[-0.9860050678253174,0.010643646121025085,-0.1663745939731598],[-0.9825411438941956,-0.002801100490614772,-0.18602432310581207],[-0.9185221791267395,0.179682195186615,0.3521808981895447],[-0.9699404239654541,0.08530983328819275,0.22789880633354187],[0.9796860218048096,-0.0870121568441391,-0.18067669868469238],[0.9796860814094543,-0.0870121568441391,-0.18067671358585358],[0.9796860218048096,-0.0870121568441391,-0.18067669868469238],[0.9796860218048096,-0.0870121568441391,-0.18067669868469238],[0.27058839797973633,-0.22081521153450012,-0.9370286464691162],[0.2750524580478668,-0.29193371534347534,-0.9160352945327759],[0.2750525176525116,-0.2919337749481201,-0.9160354137420654],[0.26844555139541626,-0.19278335571289062,-0.9438068270683289],[-0.6188177466392517,-0.11514642834663391,-0.7770494222640991],[-0.6042844653129578,-0.19331619143486023,-0.7729612588882446],[-0.604284405708313,-0.19331616163253784,-0.7729611992835999],[-0.6176766753196716,-0.12217335402965546,-0.7768841981887817],[0.7592925429344177,-0.5591611266136169,-0.3328869938850403],[0.7637971043586731,-0.47234907746315,-0.43988677859306335],[0.7637970447540283,-0.47234907746315,-0.43988680839538574],[0.7611100077629089,-0.5448593497276306,-0.351908802986145],[0.653254508972168,-0.738763153553009,0.16579394042491913],[0.7592925429344177,-0.5591611266136169,-0.3328869938850403],[0.7611100077629089,-0.5448593497276306,-0.351908802986145],[0.7014369964599609,-0.7124874591827393,0.018645010888576508],[0.957516610622406,-0.28402209281921387,-0.04993342235684395],[0.9081516265869141,-0.15485897660255432,-0.38894644379615784],[0.9081515669822693,-0.15485896170139313,-0.38894644379615784],[0.958380937576294,-0.272652268409729,-0.08465664088726044],[0.8253296613693237,-0.4897189140319824,0.2810806930065155],[0.957516610622406,-0.28402209281921387,-0.04993342235684395],[0.958380937576294,-0.272652268409729,-0.08465664088726044],[0.7361050248146057,-0.5608598589897156,0.37892648577690125],[0.8349682092666626,-0.11871185153722763,0.5373412370681763],[0.9973436594009399,-0.06475552171468735,0.033351972699165344],[0.9980437755584717,-0.06244455277919769,-0.0030331613961607218],[0.8264356851577759,-0.12037667632102966,0.5500122308731079],[0.9973436594009399,-0.06475552171468735,0.033351972699165344],[0.9729381203651428,-0.04641494154930115,-0.22635598480701447],[0.972938060760498,-0.04641493782401085,-0.22635596990585327],[0.9980437755584717,-0.06244455277919769,-0.0030331613961607218],[0.005773970857262611,-0.9999786019325256,0.0030797752551734447],[0.005813247058540583,-0.9999827742576599,0.0006093024858273566],[0.005796223413199186,-0.9999817609786987,0.0016803601756691933],[0.005773970391601324,-0.9999785423278809,0.0030797747895121574],[0.8054727911949158,0.19689813256263733,0.5589675903320312],[0.7812478542327881,0.20770178735256195,0.5886525511741638],[0.9732228517532349,0.07332519441843033,0.21785473823547363],[0.9732228517532349,0.07332518696784973,0.21785475313663483],[-0.976742684841156,-0.052896250039339066,0.20778752863407135],[-0.9942461252212524,0.10711942613124847,-0.0001879819465102628],[-0.9950538277626038,-0.0990152582526207,0.007980860769748688],[-0.9480769634246826,-0.18246516585350037,0.2604924142360687],[-0.8752921223640442,0.48130813241004944,-0.04696930944919586],[-0.9942461252212524,0.10711942613124847,-0.0001879819465102628],[-0.976742684841156,-0.052896250039339066,0.20778752863407135],[-0.9018002152442932,0.43143555521965027,0.024890722706913948],[-0.522422730922699,0.8478277921676636,-0.09089833498001099],[-0.8752921223640442,0.48130813241004944,-0.04696930944919586],[-0.9018002152442932,0.43143555521965027,0.024890722706913948],[-0.5388258695602417,0.838491678237915,-0.08123032748699188],[-0.42569205164909363,0.8998918533325195,-0.09476727247238159],[-0.522422730922699,0.8478277921676636,-0.09089833498001099],[-0.5388258695602417,0.838491678237915,-0.08123032748699188],[-0.4188113212585449,0.9034200310707092,-0.09181131422519684],[-0.42569205164909363,0.8998918533325195,-0.09476727247238159],[-0.4188113212585449,0.9034200310707092,-0.09181131422519684],[-0.4022566080093384,0.9120044112205505,-0.08023528009653091],[-0.4223349988460541,0.9020577669143677,-0.08902166038751602],[0.453835129737854,-0.7205432653427124,0.5242624878883362],[0.653254508972168,-0.738763153553009,0.16579394042491913],[0.7014369964599609,-0.7124874591827393,0.018645010888576508],[0.45383507013320923,-0.7205432653427124,0.5242624282836914],[-0.8112958073616028,0.5839515328407288,-0.02827322669327259],[-0.7427892088890076,-0.6691581606864929,0.02216845005750656],[-0.7525398135185242,-0.6579435467720032,0.028177954256534576],[-0.8390973806381226,0.5439773201942444,-0.002080581383779645],[-0.8112958073616028,0.5839515328407288,-0.02827322669327259],[-0.8390973806381226,0.5439773201942444,-0.002080581383779645],[-0.5433249473571777,0.8394855856895447,0.007872949354350567],[-0.5200663208961487,0.8529512286186218,-0.044778332114219666],[-0.9415944814682007,0.18800051510334015,0.2793843746185303],[-0.9776735305786133,0.1435503214597702,0.15345264971256256],[-0.9889450073242188,-0.10021429508924484,0.10929232835769653],[-0.9440922141075134,-0.05124950408935547,0.3256736099720001],[-0.3431074023246765,-0.3458298444747925,0.8733149170875549],[-0.3431074023246765,-0.3458298146724701,0.8733147978782654],[-0.3431074023246765,-0.3458298444747925,0.8733148574829102],[-0.00481108482927084,-0.9999883770942688,-0.00021707858832087368],[-0.004620146472007036,-0.9999879598617554,0.001657801796682179],[-0.005666486918926239,-0.9999467730522156,-0.008618608117103577],[-0.004471795167773962,-0.9999850988388062,0.0031143990345299244],[-0.004471795167773962,-0.9999850392341614,0.0031143990345299244],[-0.004620146472007036,-0.9999879598617554,0.001657801796682179],[-0.00481108482927084,-0.9999883770942688,-0.00021707858832087368],[-0.0010187785374000669,-0.9999849796295166,0.005365046672523022],[-0.0010187787702307105,-0.9999850988388062,0.005365047138184309],[-0.0010187787702307105,-0.9999851584434509,0.005365047603845596],[-0.0010187785374000669,-0.9999849796295166,0.005365046672523022],[-0.1169370636343956,0.10038254410028458,-0.9880532622337341],[-0.062225598841905594,0.01109904982149601,-0.9980003833770752],[-0.6522122621536255,0.1848730444908142,-0.7351468801498413],[-0.7579457759857178,0.27697327733039856,-0.5905961990356445],[-0.6522122621536255,0.1848730444908142,-0.7351468801498413],[-0.8674748539924622,0.37473905086517334,-0.32719752192497253],[-0.8674747943878174,0.37473902106285095,-0.32719749212265015],[-0.7579457759857178,0.27697327733039856,-0.5905961990356445],[-0.05369451642036438,0.7826659679412842,0.6201216578483582],[-0.2027406543493271,0.552531898021698,0.8084582090377808],[0.5579318404197693,0.6933944225311279,0.45597830414772034],[0.5375236868858337,0.6949065327644348,0.4776747524738312],[0.5375236868858337,0.6949065327644348,0.4776747524738312],[0.5579318404197693,0.6933944225311279,0.45597830414772034],[0.8256932497024536,0.5639258027076721,0.014774173498153687],[0.8919774293899536,0.4263274669647217,-0.1504036784172058],[0.8951589465141296,0.40545105934143066,-0.18520253896713257],[0.577497124671936,0.14261436462402344,-0.8038396239280701],[0.7394495010375977,0.2839336097240448,-0.6104065179824829],[0.7394495010375977,0.2839336097240448,-0.6104065179824829],[0.577497124671936,0.14261436462402344,-0.8038396239280701],[-0.062225598841905594,0.01109904982149601,-0.9980003833770752],[-0.1169370636343956,0.10038254410028458,-0.9880532622337341],[-0.600369393825531,0.3730711340904236,0.7073715329170227],[-0.5113011002540588,-0.13511663675308228,0.8487134575843811],[-0.5113010406494141,-0.13511662185192108,0.8487133979797363],[-0.2027406543493271,0.552531898021698,0.8084582090377808],[-0.062225598841905594,0.01109904982149601,-0.9980003833770752],[-0.07047327607870102,-0.056778404861688614,-0.9958964586257935],[-0.34511494636535645,-0.029002906754612923,-0.9381122589111328],[-0.6522122621536255,0.1848730444908142,-0.7351468801498413],[-0.9913008809089661,-0.13160249590873718,0.0017998266266658902],[-0.9913009405136108,-0.13160249590873718,0.001799826743081212],[-0.9913008809089661,-0.13160249590873718,0.0017998265102505684],[-0.9913009405136108,-0.13160249590873718,0.001799826743081212],[0.4942286014556885,-0.19463640451431274,0.8472630977630615],[0.4942286014556885,-0.19463637471199036,0.8472630977630615],[0.4942285716533661,-0.19463635981082916,0.8472630381584167],[0.4942286014556885,-0.19463637471199036,0.8472630977630615],[0.9881885051727295,-0.1460365206003189,-0.04644080996513367],[0.988188624382019,-0.1460365206003189,-0.046440813690423965],[0.9881885051727295,-0.14603650569915771,-0.04644080623984337],[0.9881885051727295,-0.1460365206003189,-0.04644080996513367],[0.9552457928657532,-0.07108645141124725,-0.2871449589729309],[0.9552457928657532,-0.07108644396066666,-0.2871449291706085],[0.9552457332611084,-0.07108644396066666,-0.2871449291706085],[0.9552457928657532,-0.07108644396066666,-0.2871449589729309],[0.577497124671936,0.14261436462402344,-0.8038396239280701],[0.23435240983963013,-0.08183195441961288,-0.9687013626098633],[-0.07047327607870102,-0.056778404861688614,-0.9958964586257935],[-0.062225598841905594,0.01109904982149601,-0.9980003833770752],[-0.5763696432113647,0.6622241139411926,0.4788082242012024],[-0.600369393825531,0.3730711340904236,0.7073715329170227],[-0.2027406543493271,0.552531898021698,0.8084582090377808],[-0.05369451642036438,0.7826659679412842,0.6201216578483582],[0.8391563296318054,0.5393615961074829,0.07004023343324661],[0.8951589465141296,0.40545105934143066,-0.18520253896713257],[0.8919774293899536,0.4263274669647217,-0.1504036784172058],[-0.882590115070343,-0.03650842234492302,-0.46872344613075256],[-0.882590115070343,-0.036508429795503616,-0.4687235355377197],[-0.882590115070343,-0.03650842607021332,-0.46872347593307495],[-0.882590115070343,-0.03650842607021332,-0.4687235355377197],[-0.889030396938324,0.451751708984375,0.07446818053722382],[-0.600369393825531,0.3730711340904236,0.7073715329170227],[-0.5763696432113647,0.6622241139411926,0.4788082242012024],[0.7184011936187744,-0.6829391717910767,-0.13226424157619476],[0.7996262311935425,-0.5610377788543701,0.21408973634243011],[0.8230825662612915,-0.48958125710487366,-0.28782880306243896],[-0.8023288249969482,-0.39257118105888367,-0.4496179223060608],[-0.9208201766014099,-0.29577285051345825,-0.2541823387145996],[-0.9269654154777527,-0.3435562551021576,0.15067937970161438],[-0.9473277926445007,-0.29350194334983826,0.12816645205020905],[-0.15191736817359924,-0.44608259201049805,0.8820042610168457],[-0.25170090794563293,-0.22472083568572998,0.9413539171218872],[-0.26237815618515015,-0.23019830882549286,0.9371053576469421],[-0.06973143666982651,-0.5524761080741882,0.8306068181991577],[0.7996262311935425,-0.5610377788543701,0.21408973634243011],[0.9406462907791138,-0.33650943636894226,-0.04411286488175392],[0.8721233010292053,-0.2860887944698334,-0.396930992603302],[0.8230825662612915,-0.48958125710487366,-0.28782880306243896],[-0.42734047770500183,-0.3831574618816376,-0.8188837766647339],[-0.42732101678848267,-0.3530570864677429,-0.8323144912719727],[-0.4079180657863617,-0.11905945837497711,-0.905222475528717],[-0.4048710763454437,-0.10387067496776581,-0.9084548354148865],[-0.9269654154777527,-0.3435562551021576,0.15067937970161438],[-0.9208201766014099,-0.29577285051345825,-0.2541823387145996],[-0.9601566791534424,-0.03858241066336632,-0.2767859101295471],[-0.975777804851532,-0.06980238854885101,0.2073289453983307],[0.017434529960155487,-0.09912088513374329,0.9949226379394531],[0.192292720079422,-0.014951392076909542,0.9812236428260803],[0.1922927349805832,-0.014951393008232117,0.9812237024307251],[-0.01032331120222807,-0.11210950464010239,0.993642270565033],[0.9751980304718018,-0.11135800182819366,-0.19128048419952393],[0.9552814364433289,-0.05336516350507736,-0.29084277153015137],[0.7979761958122253,-0.04630596935749054,-0.6009073853492737],[0.8455327749252319,-0.09537559002637863,-0.5253358483314514],[-0.41832828521728516,-0.009852799586951733,-0.908242404460907],[-0.45054566860198975,0.015090747736394405,-0.8926258683204651],[-0.4505457282066345,0.01509074866771698,-0.8926258683204651],[-0.4249478876590729,-0.004779197741299868,-0.9052051901817322],[-0.9693365097045898,0.016211897134780884,-0.24520176649093628],[-0.9765109419822693,0.04683363065123558,-0.21031633019447327],[-0.9765108227729797,0.046833623200654984,-0.21031630039215088],[-0.9990457892417908,-0.007293658331036568,0.043061260133981705],[-0.3569827079772949,-0.42108333110809326,0.8338177800178528],[-0.3664427697658539,-0.2725484073162079,0.8896274566650391],[-0.36669278144836426,-0.26424306631088257,0.892026960849762],[-0.3673076629638672,-0.1461908519268036,0.9185385704040527],[-0.36669278144836426,-0.26424306631088257,0.892026960849762],[-0.3664427697658539,-0.2725484073162079,0.8896274566650391],[-0.4056936502456665,0.8296096324920654,-0.3836149275302887],[-0.24315686523914337,0.8125669956207275,-0.5297257900238037],[-0.2557784914970398,0.9142258763313293,-0.3142741918563843],[-0.42595726251602173,0.8905650973320007,-0.15954336524009705],[-0.7374564409255981,-0.445467084646225,0.5076581835746765],[-0.9089924097061157,-0.16209730505943298,0.3840016722679138],[-0.9473277926445007,-0.29350194334983826,0.12816645205020905],[-0.9269654154777527,-0.3435562551021576,0.15067937970161438],[-0.7374564409255981,-0.445467084646225,0.5076581835746765],[-0.9269654154777527,-0.3435562551021576,0.15067937970161438],[-0.975777804851532,-0.06980238854885101,0.2073289453983307],[-0.8294135928153992,-0.08758260309696198,0.5517268180847168],[0.981040894985199,-0.1073567122220993,0.16134801506996155],[0.9929326176643372,-0.05349728837609291,0.1059369444847107],[0.9552814364433289,-0.05336516350507736,-0.29084277153015137],[0.9751980304718018,-0.11135800182819366,-0.19128048419952393],[0.6430631875991821,-0.5529570579528809,0.5298190712928772],[0.8140770792961121,-0.37448689341545105,0.44388967752456665],[0.9406462907791138,-0.33650943636894226,-0.04411286488175392],[0.7996262311935425,-0.5610377788543701,0.21408973634243011],[0.45072656869888306,-0.7097382545471191,0.5414029955863953],[0.6430631875991821,-0.5529570579528809,0.5298190712928772],[0.7996262311935425,-0.5610377788543701,0.21408973634243011],[0.002940503880381584,-0.9999933838844299,-0.0021192675922065973],[0.0027015653904527426,-0.9999943971633911,-0.00194975221529603],[0.00006992677663220093,-1,-0.0000827307885629125],[0.0033051983918994665,-0.999991774559021,-0.0023780008777976036],[0.003305198159068823,-0.9999916553497314,-0.0023780004121363163],[0.0027015653904527426,-0.9999943971633911,-0.00194975221529603],[0.002940503880381584,-0.9999933838844299,-0.0021192675922065973],[-0.0027710082940757275,-0.9999944567680359,-0.0018955926643684506],[-0.003205943154171109,-0.9999924898147583,-0.002180637326091528],[-0.00000987338262348203,-0.9999999403953552,-0.00008601825538789853],[-0.003205943154171109,-0.9999924898147583,-0.002180637326091528],[-0.0027710082940757275,-0.9999944567680359,-0.0018955926643684506],[-0.003571542212739587,-0.999990701675415,-0.0024202410131692886],[-0.003571541979908943,-0.9999906420707703,-0.0024202410131692886],[0.10659994184970856,0.22384177148342133,-0.9687782526016235],[0.024921411648392677,0.016289647668600082,-0.9995567202568054],[-0.7404559850692749,0.273591011762619,-0.6138997673988342],[-0.702672004699707,0.40140748023986816,-0.5874725580215454],[0.35547885298728943,0.776340663433075,0.5205093026161194],[0.35547885298728943,0.7763406038284302,0.5205092430114746],[0.5515531897544861,0.7534278631210327,0.3579602837562561],[0.6331616640090942,0.7248905301094055,0.27136680483818054],[0.5515531897544861,0.7534278631210327,0.3579602837562561],[0.7814196944236755,0.2204984575510025,-0.583749532699585],[0.8275907635688782,0.36162346601486206,-0.42932745814323425],[0.6331616640090942,0.7248905301094055,0.27136680483818054],[0.8275907635688782,0.36162346601486206,-0.42932745814323425],[0.7814196944236755,0.2204984575510025,-0.583749532699585],[0.024921411648392677,0.016289647668600082,-0.9995567202568054],[0.10659994184970856,0.22384177148342133,-0.9687782526016235],[-0.5469435453414917,-0.15651975572109222,0.8224075436592102],[-0.5469436049461365,-0.15651977062225342,0.822407603263855],[-0.5469436049461365,-0.15651977062225342,0.822407603263855],[-0.5469436049461365,-0.15651975572109222,0.822407603263855],[0.024921411648392677,0.016289647668600082,-0.9995567202568054],[0.014822925440967083,-0.09616053104400635,-0.9952554702758789],[-0.5146061778068542,-0.10557375848293304,-0.8509023189544678],[-0.7404559850692749,0.273591011762619,-0.6138997673988342],[0.5432253479957581,-0.2052222639322281,0.8141191601753235],[0.5432253479957581,-0.2052222341299057,0.8141191005706787],[0.5432254076004028,-0.2052222490310669,0.8141191601753235],[0.5432254076004028,-0.2052222341299057,0.8141191005706787],[0.9766983985900879,0.013071822933852673,-0.21421776711940765],[0.9766983985900879,0.013071823865175247,-0.21421778202056885],[0.9766984581947327,0.013071823865175247,-0.21421779692173004],[0.9766984581947327,0.013071822933852673,-0.21421779692173004],[0.7814196944236755,0.2204984575510025,-0.583749532699585],[0.584661066532135,-0.05284975841641426,-0.8095544576644897],[0.014822925440967083,-0.09616053104400635,-0.9952554702758789],[0.024921411648392677,0.016289647668600082,-0.9995567202568054],[-0.9812504649162292,-0.06350800395011902,-0.1819731593132019],[-0.9812504649162292,-0.06350800395011902,-0.1819731742143631],[-0.9812504649162292,-0.06350800395011902,-0.1819731444120407],[-0.981250524520874,-0.06350801140069962,-0.1819731742143631],[-0.7404559850692749,0.273591011762619,-0.6138997673988342],[-0.8199886679649353,0.5490710735321045,-0.1616777777671814],[-0.8199886083602905,0.5490710139274597,-0.1616777628660202],[-0.702672004699707,0.40140748023986816,-0.5874725580215454],[-0.08212380856275558,-0.9820094108581543,-0.17003856599330902],[-0.4672388732433319,-0.8609240055084229,-0.20123977959156036],[-0.5241155624389648,-0.8468071222305298,-0.09066712856292725],[-0.1164323017001152,-0.9908350110054016,-0.06847979128360748],[-0.9602015614509583,-0.24244357645511627,-0.13868680596351624],[-0.927798330783844,-0.3665548264980316,-0.06948138028383255],[-0.5241155624389648,-0.8468071222305298,-0.09066712856292725],[-0.4672388732433319,-0.8609240055084229,-0.20123977959156036],[-0.975777804851532,-0.06980238854885101,0.2073289453983307],[-0.9601566791534424,-0.03858241066336632,-0.2767859101295471],[-0.9693365097045898,0.016211897134780884,-0.24520176649093628],[-0.9990457892417908,-0.007293658331036568,0.043061260133981705],[-0.4079180657863617,-0.11905945837497711,-0.905222475528717],[-0.41832828521728516,-0.009852799586951733,-0.908242404460907],[-0.4249478876590729,-0.004779197741299868,-0.9052051901817322],[-0.4048710763454437,-0.10387067496776581,-0.9084548354148865],[0.9406462907791138,-0.33650943636894226,-0.04411286488175392],[0.9751980304718018,-0.11135800182819366,-0.19128048419952393],[0.8455327749252319,-0.09537559002637863,-0.5253358483314514],[0.8721233010292053,-0.2860887944698334,-0.396930992603302],[0.8140770792961121,-0.37448689341545105,0.44388967752456665],[0.981040894985199,-0.1073567122220993,0.16134801506996155],[0.9751980304718018,-0.11135800182819366,-0.19128048419952393],[0.9406462907791138,-0.33650943636894226,-0.04411286488175392],[-0.25170090794563293,-0.22472083568572998,0.9413539171218872],[0.017434529960155487,-0.09912088513374329,0.9949226379394531],[-0.01032331120222807,-0.11210950464010239,0.993642270565033],[-0.26237815618515015,-0.23019830882549286,0.9371053576469421],[-0.975777804851532,-0.06980238854885101,0.2073289453983307],[-0.9990457892417908,-0.007293658331036568,0.043061260133981705],[-0.7721172571182251,-0.06749111413955688,0.6318860650062561],[-0.8294135928153992,-0.08758260309696198,0.5517268180847168],[-0.04987340047955513,-0.5272462964057922,0.8482475280761719],[-0.05676192045211792,-0.4981537163257599,0.8652287721633911],[-0.07380927354097366,-0.42228904366493225,0.9034512639045715],[-0.07380927354097366,-0.42228904366493225,0.9034512042999268],[-0.15191736817359924,-0.44608259201049805,0.8820042610168457],[-0.06973143666982651,-0.5524761080741882,0.8306068181991577],[-0.05676192045211792,-0.4981537163257599,0.8652287721633911],[-0.04987340047955513,-0.5272462964057922,0.8482475280761719],[-0.3823562264442444,0.7435925006866455,-0.5485195517539978],[-0.37371256947517395,0.7407341003417969,-0.5582579374313354],[-0.36483970284461975,0.7376870512962341,-0.5680755376815796],[-0.382356196641922,0.7435925602912903,-0.5485196113586426],[-0.8538330793380737,0.20588931441307068,0.47809889912605286],[-0.952582061290741,0.091758131980896,0.2901168465614319],[-0.9451659917831421,0.2027226686477661,-0.2560560405254364],[-0.9093189835548401,0.4027748107910156,0.1044585332274437],[-0.12615735828876495,-0.3186514675617218,0.9394389390945435],[-0.12615734338760376,-0.3186514675617218,0.9394389390945435],[-0.12615735828876495,-0.3186514973640442,0.9394389390945435],[-0.12615734338760376,-0.3186514675617218,0.9394388794898987],[-0.7794650793075562,0.1058986485004425,0.617429792881012],[-0.8184667229652405,0.018256813287734985,0.5742636919021606],[-0.952582061290741,0.091758131980896,0.2901168465614319],[-0.8538330793380737,0.20588931441307068,0.47809889912605286],[-0.37371256947517395,0.7407341003417969,-0.5582579374313354],[-0.3530687987804413,0.7334728837013245,-0.5808269381523132],[-0.35306885838508606,0.7334729433059692,-0.580826997756958],[-0.36483970284461975,0.7376870512962341,-0.5680755376815796],[-0.952582061290741,0.091758131980896,0.2901168465614319],[-0.9957332015037537,-0.09205184876918793,-0.006468675099313259],[-0.9985544085502625,0.053307000547647476,0.006882904563099146],[-0.9451659917831421,0.2027226686477661,-0.2560560405254364],[-0.2771816551685333,-0.5325545072555542,0.7997224926948547],[-0.3361224830150604,-0.726291835308075,0.5996015071868896],[-0.3422775864601135,-0.7490001320838928,0.5673136711120605],[-0.2771816551685333,-0.5325545072555542,0.7997224926948547],[-0.8184667229652405,0.018256813287734985,0.5742636919021606],[-0.9033880233764648,-0.30862173438072205,0.2977290153503418],[-0.9957332015037537,-0.09205184876918793,-0.006468675099313259],[-0.952582061290741,0.091758131980896,0.2901168465614319],[-0.9957332015037537,-0.09205184876918793,-0.006468675099313259],[-0.9655999541282654,-0.2024228423833847,0.16322247684001923],[-0.9866953492164612,0.01157301478087902,0.16216762363910675],[-0.9985544085502625,0.053307000547647476,0.006882904563099146],[-0.3361224830150604,-0.726291835308075,0.5996015071868896],[-0.40485987067222595,-0.873597264289856,0.2700302004814148],[-0.4063848555088043,-0.8713362812995911,0.27499908208847046],[-0.3422775864601135,-0.7490001320838928,0.5673136711120605],[-0.9033880233764648,-0.30862173438072205,0.2977290153503418],[-0.9148621559143066,-0.37137898802757263,0.15844525396823883],[-0.9655999541282654,-0.2024228423833847,0.16322247684001923],[-0.9957332015037537,-0.09205184876918793,-0.006468675099313259],[-0.33072471618652344,0.7130166292190552,0.6182462573051453],[-0.33072471618652344,0.7130166888237,0.61824631690979],[-0.33072471618652344,0.7130166888237,0.6182462573051453],[-0.33072471618652344,0.7130166888237,0.6182462573051453],[-0.7358707785606384,0.20594705641269684,0.6450425386428833],[-0.7616881728172302,0.14306820929050446,0.6319513916969299],[-0.6089897155761719,0.4303660988807678,0.66627037525177],[-0.6089898347854614,0.4303662180900574,0.6662704348564148],[-0.40485987067222595,-0.873597264289856,0.2700302004814148],[-0.4520634412765503,-0.7724806070327759,0.4459960162639618],[-0.4520634114742279,-0.7724805474281311,0.4459960460662842],[-0.4063848555088043,-0.8713362812995911,0.27499908208847046],[-0.8172847032546997,-0.05075358599424362,0.5739944577217102],[-0.8172847628593445,-0.05075358971953392,0.5739944577217102],[-0.7616881728172302,0.14306820929050446,0.6319513916969299],[-0.7358707785606384,0.20594705641269684,0.6450425386428833],[-0.5218523144721985,0.12872415781021118,0.843267560005188],[-0.4824405908584595,0.4865904748439789,0.7283408641815186],[-0.4746325612068176,0.5189173817634583,0.7109490036964417],[-0.5218522548675537,0.12872417271137238,0.8432676196098328],[-0.0833234190940857,0.9758344888687134,0.20200049877166748],[-0.0833234190940857,0.9758344888687134,0.20200049877166748],[-0.08332342654466629,0.9758344888687134,0.20200051367282867],[-0.08332342654466629,0.9758344888687134,0.20200049877166748],[-0.4056936502456665,0.8296096324920654,-0.3836149275302887],[-0.42595726251602173,0.8905650973320007,-0.15954336524009705],[-0.7619723081588745,0.6466788649559021,0.03470776230096817],[-0.7022985219955444,0.7114459872245789,0.024928009137511253],[-0.7165502309799194,0.5546915531158447,-0.4229336977005005],[-0.6365807056427002,0.5654520392417908,-0.5244320034980774],[-0.8085176348686218,0.5237716436386108,-0.2682582139968872],[-0.8085176348686218,0.5237715840339661,-0.2682582139968872],[-0.5550318956375122,0.5669994950294495,-0.6086469292640686],[-0.555031955242157,0.5669995546340942,-0.6086468696594238],[-0.6365807056427002,0.5654520392417908,-0.5244320034980774],[-0.7165502309799194,0.5546915531158447,-0.4229336977005005],[-0.48476293683052063,0.7562461495399475,0.4394277036190033],[-0.484762966632843,0.7562462687492371,0.4394277036190033],[-0.48476290702819824,0.7562460899353027,0.43942761421203613],[-0.48476290702819824,0.7562460899353027,0.43942761421203613],[-0.2713889181613922,0.7295088171958923,0.6278254389762878],[-0.2713889181613922,0.7295088768005371,0.6278254389762878],[-0.2713888883590698,0.7295088768005371,0.6278254389762878],[-0.9646292328834534,-0.18377573788166046,0.18898944556713104],[-0.9646292328834534,-0.18377572298049927,0.18898946046829224],[-0.9646291136741638,-0.18377570807933807,0.18898943066596985],[-0.9646292328834534,-0.18377573788166046,0.18898946046829224],[-0.10347545146942139,0.23581929504871368,-0.966272234916687],[-0.12586091458797455,0.3021451234817505,-0.9449166059494019],[-0.12141623347997665,0.28894558548927307,-0.9496148228645325],[-0.10347545146942139,0.23581930994987488,-0.966272234916687],[0.5906820893287659,0.791027843952179,0.15927840769290924],[0.5870707631111145,0.7962804436683655,0.14589446783065796],[0.5851361155509949,0.7989506125450134,0.1389012187719345],[0.5906820297241211,0.791027843952179,0.15927839279174805],[0.015503320842981339,0.08264702558517456,0.9964582324028015],[-0.0007061606738716364,0.07823371142148972,0.9969347715377808],[-0.007696251384913921,0.07632371783256531,0.9970533847808838],[0.015503320842981339,0.08264703303575516,0.9964582324028015],[-0.9076508283615112,-0.3570781648159027,0.22060135006904602],[-0.907650887966156,-0.3570781648159027,0.2206013798713684],[-0.907650887966156,-0.3570782244205475,0.2206013947725296],[-0.9076509475708008,-0.3570781648159027,0.2206013798713684],[-0.12586091458797455,0.3021451234817505,-0.9449166059494019],[-0.21108824014663696,0.5587577223777771,-0.8020172119140625],[-0.21108822524547577,0.5587576627731323,-0.8020172119140625],[-0.12141623347997665,0.28894558548927307,-0.9496148228645325],[0.5870707631111145,0.7962804436683655,0.14589446783065796],[0.5699755549430847,0.816970944404602,0.08767196536064148],[0.5699754953384399,0.816970944404602,0.08767195791006088],[0.5851361155509949,0.7989506125450134,0.1389012187719345],[-0.0007061606738716364,0.07823371142148972,0.9969347715377808],[-0.10919831693172455,0.04812295362353325,0.9928544759750366],[-0.10919830948114395,0.04812295362353325,0.9928543567657471],[-0.007696251384913921,0.07632371783256531,0.9970533847808838],[-0.8077946901321411,-0.550134539604187,0.21170684695243835],[-0.7513380646705627,-0.646805465221405,-0.13089564442634583],[-0.8316102027893066,-0.4946551024913788,-0.25246918201446533],[0.7430096864700317,0.0557236447930336,0.6669567823410034],[0.7430096864700317,0.055723633617162704,0.6669567227363586],[0.7430097460746765,0.0557236522436142,0.6669568419456482],[0.7430096864700317,0.0557236447930336,0.6669568419456482],[-0.4017104208469391,0.8051612377166748,0.436284601688385],[-0.4017103314399719,0.80516117811203,0.4362845718860626],[-0.4017103910446167,0.80516117811203,0.4362845718860626],[-0.4017103612422943,0.80516117811203,0.436284601688385],[-0.722770631313324,0.05587755888700485,0.688825249671936],[-0.7227705717086792,0.055877555161714554,0.688825249671936],[-0.7227705717086792,0.05587755888700485,0.688825249671936],[-0.7227706909179688,0.05587756633758545,0.6888251900672913],[0.41099199652671814,0.8038304448127747,0.43004918098449707],[0.41099199652671814,0.8038303256034851,0.43004921078681946],[0.41099199652671814,0.8038303852081299,0.43004921078681946],[0.4109920263290405,0.8038303852081299,0.43004924058914185],[0.47810599207878113,-0.8609418272972107,-0.17376361787319183],[0.11485107243061066,-0.9807531833648682,-0.15790025889873505],[0.1343700885772705,-0.9893593192100525,-0.05579141527414322],[0.5313248038291931,-0.8438926935195923,-0.07442483305931091],[0.9485647082328796,-0.2816155254840851,-0.14462943375110626],[0.47810599207878113,-0.8609418272972107,-0.17376361787319183],[0.5313248038291931,-0.8438926935195923,-0.07442483305931091],[0.925125002861023,-0.375169962644577,-0.058234188705682755],[-0.8023288249969482,-0.39257118105888367,-0.4496179223060608],[-0.16912665963172913,-0.595000147819519,-0.7857295274734497],[-0.015343433246016502,-0.6270102262496948,-0.7788599729537964],[-0.015343430452048779,-0.6270101070404053,-0.7788599133491516],[-0.9602015614509583,-0.24244357645511627,-0.13868680596351624],[-0.16912665963172913,-0.595000147819519,-0.7857295274734497],[-0.8023288249969482,-0.39257118105888367,-0.4496179223060608],[0.01625058241188526,-0.6071835160255432,-0.7943953275680542],[0.2705770432949066,-0.6124230623245239,-0.7427825927734375],[0.7406501770019531,-0.43752405047416687,-0.5099119544029236],[0.01625058427453041,-0.6071835160255432,-0.7943953275680542],[-0.40848779678344727,-0.621504008769989,-0.6684836149215698],[-0.42732101678848267,-0.3530570864677429,-0.8323144912719727],[-0.42734047770500183,-0.3831574618816376,-0.8188837766647339]],"edges":[7,1,0,3,5,4,2,8,10,14,21,23,31,27,36,34,33,32,37,38,46,82,84,44,45,53,49,51,52,57,209,60,1481,59,64,67,492,74,71,80,76,79,88,83,96,86,95,91,98,94,99,101,106,102,107,109,110,115,117,122,118,123,125,130,126,131,133,138,134,139,141,145,142,495,17,494,150,151,160,155,158,159,168,163,166,167,170,171,174,175,178,179,182,183,186,187,190,137,129,105,93,85,193,194,199,220,207,1303,603,602,113,114,121,58,208,205,212,352,211,219,218,223,222,227,48,198,228,235,225,221,239,237,238,247,246,251,249,250,254,259,257,258,263,267,266,271,269,270,274,279,277,278,282,283,287,286,290,291,293,294,298,215,241,301,303,300,305,307,304,243,315,242,311,308,319,262,289,318,330,288,335,336,340,344,349,55,24,20,75,154,213,356,361,87,162,364,601,393,405,383,385,384,389,392,400,395,398,399,403,408,406,28,29,30,410,412,39,40,41,327,418,372,373,422,376,377,426,380,381,436,391,394,325,414,42,413,388,514,454,1460,458,448,449,452,455,457,470,459,474,462,478,482,471,473,475,476,479,480,484,487,210,332,18,16,19,69,65,15,204,11,62,496,451,598,466,483,506,504,477,508,587,512,515,516,517,521,518,520,523,524,525,526,530,531,532,472,538,539,540,543,544,547,549,550,552,554,556,536,562,567,535,576,578,467,583,463,461,460,591,510,595,456,501,202,201,499,609,611,610,615,614,617,619,618,622,625,627,626,631,630,633,635,634,638,675,652,643,642,645,647,646,650,653,655,146,147,659,148,149,661,663,368,666,370,671,369,673,676,683,687,693,63,613,629,641,657,696,698,697,700,701,704,705,709,712,714,688,716,689,720,690,691,731,729,730,727,733,734,728,738,736,740,749,747,761,751,764,758,759,760,763,762,770,806,812,772,771,779,775,781,780,783,939,788,1301,789,792,797,1222,798,801,808,804,809,816,813,824,810,825,821,822,818,829,827,830,826,837,835,834,845,843,846,842,853,851,854,850,861,859,862,858,869,867,1219,745,880,886,888,894,896,900,904,908,912,916,915,919,923,950,933,1332,838,782,935,936,1082,937,943,944,947,948,776,926,958,959,953,949,963,965,964,971,972,975,977,976,980,983,985,984,987,991,992,995,997,996,1000,1003,1005,1004,1008,1007,1011,1012,1016,1015,1021,1020,1024,969,1027,1030,1031,1034,967,1039,968,1035,1038,1043,988,1017,1044,1056,1018,1059,1066,1070,1074,785,754,750,805,884,942,1086,817,892,1094,1334,1117,1135,1111,1109,1110,1113,1118,1124,1122,1126,1125,1129,1132,1134,757,756,755,1138,1136,769,768,767,1051,1146,1099,1098,1150,1102,1101,1154,1106,1105,1160,1119,1123,1053,1142,766,1143,1114,1239,1184,1176,1175,1177,1189,1178,1183,1181,1200,1187,1204,1192,1208,1212,1199,1197,1203,1202,1207,1206,1210,1214,938,1062,746,743,795,791,739,928,735,786,1226,1179,1329,1196,1211,1232,1234,1201,1238,1316,1244,1243,1242,1245,1248,1246,1250,1249,1255,1254,1258,1257,1256,1198,1262,1261,1260,1265,1264,1269,1275,1274,1272,1278,1276,1295,1282,1285,1297,1311,1309,1195,1312,1191,1185,1186,1320,1236,1324,1182,1229,930,931,1223,1340,1341,1344,1345,1350,1349,1353,1356,1357,1360,1361,1366,1365,1369,1404,1387,1372,1373,1378,1377,1381,1384,876,1388,874,873,1394,1097,1397,1096,1411,1412,1416,1425,793,1346,1362,1374,1390,1429,1427,1428,1433,1432,1437,1436,1440,1445,1443,1423,1449,1422,1453,1421,1420,1174,1466,1462,574,1478,575,1486,1300,1307,447,1489],"indices":[3,2,1,-5,0,5,4,-2,144,0,1,-144,143,1,2,-143,141,21,41,-141,101,102,3,-5,100,101,4,-6,116,117,-119,6,7,10,-10,10,7,8,-12,120,121,119,-126,9,10,14,-14,10,11,71,-15,8,16,15,-12,65,100,5,-18,145,18,0,-145,142,194,19,-144,2,21,141,-143,22,21,2,-4,102,103,22,-4,12,23,6,-10,25,13,58,-58,13,105,12,-10,27,25,57,-57,26,24,25,-28,28,26,27,-30,29,27,56,-56,30,28,29,-32,31,29,55,-65,32,30,31,-34,33,31,64,-55,34,32,33,-36,35,33,54,-54,36,34,35,-38,37,35,53,-53,38,36,37,-40,39,37,-53,188,187,189,-191,22,42,41,-22,103,104,42,-23,12,44,43,-24,105,106,44,-13,26,46,45,-25,28,47,46,-27,30,48,47,-29,32,49,48,-31,34,50,49,-33,36,51,50,-35,38,51,-37,14,59,58,-14,14,71,72,-60,107,171,145,-145,66,65,17,-62,16,139,68,-68,94,65,-67,15,16,67,-70,60,73,74,-71,72,71,73,-61,15,73,71,-12,74,73,15,-70,67,68,76,-76,76,68,95,-97,69,67,75,-78,70,74,79,-79,74,69,77,-80,75,76,81,-81,81,76,96,-83,77,75,80,-84,78,79,85,-85,79,77,83,-86,80,81,87,-87,87,81,82,-89,83,80,86,-90,99,98,84,-91,84,85,91,-91,85,83,89,-92,93,92,60,-71,95,94,92,-94,97,93,70,-79,96,95,93,-98,82,96,97,-99,98,97,78,-85,120,125,116,-119,82,98,99,-89,100,139,16,-9,7,101,100,-9,6,102,101,-8,23,103,102,-7,23,43,104,-104,68,65,94,-96,24,105,13,-26,24,45,106,-106,19,107,144,-144,192,191,-194,118,117,-123,120,118,122,-124,121,120,123,-125,91,89,111,-113,111,89,86,-127,87,88,113,-111,88,114,-114,99,90,115,-115,90,91,112,-116,109,110,117,-117,112,111,119,-122,125,126,109,-117,110,113,122,-118,113,114,123,-123,114,115,124,-124,115,112,121,-125,86,87,110,-110,88,99,-115,111,126,125,-120,126,86,-110,129,18,-131,18,145,146,-131,128,127,169,-171,151,129,167,-169,130,166,167,-130,146,165,166,-131,132,131,135,-137,150,133,137,-150,133,134,138,-138,134,147,148,-139,68,139,-66,100,65,-140,20,141,140,-41,128,146,145,-172,128,170,165,-147,131,150,149,-136,127,151,168,-170,63,151,-128,152,153,-155,156,152,154,-156,154,153,-158,157,158,155,-155,137,138,159,-161,159,138,148,-165,136,135,161,-163,161,135,149,-164,149,137,160,-164,164,162,153,-153,160,159,156,-156,159,164,152,-157,162,161,157,-154,157,161,163,-159,163,160,155,-159,0,18,-368,165,147,134,-167,167,166,134,-134,168,167,133,-151,169,168,150,-132,170,169,131,-133,165,170,132,-148,171,107,108,-64,128,171,63,-128,20,40,172,-174,19,194,195,-175,108,107,175,-177,107,19,174,-176,173,172,177,-179,174,195,196,-180,176,175,180,-182,175,174,179,-181,179,196,197,-185,181,180,185,-187,180,179,184,-186,183,182,187,-189,184,197,188,-191,186,185,191,-193,185,184,190,-192,193,191,190,-190,178,177,182,-184,20,194,142,-142,195,194,20,-174,196,195,173,-179,203,202,204,-206,188,197,-184,197,196,198,-200,196,178,200,-199,178,183,201,-201,183,197,199,-202,199,198,202,-204,198,200,204,-203,200,201,205,-205,201,199,203,-206,209,210,207,-209,206,207,210,-212,316,315,207,-207,315,314,208,-208,313,140,41,-228,277,210,209,-279,276,211,210,-278,289,291,-291,212,215,216,-214,216,217,214,-214,293,298,292,-295,215,219,220,-217,216,220,250,-218,214,217,221,-223,245,223,211,-277,317,316,206,-225,314,315,225,-356,208,314,313,-228,228,209,208,-228,278,209,228,-280,218,215,212,-230,231,57,58,-220,219,215,218,-281,233,56,57,-232,232,233,231,-231,234,235,233,-233,235,55,56,-234,236,237,235,-235,237,64,55,-236,238,239,237,-237,239,54,64,-238,240,241,239,-239,241,53,54,-240,242,243,241,-241,243,52,53,-242,38,39,243,-243,39,52,-244,352,353,189,-188,228,227,41,-43,279,228,42,-105,218,229,43,-45,280,218,44,-107,232,230,45,-47,234,232,46,-48,236,234,47,-49,238,236,48,-50,240,238,49,-51,242,240,50,-245,38,242,-245,220,219,58,-60,220,59,72,-251,281,316,317,-343,66,61,223,-246,222,246,247,-313,94,66,-246,221,248,246,-223,60,249,252,-252,72,60,251,-251,221,217,250,-252,252,248,221,-252,246,253,254,-248,254,272,271,-248,248,255,253,-247,249,256,257,-253,252,257,255,-249,253,258,259,-255,259,260,272,-255,255,261,258,-254,256,262,263,-258,257,263,261,-256,258,264,265,-260,265,266,260,-260,261,267,264,-259,275,268,262,-275,262,268,269,-264,263,269,267,-262,270,249,60,-93,271,270,92,-95,273,256,249,-271,272,273,270,-272,260,274,273,-273,274,262,256,-274,293,291,289,-299,260,266,275,-275,276,214,222,-313,213,214,276,-278,212,213,277,-279,229,212,278,-280,229,279,104,-44,247,271,94,-246,230,231,219,-281,230,280,106,-46,225,315,316,-282,192,193,-355,291,295,-291,293,296,295,-292,294,297,296,-294,269,285,284,-268,284,299,264,-268,265,283,286,-267,266,286,-288,275,287,288,-269,268,288,285,-270,282,289,290,-284,285,294,292,-285,298,289,282,-300,283,290,295,-287,286,295,296,-288,287,296,297,-289,288,297,294,-286,264,282,283,-266,266,287,-276,284,292,298,-300,299,282,-265,62,151,-303,224,303,318,-318,301,341,340,-301,151,339,338,-303,303,302,338,-338,318,303,337,-337,305,309,308,-305,322,321,310,-307,306,310,311,-308,307,311,320,-320,247,245,-313,276,312,-246,226,40,140,-314,301,342,317,-319,301,318,336,-342,304,308,321,-323,300,340,339,-152,63,300,-152,323,325,-325,327,326,325,-324,325,328,-325,328,325,326,-330,310,331,330,-312,309,333,332,-309,332,334,321,-309,321,334,331,-311,335,323,324,-334,331,326,327,-331,333,324,328,-333,328,329,334,-333,334,329,326,-332,330,327,323,-336,330,335,320,-312,62,368,223,-62,206,211,223,-369,336,337,307,-320,338,306,307,-338,339,322,306,-339,340,304,322,-340,341,305,304,-341,336,319,305,-342,342,63,108,-282,301,300,63,-343,226,343,172,-41,225,344,356,-356,108,176,345,-282,281,345,344,-226,343,346,177,-173,344,347,357,-357,176,181,348,-346,345,348,347,-345,347,350,358,-358,181,186,351,-349,348,351,350,-348,349,352,187,-183,350,353,352,-359,186,192,354,-352,351,354,353,-351,193,189,353,-355,346,349,182,-178,226,313,314,-356,356,343,226,-356,357,346,343,-357,364,366,365,-364,352,349,-359,358,360,359,-358,357,359,361,-347,346,361,362,-350,349,362,360,-359,360,364,363,-360,359,363,365,-362,361,365,366,-363,362,366,364,-361,151,62,-130,136,148,147,-133,309,320,335,-334,309,305,319,-321,136,162,164,-149,367,62,61,-18,0,367,17,-6,224,368,62,-303,206,368,-225,62,367,18,-130,224,302,-304],"vertices":[[0.0157338739516657,-0.3731179032440599,-0.32995091819094924],[0.11687308808801855,-0.35310123346158495,-0.30618964469864796],[0.20075006391154804,-0.3372663122765826,-0.35346234278807576],[0.21376653949833713,-0.4586353926753043,-0.3644821931439939],[0.1462680608791268,-0.4789949608683861,-0.31827696717897946],[0.02909283600772916,-0.5189211101896504,-0.3429796328397152],[0.2266313792215815,-0.7336079497801105,-0.39612760920656453],[0.18517119924079262,-0.7556619933046275,-0.3344087141160079],[0.09432772032275161,-0.7898673630747339,-0.29925991060658697],[0.22226867697366093,-0.8420862070617336,-0.4150355298249529],[0.19372548486164387,-0.8609811631868679,-0.3710872863761998],[0.12479181300360287,-0.904793730260175,-0.3345827036261946],[0.24086914945346416,-0.8390654904968264,-0.4509747269824572],[0.20488551963023072,-0.9318172060262624,-0.4513162548461153],[0.18687376572179482,-0.9250028362338856,-0.4340865469444228],[0.04034784009380665,-0.9272736433976296,-0.3350249887126051],[-0.0078003602774770475,-0.8265943526910275,-0.3005164197585371],[-0.04373171759553546,-0.5172659428701358,-0.40378309583825756],[-0.09231542545243976,-0.3607376308873834,-0.38384447209790634],[0.15854741538183958,-0.13278122569164597,-0.34811464995196056],[0.2972139356461112,-0.1430455393723507,-0.44456236529564985],[0.23242065243943788,-0.32572418249098567,-0.41988411557904415],[0.24351925354214898,-0.44110500646333844,-0.42748771832946075],[0.252313553282717,-0.7308192054110468,-0.4513450337412126],[0.2433512022051315,-1.0189215634222721,-0.4529352257357231],[0.20102896114772306,-1.013305564646629,-0.45336631327220467],[0.2353650743605905,-1.1121492655025969,-0.45227552889553296],[0.19898175263022277,-1.1098628719296966,-0.4533390681460935],[0.2293866915720696,-1.2196178468059924,-0.4572879533035819],[0.19466017197241614,-1.2189368533761642,-0.45971414784690423],[0.23087171157634068,-1.3224632753063412,-0.4639676934142127],[0.19624807885840334,-1.325536119290168,-0.4671454917588955],[0.24046647291478918,-1.436182545573114,-0.46933615431146397],[0.2055254743763768,-1.446555466679321,-0.4703311662145881],[0.252759589885161,-1.554674573298902,-0.47019247411768966],[0.22173674930799536,-1.5634024649876934,-0.4699648545095093],[0.2687676611527293,-1.6862270170202698,-0.4779183845814437],[0.24120226749595863,-1.6983844161619797,-0.47879375214034814],[0.26825861566220754,-1.719871773499349,-0.5010424340581925],[0.26020185153787434,-1.7242664776298982,-0.5010424340581925],[0.3197018078010073,-0.1407680582408563,-0.5006491822967628],[0.2552811060983087,-0.3152468200074686,-0.5018674102944807],[0.2670241388944766,-0.43296294716576134,-0.5013808881294625],[0.27804397888709087,-0.7327584075746746,-0.5010438432338127],[0.2644026375247217,-0.8445926343043153,-0.5012655974254291],[0.27245442726315416,-1.02588222161335,-0.5010424340581925],[0.261020220924998,-1.1187079104064535,-0.5010424340581925],[0.2536758717681,-1.2182037947072404,-0.5010424340581925],[0.25622632232590437,-1.3184962025504028,-0.5010424340581925],[0.26545098935332867,-1.4316689536195342,-0.5010424340581925],[0.27729740646980294,-1.5491772136269946,-0.5010424340581925],[0.2911469258821232,-1.6794230519850688,-0.5011391413341425],[0.22696242460328386,-1.6998574976400886,-0.5010424340581925],[0.20443881977633327,-1.5657790607582625,-0.5010424340581925],[0.19011830892563286,-1.4453513336655854,-0.5010424340581925],[0.1802932335199744,-1.2211875971834414,-0.5010424340581925],[0.18347766956084377,-1.1098716600114549,-0.5010424340581925],[0.1854752171257671,-1.0132325240803182,-0.5010280889949845],[0.19111136216430857,-0.9315884257280386,-0.5010019172437798],[0.17386292777236012,-0.9277026012751475,-0.5010465165029092],[0.08906378370924217,-0.9548489029197704,-0.501088208199981],[-0.06665870366583032,-0.5265560049363746,-0.5014962457294326],[-0.078245084759337,-0.3738967988063995,-0.5013970703273921],[-0.01604988185546874,-0.10566638703784598,-0.5011546151739334],[0.18099271508406745,-1.3273355204833734,-0.5010424340581925],[-0.05480312538865528,-0.6709641919909357,-0.3976845816302308],[-0.06256868067170884,-0.6769721620122628,-0.5011454623726946],[-0.11204301087094687,-0.8565196364723835,-0.32028962444107667],[-0.12241249136023896,-0.7232612892861385,-0.3597764448083851],[-0.10270766375722834,-0.9002413380965681,-0.33380131050760065],[-0.08204717371623016,-0.9101598490507312,-0.413349793349582],[0.13048358825780237,-0.9546151482356457,-0.41622589000772553],[0.13346652021647087,-0.958536249375217,-0.5009846822849621],[0.04798418570308527,-0.9756241354622152,-0.3987578468415579],[-0.08720121785454632,-0.9262443600483095,-0.3680969861084156],[-0.21179569784386576,-0.8715243326505318,-0.3265818080735104],[-0.2193511682290395,-0.8426875895905401,-0.35474862571230337],[-0.19416174854460033,-0.909378787557864,-0.3298906555784211],[-0.1924488602128539,-0.932054401327302,-0.39099745248387646],[-0.18823163802592574,-0.9382437395312353,-0.3582642004046108],[-0.2750072921469279,-0.8740381385655331,-0.32588829577249834],[-0.2801507449885968,-0.8540190955864513,-0.3531126330959411],[-0.2821261772628692,-0.8679019848375231,-0.38047982856447427],[-0.2675889697263625,-0.9079510558978845,-0.32710078160922584],[-0.2765896650286004,-0.9321858494747322,-0.3837428909924891],[-0.26883188222351695,-0.9344988974654178,-0.35078252710693714],[-0.4267743033031933,-0.8256152484594821,-0.3125861453487443],[-0.41525332502097906,-0.8035847918147783,-0.3492709045014004],[-0.4280193610042675,-0.8188384767338728,-0.38258437724278593],[-0.4226837621438738,-0.8719605448408216,-0.32197409659336446],[-0.4306821186870878,-0.8817829672406664,-0.38352406982937093],[-0.42711614724762226,-0.8939579425458928,-0.3496974477290955],[0.008775288421379646,-0.8553944303816083,-0.5010269360786841],[-0.09516815286015318,-0.8814535385343818,-0.42935742935838395],[-0.05679333573437484,-0.7560765047364248,-0.5010469728121367],[-0.12058950328722012,-0.7788019867245188,-0.41608177790285594],[-0.2159641088691417,-0.8602680849679791,-0.3862440122234432],[-0.21207272968532798,-0.9019510759839108,-0.3946854725540805],[-0.28562601009646116,-0.9074875674915717,-0.39227286430224995],[-0.4302202987727124,-0.8450427955017354,-0.38708264186980895],[0.047167515897811096,-0.6791209516351804,-0.3398766109147567],[0.1709339679007159,-0.6310600310098489,-0.3169962700755864],[0.231705004121167,-0.604650394463928,-0.3798302877621651],[0.2622930004641656,-0.60038373931711,-0.43731419796280585],[0.28546111989100476,-0.603102427751403,-0.5010424340581925],[0.2409513926336917,-0.934164038387858,-0.4528639521127373],[0.27376094972001586,-0.941379177870981,-0.5010327615914043],[0.049126511972002684,-0.08819054030379636,-0.36489817616495357],[0.018218496802715256,-0.08854790847755756,-0.5010668748125175],[-0.46377085281879393,-0.7895889218239331,-0.2971575278588029],[-0.45636754682566677,-0.7549061146403834,-0.3498977496680369],[-0.45828259990024145,-0.877163130694887,-0.3169331782810771],[-0.4583390565893903,-0.8942146208583772,-0.3520752870961398],[-0.4644544163480042,-0.788427029637139,-0.4077718797159925],[-0.46387807156156546,-0.8406193642926086,-0.40818318888686617],[-0.46217133385071935,-0.8838545917022967,-0.390958071928828],[-0.49951540413434625,-0.7913033024714498,-0.3031468957495216],[-0.49959904053125,-0.7614625625238005,-0.3510575484674311],[-0.49896611178133565,-0.7953574891604771,-0.3519750117670216],[-0.49996629788781516,-0.8805045915173604,-0.31976269188791984],[-0.49952915429558187,-0.8451740156564786,-0.35314405463354825],[-0.49990291025336314,-0.889536542544342,-0.35328441522238424],[-0.49966809009205,-0.7952897131525778,-0.4044108633389465],[-0.49965027767758863,-0.8429828193937563,-0.4015198538864043],[-0.4997033879911181,-0.8820197065563317,-0.3935165022306816],[-0.49965733022978676,-0.8450465262911612,-0.302257786449566],[-0.463179983861855,-0.8383702371607491,-0.29531634182403005],[-0.10272930233589711,-0.16585560664736737,-0.44868022412420827],[-0.13205952520386238,-0.19296169867262497,-0.3831356739235531],[-0.16003569950300478,-0.3415203138292653,-0.43662639584227586],[-0.15760469638664498,-0.30427682750690266,-0.36785071255310703],[-0.30677624915600726,-0.232708306343606,-0.415839509764528],[-0.3094584587603607,-0.23335704917151023,-0.38487470887119096],[-0.30205394026067023,-0.3101054812798075,-0.4024668836921931],[-0.30504232331722175,-0.2984135602987709,-0.37090520312562025],[-0.4234108463680647,-0.24053069398557692,-0.413733981753992],[-0.41847725561324045,-0.22793260570626633,-0.38376743129626667],[-0.42432253212569737,-0.3068465952632886,-0.39068407653542603],[-0.4246738325849899,-0.2931137252003436,-0.3637795093189772],[-0.051220282490342606,-0.6930680519175892,-0.34476092934090247],[0.2719064157497424,-0.20831020782295456,-0.5016535894660049],[0.2511784813265716,-0.21130271547448226,-0.42484384776810785],[0.21959461292622018,-0.21522704996488917,-0.3620583303440626],[0.12108154291979645,-0.2197703431476189,-0.3193187072196598],[0.017971725808816563,-0.23448179927691126,-0.3169183587564141],[-0.08431503770164961,-0.23733875491264045,-0.3216714052112969],[-0.1516474961914186,-0.2578748645795091,-0.3571408700718523],[-0.3083902922945819,-0.26226681207120506,-0.36120380338942204],[-0.4237945736054485,-0.256448086343494,-0.3555723322009665],[-0.42830959569497495,-0.28334042486127,-0.41496676412152544],[-0.3020111190887069,-0.27108235658489127,-0.42389026317256434],[-0.1076786919476086,-0.22509585851325942,-0.501982106565876],[-0.5,-0.21596079261187445,-0.33077423087406194],[-0.49999734926115896,-0.185241741926996,-0.38373594757883583],[-0.4999942979158492,-0.22088300964060242,-0.38520442774998653],[-0.4996264874179352,-0.30819492328832554,-0.3853031796734226],[-0.4999790590012291,-0.2835335968470868,-0.3437950694118182],[-0.4999947817526028,-0.22138880105368064,-0.43861549213281975],[-0.49998963119053463,-0.28295841275069156,-0.42676496596632524],[-0.45393069880587344,-0.28608431685079405,-0.3407934316895016],[-0.45779052172912854,-0.31559875780995467,-0.3845846296300429],[-0.45572155027331196,-0.21269214436302508,-0.4416028595855832],[-0.45459817330568564,-0.17278154777017896,-0.38287177238820835],[-0.4550752739117502,-0.28277373867412203,-0.42454726037207285],[-0.45428692183454705,-0.21439535336887278,-0.3278947765054353],[-0.22387354826437772,-0.258915423203538,-0.3567911707430216],[-0.2216229702699638,-0.3012862681565195,-0.37382199647841524],[-0.22169967944587665,-0.3157089611842667,-0.41712619685761],[-0.22315190995641787,-0.2634123716909581,-0.4379340168093574],[-0.21796864130093413,-0.20472491918490737,-0.4234266659515598],[-0.22136836461827125,-0.22076128227228675,-0.38601531483165097],[-0.02890937411386968,-0.1216716394867371,-0.36486806040364544],[0.3824839467879616,-0.0681177739569852,-0.500636049440301],[0.34634768622400336,-0.07018745011747107,-0.4531830796948856],[0.2012077074144275,-0.07321005280369897,-0.39566503277100007],[0.1407647319441383,-0.061373252833299696,-0.40000969250672597],[0.09443549868393697,-0.05275910876877471,-0.5012453470437112],[0.4385008380433101,0.015364940330685029,-0.49941540699516873],[0.4366655383651865,0.01783509600940625,-0.47237079397524157],[0.30078032161773516,0.011838515259131266,-0.3857192974173338],[0.23099366693734358,0.00789565118124369,-0.4234622742639669],[0.2013940810728465,0.015051305299635609,-0.5011811777894433],[0.42289594075300685,0.09580283300843684,-0.5010181272020051],[0.42208818338913834,0.07572583843360992,-0.46825062931155204],[0.32322392173811354,0.10887145674075316,-0.40441861509030863],[0.25354985399194485,0.11311551988493806,-0.4200373992079185],[0.21850232068882236,0.11390259209410225,-0.5036258164432295],[0.37841357261814845,0.1460189270519252,-0.5011937110923375],[0.3790469777561918,0.12570971156195965,-0.4623441212176466],[0.34349205709118114,0.20098526945822714,-0.5045958380484868],[0.3353287582021377,0.17853677785837951,-0.46196078778581334],[0.28469796618738064,0.18731938779208046,-0.45704552453404257],[0.2517401724012108,0.19016755534605145,-0.504213288989222],[0.2952965586006234,0.20770433830738666,-0.5034788011559114],[0.21990634110934093,-0.14534830696550788,-0.39642938861788357],[0.29191546850380656,-0.06299651931239891,-0.413714757825146],[0.37619599138354365,0.014600252858074758,-0.3898211138513619],[0.3884891912603471,0.08487655292397467,-0.39827697917450383],[0.4472388443167665,0.03054821696267429,-0.3776938097443522],[0.45035853043449303,0.07633196735563008,-0.3874609957340894],[0.46825827775372786,0.03383881468931116,-0.4202576764152431],[0.46514116173538356,0.07918519220193365,-0.4172287521135995],[0.499099304526217,0.06935808558869894,-0.3669188960775318],[0.4976656865095882,0.0721331711231431,-0.3679765748797028],[0.5,0.06954023101910223,-0.36926747983749664],[0.49912202088849766,0.07276230657995475,-0.37004048904318687],[0.014025711286525078,-0.3769411540676397,-0.6762976767373217],[0.1166960414031637,-0.3541797839579317,-0.6952468329421674],[0.1997245942580851,-0.3349985311975949,-0.6496201591473352],[0.2131222736177436,-0.45565539094083046,-0.6375479774540894],[0.14562798177333314,-0.4804601092373136,-0.6833074155359549],[0.02779211700108508,-0.5221509297293871,-0.6575783682510077],[0.22611155589494125,-0.733508234069406,-0.6068996148655231],[0.18478332150017285,-0.7556419714013765,-0.6679505431993294],[0.09560634476535268,-0.7898673838013418,-0.7031108188862343],[0.22231386097892714,-0.8421591854482209,-0.5880210534872538],[0.19315857068180886,-0.8606810004509666,-0.6313146055716296],[0.12489440971280819,-0.9049104210627661,-0.6673919818424863],[0.24086143915531777,-0.839423542648649,-0.5506863856349979],[0.20505381968654335,-0.9317840020003741,-0.5513094948305568],[0.18648895551914713,-0.9240108193256059,-0.5691943915352168],[0.04060605217527735,-0.9273373155371607,-0.666763229827921],[-0.007180800513524488,-0.8276637005734577,-0.7007530843288725],[-0.044430577361390944,-0.5218498187511735,-0.5994006037603241],[-0.09172272737235188,-0.3602500685259711,-0.6433657393945322],[0.15781937255203238,-0.13131382330410718,-0.6561658188313297],[0.2976272242080412,-0.14265525734521217,-0.5587326776406795],[0.23243192771414645,-0.32559754291659293,-0.581638175400213],[0.24393950624434035,-0.4369945159438957,-0.5735269365686133],[0.2523594834458682,-0.7309077702066902,-0.5505988053532309],[0.24335252870803847,-1.018949627249396,-0.5491405123098729],[0.20114420108775977,-1.013432660206396,-0.5487046628352217],[0.2353650743605905,-1.1121492655025969,-0.549809339220852],[0.19898175263022277,-1.1098628719296966,-0.5487457999702915],[0.2293866915720696,-1.2196178468059924,-0.544796914812803],[0.19466017197241614,-1.2189368533761642,-0.5423707202694806],[0.23087171157634068,-1.3224632753063412,-0.5381171747021722],[0.19624807885840334,-1.325536119290168,-0.5349393763574893],[0.24046647291478918,-1.436182545573114,-0.532748713804921],[0.2055254743763768,-1.446555466679321,-0.5317537019017968],[0.252759589885161,-1.554674573298902,-0.5318923939986953],[0.22173674930799536,-1.5634024649876934,-0.5321200136068756],[0.2687676611527293,-1.6862270170202698,-0.5241664835349412],[0.24120226749595863,-1.6983844161619797,-0.5232911159760367],[0.2911469258821232,-1.6794230519850688,-0.5009457267822424],[-0.05484238158405624,-0.672512334879628,-0.6046755980191589],[-0.11204118692944987,-0.858167816334203,-0.6822526591855005],[-0.12278872074720759,-0.7234529275029692,-0.6435124526886958],[-0.10295783391482594,-0.9013768245848719,-0.6674776241864128],[-0.0820468835437193,-0.9101596003314363,-0.5887338726235435],[0.13201420679949805,-0.9545253191169193,-0.5885892009002601],[0.04599861811753991,-0.9755767958897252,-0.6012558942517867],[-0.08862426530113582,-0.9270451947251326,-0.6322341933485318],[-0.21114270606133784,-0.8741242783480497,-0.6765369446991532],[-0.21932345675425013,-0.8432597061489631,-0.6477895851358175],[-0.19589780922400163,-0.9154613008245763,-0.6696728310477678],[-0.19382369756942086,-0.9322362980384101,-0.6112669806002257],[-0.1909037330456141,-0.940904828722118,-0.6376876955180799],[-0.2750377602605707,-0.8769901464251846,-0.6774817463945905],[-0.27972848180543725,-0.8543324404449898,-0.6502125359650004],[-0.2821780559624936,-0.8677616242486872,-0.6211630031847952],[-0.2700695508888676,-0.9143649047188103,-0.6730120223066737],[-0.2784561997048598,-0.933285188758823,-0.6178712447681147],[-0.27270896004786566,-0.9386388715846272,-0.644430807232427],[-0.42572666654255964,-0.8270603075636829,-0.6890976214511677],[-0.4139749285710651,-0.8031217179406238,-0.6534145792592979],[-0.4275875014016409,-0.8185790832357507,-0.6190361734029692],[-0.4247734809342186,-0.8747751767431777,-0.6774742226359154],[-0.4309104740898493,-0.8802124707053322,-0.6177584816577245],[-0.42932257756716596,-0.8942068276537992,-0.6478504177300635],[-0.09504026968928514,-0.8814571864173757,-0.5726744719114608],[-0.12047770396409818,-0.7789066353679084,-0.5859783789152361],[-0.21665867822715762,-0.8602362488982136,-0.6158060559182437],[-0.21216902550572553,-0.90201317290124,-0.6074334493791174],[-0.2855788985166584,-0.9073714570340023,-0.6098593848398407],[-0.43029517364382436,-0.8450573663071035,-0.6150858166563185],[0.047357951971382484,-0.6792039409732931,-0.662085897671771],[0.17010888309262606,-0.6312954749125191,-0.6853874550004009],[0.2292896910470028,-0.6048164767731931,-0.6279650613720673],[0.2614418001300962,-0.5997977877479002,-0.5652052604867992],[0.24063037893022265,-0.9342026727850214,-0.5488849532342162],[0.047794868866341655,-0.08709733609564996,-0.6391417292435102],[-0.46269711089548465,-0.7894318141358975,-0.7047319090715018],[-0.4562206521736839,-0.7544916653884097,-0.6527699817529777],[-0.45818819538281663,-0.8776880113138599,-0.6840246598030355],[-0.4596655154522453,-0.8945779997484353,-0.647003124361587],[-0.4650906221689427,-0.7882718080704241,-0.5939648850203716],[-0.463919252740677,-0.8408684981198102,-0.5938237782736504],[-0.4626553545530033,-0.8834295718802838,-0.6111947172817116],[-0.49956175287782156,-0.7910449867569396,-0.701991851504443],[-0.4994893809065426,-0.7629113316908189,-0.6509875556516588],[-0.4992063691148421,-0.7965032353197015,-0.6498371460056525],[-0.4999477326764771,-0.8804072593665668,-0.6821375850583272],[-0.4994203452714323,-0.8450264007548706,-0.6487087272906495],[-0.4997690715831771,-0.8893797250288173,-0.648749164902702],[-0.49950178254285044,-0.7969555313577374,-0.5970185050753521],[-0.4995649540052589,-0.8423817477640687,-0.6016025156793413],[-0.4996591523900909,-0.8819662319078974,-0.6088373247133806],[-0.4996434631575284,-0.8445155313228518,-0.6999270046436026],[-0.46008564897644105,-0.8361049640013197,-0.7073144236917588],[-0.10073992105449436,-0.17157981904296205,-0.555338224063406],[-0.1309199763004063,-0.19583428217072602,-0.6189802841047122],[-0.1603829738187088,-0.33934092136975347,-0.5731183684916371],[-0.1550045641496558,-0.30652694951594234,-0.635000957149896],[-0.3073782534830513,-0.23318661427458193,-0.5859535225306877],[-0.30983226313420265,-0.23310039158563362,-0.6162887164368828],[-0.30155925830943725,-0.31064435235912646,-0.6003238186936125],[-0.3041533383769137,-0.2944227348501558,-0.6326613687377685],[-0.42350301241183413,-0.24037246706071363,-0.5880192813622765],[-0.4187311461969597,-0.22861152647530247,-0.617957208374464],[-0.42394422489628475,-0.30679386677273945,-0.6121638105616315],[-0.42450341841466954,-0.29365396423578527,-0.6381033676399208],[-0.050511349593037935,-0.6930275313991051,-0.6577023859094986],[0.25107791582494254,-0.2106731033056884,-0.5776820566565604],[0.2192018022529154,-0.21441363423705845,-0.6407266204080451],[0.12002829961172035,-0.21854890341626987,-0.6841317334595516],[0.018076934070619832,-0.23520737564037597,-0.6855676521296596],[-0.08445946070563803,-0.23725284312281097,-0.6836694057432822],[-0.15250342219209378,-0.25917744898086603,-0.6452775202558816],[-0.30830547901497224,-0.26038023476508687,-0.6396968292568307],[-0.42320864794449853,-0.2558019757947956,-0.6466892406112426],[-0.42830960605827895,-0.28334042486127,-0.5871181039948594],[-0.30200867334897236,-0.2710837038144061,-0.5781968019642602],[-0.4999985122181752,-0.21595045003452223,-0.6713120051984457],[-0.49999734926115896,-0.185241741926996,-0.6183489205375491],[-0.4999942979158492,-0.22088300964060242,-0.6168804403663984],[-0.4995978163659697,-0.30772459510139893,-0.6161100012600903],[-0.49998198436762503,-0.2836024506385979,-0.6582798913859809],[-0.4999947817526028,-0.22138880105368064,-0.5634693759835652],[-0.4999928085147582,-0.28288149630869946,-0.5752844441055601],[-0.45392641357968594,-0.286066927226749,-0.661290731722214],[-0.45751414795746775,-0.31472307935193145,-0.6155342989984971],[-0.4557215088200961,-0.21269243453553593,-0.5604824956060879],[-0.4545633785126395,-0.17269791590722067,-0.6192779389210551],[-0.4550770201284675,-0.2827709820352686,-0.5775334054245562],[-0.45481834169831864,-0.21375772000281373,-0.6741556647151941],[-0.22337188144627562,-0.25835456119321565,-0.6445138380237555],[-0.2199321557756524,-0.30128678632171746,-0.6291575149422399],[-0.21785663471173305,-0.31708638936682365,-0.5861226827412289],[-0.22315190995641787,-0.2634123716909581,-0.5641508616703315],[-0.2178508312615154,-0.20608462611769252,-0.578587260167566],[-0.22106061594387116,-0.2214999371253491,-0.6155040174243256],[-0.029719618670688674,-0.122189721778312,-0.6385841005840235],[0.34666016056500926,-0.07014748921740083,-0.5495322503812179],[0.2019645602292438,-0.07246750134834762,-0.6066075769599266],[0.14036450114519805,-0.06075821146987381,-0.6026488155737642],[0.43659929612627335,0.01781901216166004,-0.529588631528358],[0.29904542162837733,0.012538991700404511,-0.6157889979199253],[0.22906095220199474,0.010646362224773553,-0.5769670094099192],[0.4226667873758404,0.07812415568927944,-0.5327075403982874],[0.3214059495042114,0.11018668437294143,-0.5972140813476878],[0.2518522618968436,0.11460327580145468,-0.57895484137738],[0.37855998537649727,0.1268128230886919,-0.538634003033968],[0.3352456859575933,0.1802060159538459,-0.5380595858220658],[0.2827380581424406,0.18843995112268164,-0.5398540903541502],[0.21984714591712073,-0.1446188547263621,-0.6069750804449607],[0.2922245436811136,-0.06272404732467912,-0.5887529100129183],[0.37621986843586774,0.014609579831638908,-0.6122796722999058],[0.3901393608765269,0.08566321060098037,-0.6027022591322865],[0.44725144609438205,0.030569150836673664,-0.6243769020988232],[0.45060832751314794,0.07707485043670814,-0.6142136202684257],[0.4682288459704811,0.03379727856703896,-0.5817703593422244],[0.46533209524754504,0.07914506548900002,-0.5846038006412682],[0.499099304526217,0.06935808558869894,-0.6351659720388532],[0.4976657694160199,0.07213312966992724,-0.6341083243265939],[0.5,0.06954023101910223,-0.6328173882788882],[0.4991221037949293,0.07276230657995475,-0.632044399799806],[-0.07365745736226581,-0.40672151740641727,-0.3965094555042796],[-0.07860183113486058,-0.4044202110391185,-0.6115684698390338]]}')},162:e=>{"use strict";e.exports=JSON.parse('{"demo":{"background-color":"white","box":{"color":"pink","visible":true},"axes":{"z":{"color":"#00f","ticklabel":{"color":"#0f0"},"label":{"color":"#f00"}},"ticklabel":{"color":"black"},"label":{"color":"black"},"x":{"color":"#f00","ticklabel":{"color":"#00f"},"label":{"color":"#0f0"}},"y":{"color":"#0f0","ticklabel":{"color":"#f00"},"label":{"color":"#00f"}},"color":"black","visible":true}},"dark":{"background-color":"black","box":{"visible":true},"axes":{"color":"white","ticklabel":{"color":"white"},"visible":true,"label":{"color":"white"}}},"light":{"background-color":"white","box":{"visible":true},"axes":{"color":"black","ticklabel":{"color":"black"},"visible":true,"label":{"color":"black"}}}}')},88:function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const a=i(n(8651)),s=i(n(366)),r=i(n(687)),o=i(n(8299)),l=i(n(9600)),c=i(n(1228)),d=n(3506),_=n(7439),h=n(6988),m=n(6988),u=n(2981),p=n(8174),f=n(7414),g=n(9697);n(4593);const v=n(162);window.THREE=l;const x=n(9482);n(3641),n(6066),n(7501),n(6166),n(2403),n(8890);const b={"screen-fragment":n(4714).Z,"screen-vertex":n(2772).Z,"volr-fragment":n(3389).Z,"volr-vertex":n(8476).Z,"shadow-fragment":n(5790).Z,"shadow-vertex":n(9306).Z,"box-fragment":n(4633).Z,"box-vertex":n(3897).Z};function y(e,t){return function(){const n=[this].concat([].slice.call(arguments));e.apply(t,n)}}class E{constructor(e,t){this.a=document.createElement("a"),this.a.className="ipyvolume-toolicon",this.a.setAttribute("href","javascript:void(0)"),this.li=document.createElement("li"),this.li.className="fa "+e,this.sub=document.createElement("div"),this.sub.className="ipyvolume-toolicon-dropdown-container",this.a.appendChild(this.li),this.a.appendChild(this.sub),t.appendChild(this.a)}active(e){e?this.li.classList.remove("fa-inactive"):this.li.classList.add("fa-inactive")}}class w{constructor(e,t,n){this.a=document.createElement("a"),this.a.className="ipyvolume-toolicon-dropdown",this.a.setAttribute("href","javascript:void(0)"),this.li=document.createElement("li"),this.li.className="fa "+e,this.span_text=document.createElement("span"),this.span_text.innerText=n,this.a.appendChild(this.li),this.li.appendChild(this.span_text),t.appendChild(this.a)}active(e){e?this.a.classList.remove("ipyvolume-toolicon-inactive"):this.a.classList.add("ipyvolume-toolicon-inactive")}}class S extends a.DOMWidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"FigureModel",_view_name:"FigureView",_model_module:"ipyvolume",_view_module:"ipyvolume",_model_module_version:m.semver_range,_view_module_version:m.semver_range,eye_separation:6.4,stereo:!1,camera_control:"trackball",camera_fov:45,camera_center:[0,0,0],ambient_coefficient:.5,diffuse_coefficient:.8,specular_coefficient:.5,specular_exponent:5,width:500,height:400,pixel_ratio:null,displayscale:1,scatters:null,meshes:null,lights:[],volumes:null,show:"render",scales:{},xlabel:"x",ylabel:"y",zlabel:"z",animation:1e3,animation_exponent:1,style:v.light,render_continuous:!1,selector:"lasso",selection_mode:"replace",mouse_mode:"normal",panorama_mode:"no",capture_fps:null,cube_resolution:512,box_center:[.5,.5,.5],box_size:[1,1,1],popup_debouce:100,slice_x:0,slice_y:0,slice_z:0,_shaders:{}})}}t.FigureModel=S,S.serializers=Object.assign(Object.assign({},a.DOMWidgetModel.serializers),{scatters:{deserialize:a.unpack_models},meshes:{deserialize:a.unpack_models},lights:{deserialize:a.unpack_models},volumes:{deserialize:a.unpack_models},camera:{deserialize:a.unpack_models},scene:{deserialize:a.unpack_models},controls:{deserialize:a.unpack_models},scales:{deserialize:a.unpack_models}});class A extends a.DOMWidgetView{constructor(){super(...arguments),this.control_external=null,this.rootObject=null}readPixel(e,t){return this.readPixelFrom(this.screen_texture,e,t)}readId(e,t){const[n,i,a,s]=this.readPixelFrom(this.id_pass_target,e,t);return n+256*i+256*a*256}readPixelFrom(e,t,n){const i=new Uint8Array(4),a=this.renderer.domElement.clientHeight,s=this.model.get("pixel_ratio")||window.devicePixelRatio;return this.renderer.readRenderTargetPixels(e,t*s,(a-n)*s,1,1,i),i}render(){this.transitions=[],this._update_requested=!1,this.update_counter=0;const e=this.model.get("width"),t=this.model.get("height");this.toolbar_div=document.createElement("div"),this.el.appendChild(this.toolbar_div);const n=this._special_keys_down.bind(this),i=this._special_keys_up.bind(this);document.addEventListener("keydown",n),document.addEventListener("keyup",i),this.once("remove",(()=>{document.removeEventListener("keydown",n),document.removeEventListener("keyup",i)})),this.fullscreen_icon=new E("fa-arrows-alt",this.toolbar_div),this.fullscreen_icon.a.title="Fullscreen",this.fullscreen_icon.a.onclick=()=>{const e=this.renderer.domElement,t=e.style.width,n=e.style.height,i=()=>{o.isFullscreen?(e.style.width="100vw",e.style.height="100vh"):(e.style.width=t,e.style.height=n,o.off("change",i)),this.update_size()};o.onchange(i),o.request(e)},this.stereo_icon=new E("fa-eye",this.toolbar_div),this.stereo_icon.a.title="Stereoscopic view",this.stereo_icon.a.onclick=()=>{this.model.set("stereo",!this.model.get("stereo")),this.model.save_changes()},this.stereo_icon.active(this.model.get("stereo")),this.model.on("change:stereo",(()=>{this.stereo_icon.active(this.model.get("stereo"))})),this.screenshot_icon=new E("fa-picture-o",this.toolbar_div),this.screenshot_icon.a.title="Take a screenshot (hold shift to copy to clipboard)",this.screenshot_icon.a.onclick=e=>{try{const t=this.screenshot();e.shiftKey?h.copy_image_to_clipboard(t):h.download_image(t)}finally{e.preventDefault()}return!1},window.ipvss=()=>this.screenshot(),this.camera_control_icon=new E("fa-arrow-up",this.toolbar_div),this.camera_control_icon.a.title="Camera locked to 'up' axis (orbit), instead of trackball mode",this.camera_control_icon.a.onclick=()=>{"trackball"===this.model.get("camera_control")?(this.model.set("camera_control","orbit"),this.camera_control_icon.active(!0)):(this.model.set("camera_control","trackball"),this.camera_control_icon.active(!1)),this.touch()},this.camera_control_icon.active(!1),this.select_icon=new E("fa-pencil-square-o",this.toolbar_div),this.select_icon.a.title="Select mode (auto when control key is pressed)",this.select_icon.a.onclick=()=>{"select"===this.model.get("mouse_mode")?this.model.set("mouse_mode","normal"):this.model.set("mouse_mode","select"),this.update_icons(),this.touch()},this.select_icon.active(!1),this.select_icon_lasso=new w("fa-vine",this.select_icon.sub,"Lasso selector"),this.select_icon_circle=new w("fa-circle",this.select_icon.sub,"Circle selector"),this.select_icon_rectangle=new w("fa-square",this.select_icon.sub,"Rectangle selector"),this.select_icon_lasso.a.onclick=e=>{e.stopPropagation(),this.model.set("mouse_mode","select"),this.model.set("selector","lasso"),this.touch()},this.select_icon_circle.a.onclick=e=>{e.stopPropagation(),this.model.set("mouse_mode","select"),this.model.set("selector","circle"),this.touch()},this.select_icon_rectangle.a.onclick=e=>{e.stopPropagation(),this.model.set("mouse_mode","select"),this.model.set("selector","rectangle"),this.touch()},this.zoom_icon=new E("fa-search-plus",this.toolbar_div),this.zoom_icon.a.title="Zoom mode (auto when control key is pressed, use scrolling)",this.zoom_icon.a.onclick=()=>{"zoom"===this.model.get("mouse_mode")?this.model.set("mouse_mode","normal"):this.model.set("mouse_mode","zoom"),this.touch()},this.slice_icon=new E("fa-cut",this.toolbar_div),this.slice_icon.a.title="Set slice coordinate by hovering or clicking the edges of the bounding box",this.slice_icon.a.onclick=()=>{"slice"===this.model.get("mouse_mode")?this.model.set("mouse_mode","normal"):this.model.set("mouse_mode","slice"),this.touch()},this.quick_mouse_mode_change=!1,this.quick_mouse_previous_mode=this.model.get("mouse_mode"),this.update_icons(),this.model.on("change:mouse_mode change:selector",this.update_icons,this),this.model.on("change:mouse_mode change:selector",this.update_mouse_mode,this),this.reset_icon=new E("fa-home",this.toolbar_div),this.reset_icon.a.title="Reset view",this.model.get("camera_fov"),this.reset_icon.a.onclick=()=>{this.camera.copy(this.camera_initial),this.camera.ipymodel&&this.camera.ipymodel.syncToModel(!0)},this.setting_icon=new E("fa-cog",this.toolbar_div),this.setting_icon_180=new w("fa-circle",this.setting_icon.sub,"180 degrees"),this.setting_icon_360=new w("fa-circle",this.setting_icon.sub,"360 degrees");const a=(e,t,n)=>{new w("fa-cogs",this.setting_icon.sub,e+" ("+t+"x"+n+")").a.onclick=e=>{this.model.set("width",t),this.model.set("height",n),this.touch()}};a("default",this.model.get("width"),this.model.get("height")),a("small",500,400),a("medium",640,480),a("large",800,600),a("HD 720",1280,720),a("HD",1920,1080),a("2k",2048,1080),a("2k x 2k",2048,2048),a("4k UHD ",3840,2160),a("4k",4096,2160),a("4k x 4k",4096,4096);const s=e=>{new w("fa-compress",this.setting_icon.sub,"Scale canvas (down) by "+e).a.onclick=t=>{this.model.set("displayscale",1/e),this.touch()}};if(s(1),s(2),s(4),s(8),this.setting_icon_180.a.onclick=e=>{e.stopPropagation(),"180"===this.model.get("panorama_mode")?this.model.set("panorama_mode","no"):this.model.set("panorama_mode","180"),this.touch()},this.setting_icon_360.a.onclick=e=>{e.stopPropagation(),"360"===this.model.get("panorama_mode")?this.model.set("panorama_mode","no"):this.model.set("panorama_mode","360"),this.touch()},this.setting_icon_360.active("360"===this.model.get("panorama_mode")),this.setting_icon_180.active("180"===this.model.get("panorama_mode")),this.model.on("change:panorama_mode",(()=>{this.setting_icon_360.active("360"===this.model.get("panorama_mode")),this.setting_icon_180.active("180"===this.model.get("panorama_mode")),this.update_panorama()})),this.el.classList.add("jupyter-widgets"),this.canvas_container=document.createElement("div"),this.canvas_overlay_container=document.createElement("div"),this.canvas_overlay=document.createElement("canvas"),this.canvas_overlay_container.appendChild(this.canvas_overlay),this.canvas_container.appendChild(this.canvas_overlay_container),this.renderer=new l.WebGLRenderer({alpha:!0,antialias:!0}),this.renderer.setPixelRatio(this.model.get("pixel_ratio")||window.devicePixelRatio),this.listenTo(this.model,"change:pixel_ratio",(()=>{this.renderer.setPixelRatio(this.model.get("pixel_ratio")||window.devicePixelRatio),this._update_size()})),this.canvas_renderer_container=document.createElement("div"),this.canvas_renderer_container.appendChild(this.renderer.domElement),this.popup_container=document.createElement("div"),this.popup_container.classList.add("ipyvolume-popup-container"),this.canvas_container.appendChild(this.canvas_renderer_container),this.canvas_container.appendChild(this.canvas_overlay_container),this.canvas_container.appendChild(this.popup_container),this.canvas_overlay_container.style.position="absolute",this.canvas_overlay_container.style.zIndex="2",this.canvas_overlay_container.style.pointerEvents="none",this.canvas_renderer_container.style.position="absolute",this.canvas_renderer_container.style.zIndex="1",this.canvas_container.classList.add("ipyvolume-canvas-container"),this.el.appendChild(this.canvas_container),this.el.setAttribute("tabindex","1"),this.el_mirror=document.createElement("div"),this.el.appendChild(this.el_mirror),this.el_axes=document.createElement("div"),this.el_mirror.appendChild(this.el_axes),this.renderer.domElement.addEventListener("wheel",this.mousewheel.bind(this),!1),this.model.get("camera"))this.camera=this.model.get("camera").obj,this.model.get("camera").on("change",(()=>{if(!this.control_external){const e=new l.Vector3(0,1,0);e.applyQuaternion(this.camera.quaternion),this.camera.up=e,this.camera.lookAt(0,0,0),this.control_trackball.position0=this.camera.position.clone(),this.control_trackball.up0=this.camera.up.clone(),this.update()}}));else{this.camera=new l.PerspectiveCamera(46,1,.01,1e4);const e=2*Math.tan(22.5*Math.PI/180)/Math.tan(this.model.get("camera_fov")/2*Math.PI/180);this.camera.position.z=e}this.camera_initial=this.camera.clone(),this.cube_camera=new l.CubeCamera(this.camera.near,this.camera.far,this.model.get("cube_resolution")),this.camera_stereo=new l.StereoCamera,this.renderer.setSize(e,t),this.renderer_stereo=new l.StereoEffect(this.renderer),this.renderer_selected=this.renderer_stereo;const r=(e,t,n,i,a,s,r)=>{const o=new l.Geometry;return o.vertices.push(new l.Vector3(e,t,n),new l.Vector3(i,a,s)),new l.Line(o,r)},c=(e,t,n,i)=>r(-.5,-.5,-.5,-.5+e,-.5+t,-.5+n,i);this.axes_material=new l.LineBasicMaterial({color:"cyan",linewidth:1}),this.xaxes_material=new l.LineBasicMaterial({color:"red",linewidth:1}),this.yaxes_material=new l.LineBasicMaterial({color:"green",linewidth:1}),this.zaxes_material=new l.LineBasicMaterial({color:"blue",linewidth:1}),this.x_axis=c(1,0,0,this.xaxes_material),this.y_axis=c(0,1,0,this.yaxes_material),this.z_axis=c(0,0,1,this.zaxes_material),this.axes=new l.Object3D,this.axes.add(this.x_axis),this.axes.add(this.y_axis),this.axes.add(this.z_axis),this.wire_box=new l.Object3D,this.wire_box_x_line=r(-.5,-.5,-.5,.5,-.5,-.5,this.axes_material),this.wire_box.add(this.wire_box_x_line),this.wire_box.add(r(-.5,.5,-.5,.5,.5,-.5,this.axes_material)),this.wire_box.add(r(-.5,-.5,.5,.5,-.5,.5,this.axes_material)),this.wire_box.add(r(-.5,.5,.5,.5,.5,.5,this.axes_material)),this.wire_box_y_line=r(-.5,-.5,-.5,-.5,.5,-.5,this.axes_material),this.wire_box.add(this.wire_box_y_line),this.wire_box.add(r(.5,-.5,-.5,.5,.5,-.5,this.axes_material)),this.wire_box.add(r(-.5,-.5,.5,-.5,.5,.5,this.axes_material)),this.wire_box.add(r(.5,-.5,.5,.5,.5,.5,this.axes_material)),this.wire_box_z_line=r(-.5,-.5,-.5,-.5,-.5,.5,this.axes_material),this.wire_box.add(this.wire_box_z_line),this.wire_box.add(r(.5,-.5,-.5,.5,-.5,.5,this.axes_material)),this.wire_box.add(r(-.5,.5,-.5,-.5,.5,.5,this.axes_material)),this.wire_box.add(r(.5,.5,-.5,.5,.5,.5,this.axes_material)),this.axes_data=[{name:"x",label:"x",object:null,object_label:null,translate:[0,-.5,-.5],rotate:[Math.PI/4,0,0],rotation_order:"XYZ",fillStyle:"#00FF00"},{name:"y",label:"y",object:null,object_label:null,translate:[-.5,0,-.5],rotate:[3*Math.PI/4,0,Math.PI/2],rotation_order:"ZXY",fillStyle:"#00FF00"},{name:"z",label:"z",object:null,object_label:null,translate:[-.5,-.5,0],rotate:[-Math.PI/8,-Math.PI/2,0],rotation_order:"YZX",fillStyle:"#00FF00"}],this.ticks=5,this.model.get("scene")?this.scene=this.model.get("scene").obj:this.scene=new l.Scene,this.scene.background=null,this.model.get("scene")&&this.model.get("scene").on("rerender",(()=>this.update())),this.rootObject=new l.Object3D,this.rootObject.name="rootObject",this.scene.add(this.rootObject),this.scene.add(this.camera),this.scene_opaque=new l.Scene,this.scene_opaque.add(this.wire_box),this.scene_opaque.add(this.axes);const d=()=>{const e=new l.Vector3;e.fromArray(this.model.get("box_center")),e.sub(new l.Vector3(.5,.5,.5));const t=new l.Vector3;t.fromArray(this.model.get("box_size")),this.scene_opaque.scale.copy(t),this.scene_opaque.position.copy(e),this.rootObject.scale.copy(t),this.rootObject.position.copy(e),this.update()};this.model.on("change:box_center change:box_size",d),d(),this.front_box_material=new l.ShaderMaterial({uniforms:{offset:{type:"3f",value:[0,0,0]},scale:{type:"3f",value:[1,1,1]}},fragmentShader:b["box-fragment"],vertexShader:b["box-vertex"],side:l.BackSide}),this.front_box_geo=new l.BoxBufferGeometry(1,1,1),this.front_box_mesh=new l.Mesh(this.front_box_geo,this.front_box_material),this.front_box_mesh.name="Front object",this.rootObject.add(this.front_box_mesh),this.mesh_views={},this.scatter_views={},this.volume_views={};let _=e;const m=t;this.model.get("stereo")&&(_/=2),this.volume_back_target=new l.WebGLRenderTarget(_,m,{minFilter:l.LinearFilter,magFilter:l.LinearFilter,type:l.FloatType,format:l.RGBAFormat,generateMipmaps:!1}),this.volume_front_target=new l.WebGLRenderTarget(_,m,{minFilter:l.LinearFilter,magFilter:l.NearestFilter}),this.geometry_depth_target=new l.WebGLRenderTarget(_,m,{minFilter:l.LinearFilter,magFilter:l.LinearFilter,format:l.RGBAFormat,generateMipmaps:!1}),this.geometry_depth_target.depthTexture=new l.DepthTexture(1,1),this.geometry_depth_target.depthTexture.type=l.UnsignedShortType,this.id_pass_target=new l.WebGLRenderTarget(_,m,{minFilter:l.LinearFilter,magFilter:l.NearestFilter}),this.color_pass_target=new l.WebGLRenderTarget(_,m,{minFilter:l.LinearFilter,magFilter:l.LinearFilter}),this.screen_pass_target=new l.WebGLRenderTarget(_,m,{minFilter:l.LinearFilter,magFilter:l.LinearFilter}),this.coordinate_target=new l.WebGLRenderTarget(_,m,{minFilter:l.LinearFilter,magFilter:l.NearestFilter}),this.screen_texture=this.color_pass_target.texture,this.screen_scene=new l.Scene,this.screen_scene_cube=new l.Scene,this.screen_plane=new l.PlaneBufferGeometry(1,1),this.screen_material=new l.ShaderMaterial({uniforms:{tex:{type:"t",value:this.screen_pass_target.texture}},vertexShader:b["screen-vertex"],fragmentShader:b["screen-fragment"],depthWrite:!1}),this.screen_material_cube=new l.ShaderMaterial({uniforms:{tex:{type:"t",value:this.cube_camera.renderTarget.texture}},vertexShader:b["screen-vertex"],fragmentShader:b["screen-fragment"],defines:{},depthWrite:!1}),this.screen_mesh=new l.Mesh(this.screen_plane,this.screen_material),this.screen_mesh_cube=new l.Mesh(this.screen_plane,this.screen_material_cube),this.screen_scene.add(this.screen_mesh),this.screen_scene_cube.add(this.screen_mesh_cube),this.screen_camera=new l.OrthographicCamera(-.5,.5,.5,-.5,-1e4,1e4),this.screen_camera.position.z=10,this.update_panorama(),this.on("change:panorama_mode",this.update_panorama,this),this.renderer.domElement.addEventListener("mousedown",this._mouse_down.bind(this),!1),this.renderer.domElement.addEventListener("mousemove",this._mouse_move.bind(this),!1),this.renderer.domElement.addEventListener("dblclick",this._mouse_dbl_click.bind(this),!1),this.renderer.domElement.addEventListener("contextmenu",(e=>{e.preventDefault(),e.stopPropagation()}),!1),window.addEventListener("mouseup",this._mouse_up.bind(this),!1),this.mouse_inside=!1,this.mouse_trail=[],this.select_overlay=null,this.control_trackball=new l.TrackballControls(this.camera,this.renderer.domElement),this.control_orbit=new l.OrbitControls(this.camera,this.renderer.domElement),this.control_trackball.dynamicDampingFactor=1,this.control_trackball.noPan=!0,this.control_orbit.enablePan=!1,this.control_orbit.dampingFactor=1,this.update_mouse_mode(),this.control_orbit.rotateSpeed=.5,this.control_trackball.rotateSpeed=.5,this.control_trackball.zoomSpeed=3;const u=this.update_angles.bind(this),p=this.update.bind(this);this.control_trackball.addEventListener("end",u),this.control_orbit.addEventListener("end",u),this.control_trackball.addEventListener("change",p),this.control_orbit.addEventListener("change",p);const f=()=>{const e=this.model.get("controls"),t=this.model.previousAttributes.controls;if(t){const e=t.obj;e.removeEventListener("end",u),e.removeEventListener("change",p),e.dispose()}e?(this.control_external=e.obj,this.control_external.addEventListener("end",u),this.control_external.addEventListener("change",p),this.control_external.connectEvents(this.el)):this.control_external=null,this.update_mouse_mode()};f(),this.model.on("change:controls",(()=>{f()})),window.addEventListener("deviceorientation",this.on_orientationchange.bind(this),!1);const g=this.getRenderSize();this.material_multivolume=new l.ShaderMaterial({uniforms:{back_tex:{type:"t",value:this.volume_back_target.texture},geometry_depth_tex:{type:"t",value:this.geometry_depth_target.depthTexture},volumes:{type:"tv",value:[{}]},data:{type:"tv",value:[]},transfer_function:{type:"tv",value:[]},volumes_max_int:{type:"tv",value:[{}]},data_max_int:{type:"tv",value:[]},transfer_function_max_int:{type:"tv",value:[]},ambient_coefficient:{type:"f",value:this.model.get("ambient_coefficient")},diffuse_coefficient:{type:"f",value:this.model.get("diffuse_coefficient")},specular_coefficient:{type:"f",value:this.model.get("specular_coefficient")},specular_exponent:{type:"f",value:this.model.get("specular_exponent")},brightness:{type:"f",value:2},render_size:{type:"2f",value:g},steps:{type:"f",value:10}},blending:l.CustomBlending,blendSrc:l.OneFactor,blendDst:l.OneMinusSrcAlphaFactor,blendEquation:l.AddEquation,transparent:!0,defines:{},side:l.FrontSide}),this.material_multivolume.uniforms=Object.assign(Object.assign({},l.UniformsUtils.merge([l.UniformsLib.common,l.UniformsLib.specularmap,l.UniformsLib.envmap,l.UniformsLib.aomap,l.UniformsLib.lightmap,l.UniformsLib.emissivemap,l.UniformsLib.bumpmap,l.UniformsLib.normalmap,l.UniformsLib.displacementmap,l.UniformsLib.gradientmap,l.UniformsLib.fog,l.UniformsLib.lights,{emissive:{value:new l.Color(0)},specular:{value:new l.Color(1118481)},shininess:{value:30}}])),this.material_multivolume.uniforms),this.material_multivolume_depth=new l.ShaderMaterial({uniforms:this.material_multivolume.uniforms,blending:l.NoBlending,defines:{COORDINATE:!0},side:l.FrontSide}),this.model.on("change:scatters",this.update_scatters,this),this.update_scatters(),this.model.on("change:meshes",this.update_meshes,this),this.update_meshes(),this.model.on("change:volumes",this.update_volumes,this),this.update_volumes(),this.model.on("change:lights",this.update_lights,this),this.update_lights(),this.update_size(),this.el.addEventListener("change",this.update.bind(this));const v=()=>{this.model.set("matrix_world",this._get_view_matrix().elements.slice()),this.touch()};if(this.model.on("change:xlim change:ylim change:zlim",(()=>{v()})),this.model.get("camera")){this.model.get("camera").on("change:matrixWorld",(()=>{v()})),v();const e=()=>{this.model.set("matrix_projection",this.camera.projectionMatrix.elements.slice())};e(),this.model.get("camera").on("change:projectionMatrix",(()=>{e()})),e()}this.model.on("change:camera_control",this.update_mouse_mode,this),this.model.on("change:xlabel change:ylabel change:zlabel",this.update,this),this.model.on("change:render_continuous",this.update,this),this.model.on("change:style",this.update,this);const x=this.model.get("scales");for(const e of["x","y","z"])x[e].on("change",this.update,this);this.model.on("change:xlim change:ylim change:zlim ",this.update,this),this.model.on("change:stereo",this.update_size,this),this.model.on("change:eye_separation",this.update,this),this.model.on("change:camera_fov",this.update_current_control,this),this.model.on("change:width",this.update_size,this),this.model.on("change:height",this.update_size,this),this.model.on("change:displayscale",this.update_size,this),this.model.on("change:ambient_coefficient",this.update_light,this),this.model.on("change:diffuse_coefficient",this.update_light,this),this.model.on("change:specular_coefficient",this.update_light,this),this.model.on("change:specular_exponent",this.update_light,this),this.model.on("change:_shaders",(()=>{this.rebuild_multivolume_rendering_material(),this.update()}),this);const y=()=>{for(const e of[this.scene,this.scene_opaque]){const t=this.model.get("camera_center");e.position.set(-t[0],-t[1],-t[2])}this.update()};let S;this.model.on("change:camera_center",y),y(),this.model.on("change:tf",this.tf_set,this),this.listenTo(this.model,"msg:custom",this.custom_msg.bind(this)),this.renderer.domElement.addEventListener("resize",this.on_canvas_resize.bind(this),!1),this.update(),this.update_current_control(),this.update_light(),S=this.model.get("capture_fps")?this.renderer.domElement.captureStream(this.model.get("capture_fps")):this.renderer.domElement.captureStream(),this.model.stream=Promise.resolve(S),window.last_figure_stream=S,window.last_figure=this,this.renderer.domElement.onmouseover=()=>{this.hover=!0},this.renderer.domElement.onmouseleave=()=>{this.hover=!1}}camera_initial(e){throw new Error("Method not implemented.")}_save_matrices(e,t,n){throw new Error("Method not implemented.")}tf_set(e,t,n){throw new Error("Method not implemented.")}setStyle(){}update_icons(){const e="select"===this.model.get("mouse_mode");this.select_icon_lasso.active("lasso"===this.model.get("selector")&&e),this.select_icon_circle.active("circle"===this.model.get("selector")&&e),this.select_icon_rectangle.active("rectangle"===this.model.get("selector")&&e),this.select_icon.active(e);const t="zoom"===this.model.get("mouse_mode");this.zoom_icon.active(t);const n="slice"===this.model.get("mouse_mode");this.slice_icon.active(n)}update_mouse_mode(){const e="normal"===this.model.get("mouse_mode");this.model.get("controls")?(this.control_trackball.enabled=!1,this.control_orbit.enabled=!1):(this.control_trackball.enabled="trackball"===this.model.get("camera_control")&&e,this.control_orbit.enabled="orbit"===this.model.get("camera_control")&&e)}mousewheel(e){if("zoom"!==this.model.get("mouse_mode"))return;e.preventDefault(),e.stopPropagation();let t,n,i=25e-5*e.deltaY;2===e.deltaMode&&(i=.025*e.deltaY),1===e.deltaMode&&(i-=.01*e.deltaY),e.offsetX?(t=e.offsetX,n=e.offsetY):e.layerX&&(t=e.layerX,n=e.layerY),i*=10;const a=Math.pow(10,i);if(this.renderer.domElement.clientHeight,!this.last_zoom_coordinate){const[e,i,a,s]=this.readPixelFrom(this.coordinate_target,t,n);if(s>1){const t=new l.Vector3(e,i,a);t.multiplyScalar(1/255),this.last_zoom_coordinate=t}}if(this.last_zoom_coordinate){this.renderer.setRenderTarget(this.coordinate_target),this.renderer.clear(!0,!0,!0);const e=this.last_zoom_coordinate,t=e.clone().sub(e.clone().multiplyScalar(a)),n=e.clone().add(e.clone().negate().addScalar(1).multiplyScalar(a)),i=this.model.get("scales"),s=p.mapValues(i,x.createD3Scale);s.x.range([0,1]),s.y.range([0,1]),s.z.range([0,1]),i.x.set("min",s.x.invert(t.x)),i.x.set("max",s.x.invert(n.x)),i.y.set("min",s.y.invert(t.y)),i.y.set("max",s.y.invert(n.y)),i.z.set("min",s.z.invert(t.z)),i.z.set("max",s.z.invert(n.z)),i.x.save_changes(),i.y.save_changes(),i.z.save_changes()}return!1}_mouse_down(e){let t,n;window.last_event=e,e.offsetX?(t=e.offsetX,n=e.offsetY):e.layerX&&(t=e.layerX,n=e.layerY),this.mouseDown(t,n)}mouseDown(e,t,n){this.mouse_down_position={x:e,y:t};const i=this.model.get("scales");this.mouse_down_domain={x:i.x.domain.slice(),y:i.y.domain.slice(),z:i.z.domain.slice()},this.renderer.domElement.clientHeight;const[a,s,r,o]=this.readPixelFrom(this.coordinate_target,e,t);if(o>1){const e=new l.Vector3(a,s,r);e.multiplyScalar(1/255),this.last_pan_coordinate=e}if("select"===this.model.get("mouse_mode")){const e=f.selectors[this.model.get("selector")];this.selector=new e(this.canvas_overlay),n&&(n.preventDefault(),n.stopPropagation())}if("slice"===this.model.get("mouse_mode")){let[n,i,a,s]=this.readPixelFrom(this.volume_front_target,e,t);s>0&&(n/=255,i/=255,a/=255,this._set_slice(n,i,a))}const c=this.readId(e,t);this.on_id_click(c,e,t)}_mouse_move(e){let t,n;e||(e=event),e.offsetX?(t=e.offsetX,n=e.offsetY):e.layerX&&(t=e.layerX,n=e.layerY);const i=t,a=n,s=this.readId(t,n);if(this.on_id_hover(s,t,n),this.last_zoom_coordinate=null,this.selector&&(this.mouse_trail.push([t,n]),this.selector.mouseMove(t,n),this.selector.draw()),"zoom"===this.model.get("mouse_mode")&&this.last_pan_coordinate&&1===e.buttons){const e=i-this.mouse_down_position.x,t=-(a-this.mouse_down_position.y);this.mouseDrag(e,t)}if("slice"===this.model.get("mouse_mode")){let[e,i,a,s]=this.readPixelFrom(this.volume_front_target,t,n);s>0&&(e/=255,i/=255,a/=255,this._set_slice(e,i,a))}}_set_slice(e,t,n){const i=this.model.get("scales"),a=p.mapValues(i,x.createD3Scale),s=a.x.range([0,1]).invert(e),r=a.y.range([0,1]).invert(t),o=a.z.range([0,1]).invert(n),[l,c]=a.x.domain(),[d,_]=a.y.domain(),[h,m]=a.z.domain(),u=Math.abs(l-c),f=Math.abs(d-_),g=Math.abs(h-m),v=Math.abs(s-l)/u<.001||Math.abs(s-c)/u<.001,b=Math.abs(r-d)/f<.001||Math.abs(r-_)/f<.001,y=Math.abs(o-h)/g<.001||Math.abs(o-m)/g<.001;(v||b)&&this.model.set("slice_z",o),(v||y)&&this.model.set("slice_y",r),(b||y)&&this.model.set("slice_x",s),(v||b||y)&&this.model.save_changes()}on_id_click(e,t,n){Object.values(this.scatter_views).forEach((i=>{i.onClick(e),i.popup(e,t,n,this.popup_container)})),Object.values(this.mesh_views).forEach((i=>{i.onClick(e),i.popup(e,t,n,this.popup_container)}))}on_id_hover(e,t,n){this._wantsPopup=!0,this.lastId=e,setTimeout((()=>{this._wantsPopup&&e==this.lastId&&(this._wantsPopup=!1,this._on_id_hover(e,t,n))}),this.model.get("popup_debouce"))}_on_id_hover(e,t,n){Object.values(this.scatter_views).forEach((i=>{i.onHover(e),this.popup_container.style.left=`${t}px`;const a=this.renderer.domElement.clientHeight;this.popup_container.style.bottom=a-n+"px",i.popup(e,t,n,this.popup_container)})),Object.values(this.mesh_views).forEach((i=>{i.onHover(e),this.popup_container.style.left=`${t}px`;const a=this.renderer.domElement.clientHeight;this.popup_container.style.bottom=a-n+"px",i.popup(e,t,n,this.popup_container)}))}mouseDrag(e,t){const n=this.renderer.domElement,i=e/n.clientWidth*2,a=t/n.clientHeight*2,s=this.camera.projectionMatrix,r=this.camera.matrixWorldInverse,o=s.clone().multiply(r),c=new l.Matrix4,d=this.model.get("box_size");c.makeScale(d[0],d[1],d[2]),o.multiply(c);const _=o.clone().getInverse(o),h=this.model.get("scales"),m=p.mapValues(h,x.createD3Scale);m.x.domain(this.mouse_down_domain.x).range([0,1]),m.y.domain(this.mouse_down_domain.y).range([0,1]),m.z.domain(this.mouse_down_domain.z).range([0,1]);let u=this.last_pan_coordinate.clone();const f=u.clone().applyMatrix4(o),g=f.clone();g.x+=i,g.y+=a,u=f.clone().applyMatrix4(_);const v=g.clone().applyMatrix4(_).clone().sub(u),b=new l.Vector3(0,0,0),y=new l.Vector3(1,1,1);b.sub(v),y.sub(v),h.x.set("min",m.x.invert(b.x)),h.x.set("max",m.x.invert(y.x)),h.y.set("min",m.y.invert(b.y)),h.y.set("max",m.y.invert(y.y)),h.z.set("min",m.z.invert(b.z)),h.z.set("max",m.z.invert(y.z)),h.x.save_changes(),h.y.save_changes(),h.z.save_changes()}_mouse_dbl_click(e){if("zoom"===this.model.get("mouse_mode")&&this.last_pan_coordinate){const e=this.mouse_down_domain.x,t=this.mouse_down_domain.y,n=this.mouse_down_domain.z;let i=new l.Vector3(e[0],t[0],n[0]),a=new l.Vector3(e[1],t[1],n[1]);const s=a.clone().sub(i),r=this.last_pan_coordinate.clone().multiply(s).add(i),o=s.clone().multiplyScalar(.5);i=r.clone().sub(o),a=r.clone().add(o);const c=this.model.get("scales");c.x.set("min",i.x),c.x.set("max",a.x),c.y.set("min",i.y),c.y.set("max",a.y),c.z.set("min",i.z),c.z.set("max",a.z),c.x.save_changes(),c.y.save_changes(),c.z.save_changes()}}_mouse_up(e){if(this.selector){const t=this.renderer.domElement;this.send({event:"selection",data:this.selector.getData(t.clientWidth,t.clientHeight)}),this.mouse_trail=[],this.selector.close(),this.selector=null,e.preventDefault(),e.stopPropagation()}}_special_keys_down(e){if(!this.hover)return;const t=window.event?event:e;t.altKey;let n=!1;return"="===t.key&&(this.model.set("selection_mode","replace"),n=!0),"|"===t.key&&(this.model.set("selection_mode","or"),n=!0),"&"===t.key&&(this.model.set("selection_mode","and"),n=!0),"-"===t.key&&(this.model.set("selection_mode","subtract"),n=!0),76===t.keyCode&&(this.model.set("selector","lasso"),n=!0),67===t.keyCode&&(this.model.set("selector","circle"),n=!0),82===t.keyCode&&(this.model.set("selector","rectangle"),n=!0),16===t.keyCode&&(this.quick_mouse_mode_change||(this.quick_mouse_mode_change=!0,this.quick_mouse_previous_mode=this.model.get("mouse_mode"),this.model.set("mouse_mode","slice"),n=!0)),18===t.keyCode&&(this.quick_mouse_mode_change||(this.quick_mouse_mode_change=!0,this.quick_mouse_previous_mode=this.model.get("mouse_mode"),this.model.set("mouse_mode","zoom"),n=!0)),17===t.keyCode&&(this.quick_mouse_mode_change||(this.quick_mouse_mode_change=!0,this.quick_mouse_previous_mode=this.model.get("mouse_mode"),this.model.set("mouse_mode","select"),n=!0)),n?(this.touch(),e.preventDefault(),e.stopPropagation(),!1):void 0}_special_keys_up(e){const t=window.event?event:e;t.altKey,16!==t.keyCode&&17!==t.keyCode&&18!==t.keyCode||this.quick_mouse_mode_change&&(this.quick_mouse_mode_change=!1,this.model.set("mouse_mode",this.quick_mouse_previous_mode),this.touch())}custom_msg(e){if("screenshot"===e.msg){const t=this.screenshot(void 0,e.width,e.height);this.send({event:"screenshot",data:t})}}screenshot(e="image/png",t,n){const i=t&&n;try{i&&this._update_size(!0,t,n),this._real_update();const a=this.renderer.domElement.toDataURL(e);return console.info("captured screenshot"),a}finally{i&&this._update_size(!1)}}_d3_add_axis(e,t,n){const i=new l.Object3D;i.matrixAutoUpdate=!1;const a=new l.Matrix4;a.makeTranslation(t.translate[0],t.translate[1],t.translate[2]),s.select(e).attr("translate-x",t.translate[0]),s.select(e).attr("translate-y",t.translate[1]),s.select(e).attr("translate-z",t.translate[2]);const r=new l.Matrix4;r.makeRotationFromEuler(new l.Euler(t.rotate[0],t.rotate[1],t.rotate[2],t.rotation_order));const o={x:c.textAlign.topRight,y:c.textAlign.topRight,z:c.textAlign.center},d=new c.SpriteText2D(t.label,{align:o[t.name],font:"100px Arial",fillStyle:"#00FF00",antialias:!0});d.material.transparent=!0,d.material.alphaTest=.3,i.matrix.multiply(a),i.matrix.multiply(r),this.axes.add(i),i.add(d),t.object_label=d,t.object=i;const _=this.model.get("scales")[t.name];t.scale=x.createD3Scale(_).range([-.5,.5]),t.ticks=null,this._d3_update_axis(e,t,n)}_d3_update_axis(e,t,n){t.object_label.text=t.label,t.object_label.fillStyle=t.fillStyle;const i=t.name,a=this.model.get("scales")[t.name];t.scale=x.createD3Scale(a).range([-.5,.5]),t.object_label.fillStyle=this.get_style("axes."+i+".label.color axes."+i+".color axes.label.color axes.color"),t.object_label.visible=this.get_style("axes."+i+".label.visible axes."+i+".visible axes.label.visible axes.visible");const s=new l.Matrix4;s.makeRotationFromEuler(new l.Euler(t.rotate[0],t.rotate[1],t.rotate[2],t.rotation_order));const r=new l.Matrix4;r.getInverse(s);const o=new l.Vector3;o.fromArray(this.model.get("box_size"));const c=new l.Vector3(1,1,1);c.divide(o);const d=new l.Matrix4;d.makeScale(c.x,c.y,c.z);const _=.004/3,h=new l.Matrix4;h.makeScale(_,_,_),d.multiply(h);const m=t.object_label;m.matrixAutoUpdate=!1,m.matrix.identity(),m.matrix.multiply(r),m.matrix.multiply(d),m.matrix.multiply(s)}_d3_add_axis_tick(e,t,n){const i=s.select(s.select(e).node().parentNode).datum(),a=i.scale.tickFormat(this.ticks,".1f")(t.value),r={x:c.textAlign.topRight,y:c.textAlign.topRight,z:c.textAlign.center},o=new c.SpriteText2D(a,{align:r[i.name],font:"100px Arial",fillStyle:"#00FF00",antialias:!0});o.material.transparent=!0,o.material.alphaTest=.3;const l=i.name;return o.fillStyle=this.get_style("axes."+l+".ticklabel.color axes.ticklabel.color axes."+l+".color axes.color"),a&&i.object.add(o),t.object_ticklabel=o,this._d3_update_axis_tick(e,t,n),o}_d3_update_axis_tick(e,t,n){const i=s.select(s.select(e).node().parentNode).datum(),a=i.scale,r=a.tickFormat(this.ticks,".1f")(t.value);r&&!t.object_ticklabel.text&&i.object.add(t.object_ticklabel),!r&&t.object_ticklabel.text&&i.object.remove(t.object_ticklabel),t.object_ticklabel.text=r;const o=i.name;t.object_ticklabel.fillStyle=this.get_style("axes."+o+".ticklabel.color axes.ticklabel.color axes."+o+".color axes.color"),t.object_ticklabel.visible=this.get_style("axes."+o+".ticklabel.visible axes."+o+".visible axes.visible");const c=new l.Matrix4;c.makeRotationFromEuler(new l.Euler(i.rotate[0],i.rotate[1],i.rotate[2],i.rotation_order));const d=new l.Matrix4;d.getInverse(c);const _=new l.Vector3;_.fromArray(this.model.get("box_size"));const h=new l.Vector3(1,1,1);h.divide(_);const m=new l.Matrix4;m.makeScale(h.x,h.y,h.z);const u=.001/3,p=new l.Matrix4;p.makeScale(u,u,u),m.multiply(p);const f=new l.Matrix4;f.makeTranslation(a(t.value),0,0);const g=t.object_ticklabel;g.matrixAutoUpdate=!1,g.matrix.identity(),g.matrix.multiply(f),g.matrix.multiply(d),g.matrix.multiply(m),g.matrix.multiply(c)}_d3_remove_axis_tick(e,t,n){t.object_ticklabel.text&&t.object_ticklabel.parent.remove(t.object_ticklabel)}update_scatters(){const e=this.model.get("scatters");if(0!==e.length){const t=[];e.forEach((e=>{if(t.push(e.cid),!(e.cid in this.scatter_views)){const t={parent:this},n=new _.ScatterView({options:t,model:e});n.render(),this.scatter_views[e.cid]=n}}));for(const e of Object.keys(this.scatter_views)){const n=this.scatter_views[e];-1===t.indexOf(e)&&(n.remove_from_scene(),delete this.scatter_views[e])}}else this.scatter_views={};this._update_id_offsets()}update_meshes(){const e=this.model.get("meshes");if(0!==e.length){const t=[];e.forEach((e=>{if(t.push(e.cid),!(e.cid in this.mesh_views)){const t={parent:this},n=new d.MeshView({options:t,model:e});n.render(),this.mesh_views[e.cid]=n}}));for(const e of Object.keys(this.mesh_views)){const n=this.mesh_views[e];-1===t.indexOf(e)&&(n.remove_from_scene(),delete this.mesh_views[e])}}else this.mesh_views={};this._update_id_offsets()}update_volumes(){const e=this.model.get("volumes"),t=this.model.previous("volumes");if(0!==e.length){const t=[];e.forEach((e=>{if(t.push(e.cid),!(e.cid in this.volume_views)){const t={parent:this},n=new u.VolumeView({options:t,model:e});e.add_to_scene(this.rootObject),this.volume_views[e.cid]=n,n.render()}}));for(const e of Object.keys(this.volume_views))this.volume_views[e],-1===t.indexOf(e)&&delete this.volume_views[e]}else this.volume_views={};if(t)for(let n of t)e.includes(n)||n.remove_from_scene(this.rootObject);this._update_id_offsets()}_update_id_offsets(){let e=1;for(const t of Object.values(this.scatter_views))t.uniforms.id_offset.value=e,e+=t.length;for(const t of Object.values(this.mesh_views))t.uniforms.id_offset.value=e,e+=t.length}async update_lights(){this.model.previous("lights")&&this.model.previous("lights").forEach((e=>{const t=e.obj;this.scene.remove(t)})),this.model.get("lights").forEach((e=>{const t=e.obj;t.castShadow&&this.update_shadows();const n=()=>{t.castShadow&&this.update_shadows(),this.update()};t.target&&this.scene.add(t.target),e.on("change",n),e.on("childchange",n),this.scene.add(t)}));const e=[...Object.values(this.mesh_views),...Object.values(this.scatter_views)];for(const t of e)t._update_materials();this.update()}update_shadows(){this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=l.PCFSoftShadowMap}transition(e,t,n){const i=this,a=i.model.get("animation_exponent");i.transitions.push(new g.Transition(e,t,i.model.get("animation"),a))}on_orientationchange(e){if(this.model.get("orientation_control")){for(const t of[this.scene,this.scene_opaque])t.rotation.reorder("XYZ"),t.rotation.x=e.gamma*Math.PI/180+2*Math.PI,t.rotation.y=-(e.beta*Math.PI/180+2*Math.PI),t.rotation.z=-e.alpha*Math.PI/180;this.update()}}on_canvas_resize(e){}keypress(e){}update_angles(){this.camera.ipymodel&&this.camera.ipymodel.syncToModel(!0),this.update()}_get_scale_matrix(){const e=new l.Matrix4;e.makeTranslation(-.5,-.5,-.5);const t=new l.Matrix4,n=this.model.get("scales"),i=n.x.domain,a=n.y.domain,s=n.z.domain,r=1/(i[1]-i[0]),o=1/(a[1]-a[0]),c=1/(s[1]-s[0]);t.makeScale(r,o,c);const d=new l.Matrix4;return d.makeTranslation(-i[0],-a[0],-s[0]),e.multiply(t),e.multiply(d),e}_get_view_matrix(){this.camera.updateMatrixWorld(),this.camera.matrixWorldInverse.getInverse(this.camera.matrixWorld);const e=this.camera.matrixWorldInverse.clone();return e.multiply(this._get_scale_matrix().clone()),e}update_current_control(){this.camera.ipymodel&&this.camera.ipymodel.syncToModel(!0),this.control_trackball.position0=this.camera.position.clone(),this.control_trackball.up0=this.camera.up.clone()}update_panorama(){const e=this.screen_material_cube;"360"===this.model.get("panorama_mode")&&(e.defines={PANORAMA_360:!0}),"180"===this.model.get("panorama_mode")&&(e.defines={PANORAMA_180:!0}),e.needsUpdate=!0,this.update()}update(){this._update_requested||(this._update_requested=!0,requestAnimationFrame(this._real_update.bind(this)))}_real_update(){this.control_trackball.handleResize(),this.control_external&&(this.control_external.update(),this.camera.ipymodel.syncToModel(!0)),this._update_requested=!1,this.control_external||this.camera.lookAt(0,0,0);for(const e of Object.values(this.scatter_views))e.uniforms.aspect.value=this.model.get("box_size");this.renderer.setClearColor(this.get_style_color("background-color")),this.x_axis.visible=this.get_style("axes.x.visible axes.visible"),this.y_axis.visible=this.get_style("axes.y.visible axes.visible"),this.z_axis.visible=this.get_style("axes.z.visible axes.visible"),this.axes_material.color=this.get_style_color("axes.color"),this.xaxes_material.color=this.get_style_color("axes.x.color axes.color"),this.yaxes_material.color=this.get_style_color("axes.y.color axes.color"),this.zaxes_material.color=this.get_style_color("axes.z.color axes.color"),this.axes_data[0].fillStyle=this.get_style("axes.x.color axes.color"),this.axes_data[1].fillStyle=this.get_style("axes.y.color axes.color"),this.axes_data[2].fillStyle=this.get_style("axes.z.color axes.color"),this.axes_data[0].label=this.model.get("xlabel"),this.axes_data[1].label=this.model.get("ylabel"),this.axes_data[2].label=this.model.get("zlabel"),this.wire_box.visible=this.get_style("box.visible"),this.wire_box_x_line.visible=!this.x_axis.visible&&this.wire_box.visible,this.wire_box_y_line.visible=!this.y_axis.visible&&this.wire_box.visible,this.wire_box_z_line.visible=!this.z_axis.visible&&this.wire_box.visible,s.select(this.el_axes).selectAll(".ipyvol-axis").data(this.axes_data).each(y(this._d3_update_axis,this)).enter().append("div").attr("class","ipyvol-axis").each(y(this._d3_add_axis,this));const e=this;this.ticks=5,this.last_tick_selection=s.select(this.el_axes).selectAll(".ipyvol-axis").data(this.axes_data).selectAll(".ipyvol-tick").data((function(t,n,i){let a=t.ticks;if(a){a=t.ticks=a.slice();const n=t.scale.ticks(e.ticks);for(;a.length<n.length;)a.push({});for(;a.length>n.length;)a.pop();for(let e=0;e<n.length;e++)a[e].value=n[e];return a}return a=t.scale.ticks(e.ticks).map((e=>({value:e}))),t.ticks=a,a})),this.last_tick_selection.each(y(this._d3_update_axis_tick,this)).enter().append("div").attr("class","ipyvol-tick").each(y(this._d3_add_axis_tick,this)),this.last_tick_selection.exit().remove().each(y(this._d3_remove_axis_tick,this));const t=[];for(const e of this.transitions)e.is_done()||t.push(e),e.update();if(this.renderer.clear(),this.model.get("stereo")){const e=this.renderer.getSize();null===this.camera.parent&&this.camera.updateMatrixWorld(),this.camera_stereo.eyeSep=this.model.get("eye_separation")/100,this.camera.focus=this.camera.focus,this.camera_stereo.update(this.camera),this.camera_stereo.cameraL.position.copy(this.camera.position),this.camera_stereo.cameraR.position.copy(this.camera.position),this.camera_stereo.cameraL.quaternion.copy(this.camera.quaternion),this.camera_stereo.cameraR.quaternion.copy(this.camera.quaternion),this.camera_stereo.cameraL.up.copy(this.camera.up),this.camera_stereo.cameraR.up.copy(this.camera.up);const t="no"!==this.model.get("panorama_mode");this.renderer.setScissorTest(!0),t?(this.renderer.setScissor(0,0,e.width,e.height/2),this.renderer.setViewport(0,0,e.width,e.height/2)):(this.renderer.setScissor(0,0,e.width/2,e.height),this.renderer.setViewport(0,0,e.width/2,e.height)),this._render_eye(this.camera_stereo.cameraL),t?(this.renderer.setScissor(0,e.height/2,e.width,e.height/2),this.renderer.setViewport(0,e.height/2,e.width,e.height/2)):(this.renderer.setScissor(e.width/2,0,e.width/2,e.height),this.renderer.setViewport(e.width/2,0,e.width/2,e.height)),this._render_eye(this.camera_stereo.cameraR),this.renderer.setScissorTest(!1),this.renderer.setViewport(0,0,e.width,e.height)}else this._render_eye(this.camera);this.selector&&this.selector.draw(),this.transitions=t,this.transitions.length>0&&this.update(),this.model.get("render_continuous")&&this.update(),this.model.get("scene")&&this.model.get("scene").trigger("afterRender",this.scene,this.renderer,this.camera)}get_style_color(e){const t=this.get_style(e);if(t)return new l.Color(t);console.error("could not find color for",e)}get_style(e){const t=[null];return e.split(" ").forEach((e=>{const n=e.split(".").reduce(((e,t)=>null!==e&&void 0!==e[t]?e[t]:null),this.model.get("style"));null!==n&&null===t[0]&&(t[0]=n)}),this),t[0]}_render_eye(e){this.camera.updateMatrixWorld();let t=this.model.get("volumes");t=t.filter((e=>e.get("visible")));const n=0!==t.length,i="no"!==this.model.get("panorama_mode"),a=this.rootObject.children.reduce(((e,t)=>(e[t.id]=t.visible,e)),{}),s=({volumes:e})=>{this.rootObject.children.forEach((t=>{t.visible=e?Boolean(t.isVolume)||Boolean(t.isLight)||Boolean(t.isCamera):!Boolean(t.isVolume),t===this.front_box_mesh&&(this.front_box_mesh.visible=!1)}))};for(const e of Object.values(this.scatter_views))e.set_scales(this.model.get("scales"));for(const e of Object.values(this.mesh_views))e.set_scales(this.model.get("scales"));if(i){if(this.cube_camera.clear(this.renderer,!0,!0,!0),this.renderer.autoClear=!1,this.cube_camera.position.copy(e.position),this.cube_camera.rotation.copy(e.rotation),this.cube_camera.quaternion.copy(this.camera.quaternion),this.model.get("stereo")){const t=new l.Vector3(0,0,0);e===this.camera_stereo.cameraR&&(t.x+=.032),e===this.camera_stereo.cameraL&&(t.x-=.032),t.applyQuaternion(e.quaternion),this.cube_camera.position.add(t);const n=new l.Vector3(0,0,1*this.camera.focus);n.applyQuaternion(e.quaternion),this.cube_camera.lookAt(n)}return this.cube_camera.update(this.renderer,this.scene),this.cube_camera.update(this.renderer,this.scene_opaque),this.screen_texture=this.cube_camera.renderTarget,void this.renderer.render(this.screen_scene_cube,this.screen_camera)}if(this.rootObject.children.forEach((e=>{e.visible=!1})),this.front_box_mesh.visible=!0,this.front_box_mesh.material.side=l.FrontSide,this.renderer.setRenderTarget(this.volume_front_target),this.renderer.clear(!0,!0,!0),this.renderer.render(this.scene,e,this.volume_front_target),this.front_box_mesh.visible=!1,n){this.renderer.state.buffers.depth.setClear(0);for(const e of t)e.box_material.side=l.BackSide,e.box_material.depthFunc=l.GreaterDepth,e.vol_box_mesh.material=e.box_material,e.set_scales(this.model.get("scales"));this.renderer.setRenderTarget(this.volume_back_target),this.renderer.clear(!0,!0,!0),s({volumes:!0}),this.renderer.render(this.scene,e,this.volume_back_target),this.renderer.state.buffers.depth.setClear(1),this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.geometry_depth_target),this.renderer.clear(!0,!0,!0),s({volumes:!1}),this.renderer.render(this.scene,e,this.geometry_depth_target),this.renderer.render(this.scene_opaque,e,this.geometry_depth_target),this.renderer.autoClear=!0}if(this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.color_pass_target),this.renderer.clear(!0,!0,!0),s({volumes:!1}),this.renderer.render(this.scene,e,this.color_pass_target),this.renderer.render(this.scene_opaque,e,this.color_pass_target),this.renderer.autoClear=!0,n){this.renderer.context.colorMask(0,0,0,0);for(const e of t)e.box_material.side=l.FrontSide,e.box_material.depthFunc=l.LessEqualDepth;this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.color_pass_target),this.renderer.clear(!1,!0,!1),s({volumes:!0}),this.renderer.render(this.scene,e,this.color_pass_target),this.renderer.autoClear=!0,this.renderer.context.colorMask(!0,!0,!0,!0);for(const e of t)e.vol_box_mesh.material=this.material_multivolume;this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.color_pass_target),s({volumes:!0}),this.renderer.render(this.scene,e,this.color_pass_target),this.renderer.autoClear=!0}for(const e of Object.values(this.scatter_views))e.mesh.material=e.mesh.material_rgb;for(const e of Object.values(this.mesh_views))e.meshes.forEach((e=>{e.material=e.material_rgb}));this.renderer.autoClear=!1,this.renderer.setClearAlpha(0),this.renderer.setRenderTarget(this.coordinate_target),this.renderer.clear(!0,!0,!0),s({volumes:!1}),this.renderer.render(this.scene,e,this.coordinate_target),this.renderer.autoClear=!0;for(const e of Object.values(this.scatter_views))e.mesh.material=e.mesh.material_id;for(const e of Object.values(this.mesh_views))e.meshes.forEach((e=>{e.material=e.material_id}));if(this.renderer.autoClear=!1,this.renderer.setClearAlpha(0),this.renderer.setRenderTarget(this.id_pass_target),this.renderer.clear(!0,!0,!0),s({volumes:!1}),this.renderer.render(this.scene,e,this.id_pass_target),this.renderer.autoClear=!0,n){this.renderer.context.colorMask(0,0,0,0);for(const e of t)e.box_material.side=l.FrontSide,e.box_material.depthFunc=l.LessEqualDepth;this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.color_pass_target),this.renderer.clear(!1,!0,!1),s({volumes:!0}),this.renderer.render(this.scene,e,this.color_pass_target),this.renderer.autoClear=!0,this.renderer.context.colorMask(!0,!0,!0,!0);for(const e of t)e.vol_box_mesh.material=this.material_multivolume_depth;this.renderer.autoClear=!1,this.renderer.setRenderTarget(this.color_pass_target),s({volumes:!0}),this.renderer.render(this.scene,e,this.coordinate_target),this.renderer.autoClear=!0}for(const e of Object.values(this.scatter_views))e.mesh.material=e.mesh.material_normal;for(const e of Object.values(this.mesh_views))e.meshes.forEach((e=>{e.material=e.material_normal}));"Shadow"==this.model.get("show")?this._render_shadow():(this.screen_texture={render:this.color_pass_target,front:this.volume_front_target,back:this.volume_back_target,coordinate:this.coordinate_target,id:this.id_pass_target}[this.model.get("show")],this.screen_material.uniforms.tex.value=this.screen_texture.texture,this.renderer.setRenderTarget(null),this.renderer.clear(!0,!0,!0),this.renderer.render(this.screen_scene,this.screen_camera)),(()=>{this.rootObject.children.forEach((e=>{e.visible=a[e.id]}))})()}_render_shadow(){const e=this.model.get("lights").map((e=>e.obj)).filter((e=>Boolean(e.shadow)&&Boolean(e.shadow.map)));if(0==e.length)throw"No light with a shadow map found.";const t=e[0].shadow.map.texture,n=t.width,i=t.height,a=new l.OrthographicCamera(n/-2,i/2,n/2,i/-2,-1e3,1e3);a.position.z=100;var s=new l.Scene;const r=this.model.get("_shaders"),o=r["shadow-fragment"]||b["shadow-fragment"],c=r["shadow-vertex"]||b["shadow-vertex"],d=new l.ShaderMaterial({uniforms:{map:{type:"t",value:null}},vertexShader:c,fragmentShader:o,depthTest:!1,depthWrite:!1});s.add(new l.Mesh(new l.PlaneGeometry(n,i),d)),d.uniforms.map.value=t,this.renderer.render(s,a)}rebuild_multivolume_rendering_material(){let e=this.model.get("volumes");e=e.filter((e=>e.get("visible")));const t=this.material_multivolume,n=this.material_multivolume_depth;let i=0,a=0;if(t.uniforms.volumes.value=[],t.uniforms.volumes_max_int.value=[],t.uniforms.data.value=[],t.uniforms.data_max_int.value=[],t.uniforms.transfer_function.value=[],t.uniforms.transfer_function_max_int.value=[],t.uniforms.steps.value=e.map((e=>{const t=this.volume_views[e.cid];return t?t.get_ray_steps():0})),0===e.length)return;for(const n of e)n.is_normal()?(i++,t.uniforms.volumes.value.push(n.uniform_volumes_values),t.uniforms.data.value.push(n.uniform_data.value[0]),t.uniforms.transfer_function.value.push(n.uniform_transfer_function.value[0])):(a++,t.uniforms.volumes_max_int.value.push(n.uniform_volumes_values),t.uniforms.data_max_int.value.push(n.uniform_data.value[0]),t.uniforms.transfer_function_max_int.value.push(n.uniform_transfer_function.value[0]));t.defines.VOLUME_COUNT=i,t.defines.VOLUME_COUNT_MAX_INT=a,t.lights=!0,n.defines.VOLUME_COUNT=i,n.defines.VOLUME_COUNT_MAX_INT=a;const s=this.model.get("_shaders");n.fragmentShader=t.fragmentShader=x.patchShader((e=>{const t={volumes:p.range(i),volumes_max_int:p.range(a)};return r.render(e,t)})(s["volr-fragment"]||b["volr-fragment"])),n.vertexShader=t.vertexShader=x.patchShader(s["volr-vertex"]||b["volr-vertex"]),n.needsUpdate=t.needsUpdate=!0}update_light(){this.material_multivolume.uniforms.ambient_coefficient.value=this.model.get("ambient_coefficient"),this.material_multivolume.uniforms.diffuse_coefficient.value=this.model.get("diffuse_coefficient"),this.material_multivolume.uniforms.specular_coefficient.value=this.model.get("specular_coefficient"),this.material_multivolume.uniforms.specular_exponent.value=this.model.get("specular_exponent"),this.update()}update_size(){this._update_size()}_update_size(e,t,n){let i,a;const s=this.renderer.domElement;this.is_fullscreen()?(i=t||s.clientWidth,a=n||s.clientHeight):(i=t||this.model.get("width"),a=n||this.model.get("height"));let r=i*this.renderer.getPixelRatio(),o=a*this.renderer.getPixelRatio();const l=i*this.model.get("displayscale"),c=a*this.model.get("displayscale");this.is_fullscreen()&&0!==this.model.get("volumes")&&(r=t||this.model.get("width"),o=n||this.model.get("height")),this.renderer.setSize(i,a,!1);const d=this.renderer.context.drawingBufferWidth,_=this.renderer.context.drawingBufferHeight;(d<i||_<a)&&console.info("could not set resolution to",i,a,", resolution is",d,_),this.renderer.domElement.style.width=l+"px",this.renderer.domElement.style.height=c+"px",this.canvas_container.style.width=l+"px",this.canvas_container.style.height=c+"px",this.canvas_overlay.style.width=l+"px",this.canvas_overlay.style.height=c+"px",this.canvas_overlay.width=i,this.canvas_overlay.height=a,this.model.get("stereo")&&(r/=2);const h=r/o;this.camera.aspect=h,this.camera.updateProjectionMatrix(),this.material_multivolume.uniforms.render_size.value=[r,o],this.volume_back_target.setSize(r,o),this.volume_front_target.setSize(r,o),this.geometry_depth_target.setSize(r,o),this.color_pass_target.setSize(r,o),this.screen_pass_target.setSize(r,o),this.coordinate_target.setSize(r,o),this.id_pass_target.setSize(r,o),this.screen_texture=this.color_pass_target.texture,e||this.update()}getRenderSize(){const e=this.renderer.getSize();return[e.width,e.width]}fullscreen(){o.request(this.el)}is_fullscreen(){return o.element===this.renderer.domElement}}t.FigureView=A;class C extends a.WidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"WidgetManagerHackModel",_model_module:"ipyvolume",_model_module_version:m.semver_range})}initialize(e,t){console.log(this),super.initialize(e,t),console.info("get reference to widget manager"),window.jupyter_widget_manager=this.widget_manager,window.jupyter_widgets=a}}t.WidgetManagerHackModel=C},1568:(e,t,n)=>{"use strict";function i(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),i(n(88)),i(n(7868)),i(n(7439)),i(n(2981)),i(n(3506))},414:function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const a=i(n(9600)),s=n(9482);class r extends a.MeshDepthMaterial{constructor(e,t,n,i,a){super(a),this.defines=e,this.uniforms=t,this.onBeforeCompile=e=>{const t=Object.assign({DEPTH_PACKING:3201},this.defines());let a="";for(const e of Object.keys(t))t[e]&&(a+=`#define ${e} ${t[e]}\n`);e.vertexShader=s.patchShader(a+n),e.fragmentShader=s.patchShader(a+i),e.uniforms=Object.assign(Object.assign({},e.uniforms),this.uniforms)}}}t.MeshDepthMaterialCustom=r;class o extends a.MeshDistanceMaterial{constructor(e,t,n,i,a){super(a),this.defines=e,this.uniforms=t,this.onBeforeCompile=e=>{const t=this.defines();let a="";for(const e of Object.keys(t))t[e]&&(a+=`#define ${e} ${t[e]}\n`);e.vertexShader=s.patchShader(a+n),e.fragmentShader=s.patchShader(a+i),e.uniforms=Object.assign(Object.assign({},e.uniforms),this.uniforms)}}}t.MeshDistanceMaterialCustom=o},3506:function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const a=i(n(8651)),s=n(8174),r=i(n(9600)),o=n(414),l=n(9482),c=i(n(1961)),d=n(6988),_=i(n(3636)),h=n(2413),m={"mesh-vertex":n(1367).Z,"mesh-fragment":n(1624).Z};class u extends h.Object3DView{constructor(){super(...arguments),this.length=1}render(){if(this.figure=this.options.parent,!this.figure)throw"Mesh cannot be displayed, should be added to Figure";this.figure.model.on("change:_shaders",(()=>{console.log("updating mesh shader (hot reload)"),this._update_materials()}),this),this.previous_values={},this.attributes_changed={},window.last_mesh_view=this,this.meshes=[],this.texture_loader=new r.TextureLoader,this.textures=null,this.model.get("texture")&&this._load_textures(),this.uniforms=Object.assign({domain_x:{type:"2f",value:[0,1]},domain_y:{type:"2f",value:[0,1]},domain_z:{type:"2f",value:[0,1]},domain_color:{type:"2f",value:[0,1]},animation_time_x:{type:"f",value:1},animation_time_y:{type:"f",value:1},animation_time_z:{type:"f",value:1},animation_time_u:{type:"f",value:1},animation_time_v:{type:"f",value:1},animation_time_color:{type:"f",value:1},animation_time_texture:{type:"f",value:1},texture:{type:"t",value:null},texture_previous:{type:"t",value:null},colormap:{type:"t",value:null},id_offset:{type:"f",value:0},volume_texture:{type:"t",value:null},transfer_function:{type:"t",value:null},position_offset:{type:"3f",value:[0,0,0]},volume:{value:null}},r.UniformsUtils.merge([r.UniformsLib.common,r.UniformsLib.lights]));const e=e=>{if(this.model.get(e))return this.model.get(e).obj.clone();{const e=new r.ShaderMaterial;return e.side=r.DoubleSide,e.needsUpdate=!0,e}};this.material=e("material"),this.material_rgb=e("material"),this.material_id=e("material"),this.line_material=e("line_material"),this.material.polygonOffset=!0,this.material.polygonOffsetFactor=1,this.material.polygonOffsetUnits=.1,this.line_material_rgb=e("line_material"),this.line_material_id=e("line_material"),this.materials=[this.material,this.material_rgb,this.material_id,this.line_material,this.line_material_rgb,this.line_material_id],this._update_materials(),this.model.get("material")&&this.model.get("material").on("change",(()=>{this._update_materials()})),this.model.get("line_material")&&this.model.get("line_material").on("change",(()=>{this._update_materials()})),this.model.on("change:volume",(()=>{this._update_materials()}),this),this._update_color_scale(),this.create_mesh(),this.add_to_scene();const t=()=>{const e=this.model.get("x_offset"),t=this.model.get("y_offset"),n=this.model.get("z_offset");this.uniforms.position_offset.value=[e,t,n],this.figure.update()};this.model.on("change:x_offset change:y_offset change:z_offset",t),t(),this.model.on("change:color change:sequence_index change:x change:y change:z change:v change:u change:triangles change:lines",this.on_change,this),this.model.on("change:geo change:connected",this.update_,this),this.model.on("change:color_scale",this._update_color_scale,this),this.model.on("change:texture",this._load_textures,this),this.model.on("change:visible change:lighting_model change:opacity change:material change:cast_shadow change:receive_shadow",this._update_materials,this)}_load_textures(){const e=this.model.get("texture");e.stream?(this.textures=null,this.texture_video=document.createElement("video"),e.stream.then((t=>{this.texture_video.srcObject=t,this.texture_video.play(),new r.VideoTexture(this.texture_video),e.minFilter=r.LinearFilter,this.textures=[e],this._update_materials(),this.update_()}))):this.textures=this.model.get("texture").map((e=>this.texture_loader.load(e,(e=>{e.wrapS=r.RepeatWrapping,e.wrapT=r.RepeatWrapping,this._update_materials(),this.update_()}))))}set_scales(e){const t={};for(const n of Object.keys(e))this.uniforms[`domain_${n}`].value=e[n].domain,t[`SCALE_TYPE_${n}`]=l.scaleTypeMap[e[n].type];s.isEqual(this.scale_defines,t)||(this.scale_defines=t,this._update_materials())}add_to_scene(){this.meshes.forEach((e=>{this.figure.rootObject.add(e)}))}update_shadow(){this.meshes.forEach((e=>{e.castShadow=this.model.get("cast_shadow"),e.receiveShadow=this.model.get("receive_shadow")}))}remove_from_scene(){this.meshes.forEach((e=>{this.figure.rootObject.remove(e),e.geometry.dispose()}))}on_change(e){for(const e of Object.keys(this.model.changedAttributes())){this.previous_values[e]=this.model.previous(e);const t=e.replace("_selected","");"sequence_index"===t?(["x","y","z","u","v","color"].forEach((e=>{s.isArray(this.model.get(e))&&this.model.get(e).length>1&&(this.attributes_changed[e]=[e,"sequence_index"])})),this.attributes_changed.texture=["texture","sequence_index"]):"triangles"===t||"lines"===t||("selected"===t?this.attributes_changed.color=[e]:(this.attributes_changed[t]=[e],["x","y","z","u","v","color"].indexOf(t)))}this.update_()}update_(){this.remove_from_scene(),this.create_mesh(),this.add_to_scene(),this._update_materials()}_get_value(e,t,n){if(!e)return n;if(s.isArray(e)&&!s.isNumber(e[0])){const n=t%e.length,i=e.original_data[n].shape[0];if(3===e.original_data[n].shape[1]&&s.isNumber(e[n][0])){const t=new Float32Array(4*i),a=e[n];for(let e=0;e<i;e++)t[4*e]=a[3*e],t[4*e+1]=a[3*e+1],t[4*e+2]=a[3*e+2],t[4*e+3]=1;return t}return e[n]}return e}get_current(e,t,n){return this._get_value(this.model.get(e),t,n)}get_previous(e,t,n){return"color"===e&&this.previous_values[e]&&s.isString(this.previous_values[e])?this._get_value(this.model.get(e),t,n):this._get_value(this.previous_values[e]||this.model.get(e),t,n)}_get_value_vec3(e,t,n){return e?s.isArray(e)?e[t%e.length]:e:n}get_current_vec3(e,t,n){return this._get_value_vec3(this.model.get(e),t,n)}get_previous_vec3(e,t,n){return this._get_value_vec3(this.previous_values[e]||this.model.get(e),t,n)}_update_color_scale(){const e=this.model.previous("color_scale"),t=this.model.get("color_scale");e&&(e.off("domain_changed",this._update_color_scale_domain),e.off("colors_changed",this._update_color_scale_texture)),(!e&&t||e&&!e)&&this._update_materials(),t&&(t.on("domain_changed",this._update_color_scale_domain,this),t.on("colors_changed",this._update_color_scale_texture,this),this._update_color_scale_texture(),this._update_color_scale_domain(),this.figure.update())}_update_color_scale_texture(){const e=this.model.get("color_scale");this.uniforms.colormap.value=l.createColormap(e),this.figure.update()}_update_color_scale_domain(){const e=this.model.get("color_scale"),t=this.model.get("color");if(t){let n,i;n=null!==e.min?e.min:Math.min(...t),i=null!==e.max?e.max:Math.max(...t),this.uniforms.domain_color.value=[n,i]}else null!==e.min&&null!==e.max?this.uniforms.domain_color.value=[e.min,e.max]:console.warn("no color set, and color scale does not have a min or max");this.figure.update()}_update_materials(){this.model.get("material")&&this.material.copy(this.model.get("material").obj),this.model.get("material")&&this.material_rgb.copy(this.model.get("material").obj),this.model.get("material")&&this.material_id.copy(this.model.get("material").obj),this.model.get("line_material")&&this.line_material.copy(this.model.get("line_material").obj),this.model.get("line_material")&&this.line_material_rgb.copy(this.model.get("line_material").obj),this.model.get("line_material")&&this.line_material_id.copy(this.model.get("line_material").obj),this.lighting_model=d.materialToLightingModel(this.material),this.material.defines=Object.assign({USE_COLOR:!0,USE_COLORMAP:null!==this.model.get("color_scale")},this.scale_defines),this.material.defines[`AS_${this.lighting_model}`]=!0,this.material.extensions={derivatives:!0},this.material_rgb.defines=Object.assign({AS_COORDINATE:!0,USE_COLOR:!0},this.scale_defines),this.material_id.defines=Object.assign({AS_ID:!0,USE_COLOR:!0},this.scale_defines),this.line_material.defines=Object.assign({IS_LINE:!0},this.scale_defines),this.line_material.defines[`AS_${this.lighting_model}`]=!0,this.line_material_rgb.defines=Object.assign({IS_LINE:!0,AS_COORDINATE:!0,USE_COLOR:!0},this.scale_defines),this.line_material_id.defines=Object.assign({IS_LINE:!0,AS_ID:!0,USE_COLOR:!0},this.scale_defines),this.material.visible=this.material.visible&&this.model.get("visible"),this.material_rgb.visible=this.material.visible&&this.model.get("visible"),this.material_id.visible=this.material.visible&&this.model.get("visible"),this.line_material.visible=this.line_material.visible&&this.model.get("visible"),this.line_material_rgb.visible=this.line_material.visible&&this.model.get("visible"),this.line_material_id.visible=this.line_material.visible&&this.model.get("visible");const e=this.figure.model.get("_shaders")["mesh-vertex"]||m["mesh-vertex"],t=this.figure.model.get("_shaders")["mesh-fragment"]||m["mesh-fragment"],n=.01*Math.random();this.material_depth=new o.MeshDepthMaterialCustom((()=>{const e=Object.assign({},this.material.defines);return delete e[`AS_${this.lighting_model}`],Object.assign({AS_DEPTH:!0},e)}),this.uniforms,e,t,{depthPacking:r.RGBADepthPacking,alphaTest:.5+n}),this.material_distance=new o.MeshDistanceMaterialCustom((()=>{const e=Object.assign({},this.material.defines);return delete e[`AS_${this.lighting_model}`],Object.assign({AS_DISTANCE:!0},e)}),this.uniforms,e,t,{alphaTest:.5+n}),this.materials.forEach((i=>{i.onBeforeCompile=n=>{n.vertexShader=l.patchShader(e),n.fragmentShader=l.patchShader(t),n.uniforms=Object.assign(Object.assign({},n.uniforms),this.uniforms)},i.alphaTest=.5+n,i.needsUpdate=!0,i.lights=!0})),this.update_shadow(),this.model.get("texture")&&this.textures&&(this.material.defines.USE_TEXTURE=!0);const i=this.model.get("volume");i&&(this.material.defines.USE_VOLUME=!0,this.uniforms.volume_texture.value=i.texture_volume,this.uniforms.transfer_function.value=i.texture_tf,this.uniforms.volume.value=i.uniform_volumes_values),this.material.needsUpdate=!0,this.material_rgb.needsUpdate=!0,this.material_id.needsUpdate=!0,this.line_material.needsUpdate=!0,this.line_material_rgb.needsUpdate=!0,this.line_material_id.needsUpdate=!0,this.surface_mesh&&(this.surface_mesh.customDepthMaterial=this.material_depth,this.surface_mesh.customDistanceMaterial=this.material_distance),this.figure.update()}create_mesh(){let e,t;this.meshes=[];let n,i,a=e=this.model.get("sequence_index"),s=t=a;void 0!==this.previous_values.sequence_index&&(s=t=this.previous_values.sequence_index),a>=s?(n=s-Math.floor(s),i=a-s,a=Math.ceil(a),s=Math.floor(s),s===t&&a===e||a-s>1&&(s=a-1,i=e-s,n=0)):(n=Math.ceil(s)-s,i=s-a,a=Math.floor(a),s=Math.ceil(s),s===t&&a===e||s-a>1&&(s=a+1,n=0,i=s-e)),i>1&&(i%=1,0===i&&(i=1)),0===i&&(i=1);const o=["x","y","z","u","v"],l=[];this.model.get("color_scale")?o.push("color"):l.push("color");const c=new _.Values(o,[],this.get_current.bind(this),a,l),d=new _.Values(o,[],this.get_previous.bind(this),s,l);0===Math.max(c.length,d.length)&&console.error("no single member is an array, not supported (yet?)"),c.trim(c.length),d.trim(d.length),d.length,c.length,c.length>d.length?d.pad(c):c.length<d.length&&c.pad(d),c.merge_to_vec3(["x","y","z"],"vertices"),d.merge_to_vec3(["x","y","z"],"vertices"),c.ensure_array(["color"]),d.ensure_array(["color"]);let h=this.model.get("triangles");if(h){h=h[0];const e=new r.BufferGeometry;e.addAttribute("position",new r.BufferAttribute(c.array_vec3.vertices,3)),e.addAttribute("position_previous",new r.BufferAttribute(d.array_vec3.vertices,3)),this.model.get("color_scale")?(e.addAttribute("color_current",new r.BufferAttribute(c.array.color,1)),e.addAttribute("color_previous",new r.BufferAttribute(d.array.color,1))):(e.addAttribute("color_current",new r.BufferAttribute(c.array_vec4.color,4)),e.addAttribute("color_previous",new r.BufferAttribute(d.array_vec4.color,4))),e.setIndex(new r.BufferAttribute(h,1));const t=this.model.get("texture"),n=c.array.u,i=c.array.v;if(t&&n&&i&&this.textures){const t=a;this.uniforms.texture.value=this.textures[t%this.textures.length],this.uniforms.texture_previous.value=this.textures[s%this.textures.length],e.addAttribute("u",new r.BufferAttribute(n,1)),e.addAttribute("v",new r.BufferAttribute(i,1));const o=d.array.u,l=d.array.v;e.addAttribute("u_previous",new r.BufferAttribute(o,1)),e.addAttribute("v_previous",new r.BufferAttribute(l,1))}e.computeVertexNormals(),this.figure.model.get("_shaders")["mesh-vertex"],this.figure.model.get("_shaders")["mesh-fragment"],this.surface_mesh=new r.Mesh(e,this.material),this.surface_mesh.name="Mesh: "+this.model.get("description"),this.surface_mesh.customDepthMaterial=this.material_depth,this.surface_mesh.customDistanceMaterial=this.material_distance,this.surface_mesh.frustumCulled=!1,this.surface_mesh.material_rgb=this.material_rgb,this.surface_mesh.material_id=this.material_id,this.surface_mesh.material_normal=this.material,this.surface_mesh.castShadow=this.model.get("cast_shadow"),this.surface_mesh.receiveShadow=this.model.get("receive_shadow"),this.meshes.push(this.surface_mesh)}const m=this.model.get("lines");if(m){const e=new r.BufferGeometry;e.addAttribute("position",new r.BufferAttribute(c.array_vec3.vertices,3)),e.addAttribute("position_previous",new r.BufferAttribute(d.array_vec3.vertices,3));let t=null,n=null;this.model.get("color_scale")?(t=new r.BufferAttribute(c.array.color,1),n=new r.BufferAttribute(d.array.color,1)):(t=new r.BufferAttribute(c.array_vec4.color,4),n=new r.BufferAttribute(d.array_vec4.color,4)),t.normalized=!0,e.addAttribute("color_current",t),n.normalized=!0,e.addAttribute("color_previous",n);const i=new Uint32Array(m[0]);e.setIndex(new r.BufferAttribute(i,1)),this.line_segments=new r.LineSegments(e,this.line_material),this.line_segments.name="Line for Mesh: "+this.model.get("description"),this.line_segments.frustumCulled=!1,this.line_segments.material_rgb=this.line_material_rgb,this.line_segments.material_id=this.line_material_id,this.line_segments.material_normal=this.line_material,this.meshes.push(this.line_segments)}else this.line_segments=null;this.update_shadow();for(const e of Object.keys(this.attributes_changed)){const t=this.attributes_changed[e],a="animation_time_"+e,s=()=>{t.forEach((e=>{delete this.previous_values[e]}))};this.figure.transition((e=>{this.uniforms[a].value=n+i*e}),s,this)}this.attributes_changed={}}}t.MeshView=u;class p extends a.WidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"MeshModel",_view_name:"MeshView",_model_module:"ipyvolume",_view_module:"ipyvolume",_model_module_version:d.semver_range,_view_module_version:d.semver_range,color:"red",color_scale:null,sequence_index:0,connected:!1,visible:!0,visible_lines:!0,visible_faces:!0,cast_shadow:!0,receive_shadow:!0,volume:null,x_offset:0,y_offset:0,z_offset:0,description:"mesh - noname",description_color:"red",hovered:null,icon:null,line_material:null,material:null,popup:null,clicked:null})}}t.MeshModel=p,p.serializers=Object.assign(Object.assign({},a.WidgetModel.serializers),{x:c.array_or_json,y:c.array_or_json,z:c.array_or_json,u:c.array_or_json,v:c.array_or_json,triangles:c.array_or_json,lines:c.array_or_json,color:c.color_or_json,color_scale:{deserialize:a.unpack_models},texture:c.texture,volume:{deserialize:a.unpack_models},material:{deserialize:a.unpack_models},line_material:{deserialize:a.unpack_models},popup:{deserialize:a.unpack_models}})},2413:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(8651);class a extends i.WidgetView{constructor(){super(...arguments),this.id_offset=0}onHover(e){const t=e-this.uniforms.id_offset.value;t>=0&&t<this.length?(this.model.set("hovered_index",t),this.model.set("hovered",!0)):(this.model.set("hovered_index",null),this.model.set("hovered",!1)),this.model.save_changes()}onClick(e){const t=e-this.uniforms.id_offset.value;t>=0&&t<this.length?(this.model.set("clicked_index",t),this.model.set("clicked",!0)):(this.model.set("clicked_index",null),this.model.set("clicked",!1)),this.model.save_changes()}async popup(e,t,n,i){const a=e-this.uniforms.id_offset.value;if(a>=0&&a<this.length){const e=this.model.get("popup");e&&(this.popupView||(this.popupView=await this.options.parent.create_child_view(e)),i.contains(this.popupView.el)||(i.innerHTML="",i.appendChild(this.popupView.el)),this.popupView.trigger("displayed"),e.set("description",this.model.get("description")),e.set("value",a),e.set("color",this.model.get("description_color")),e.set("icon",this.model.get("icon")),e.save_changes())}else this.popupView&&i.contains(this.popupView.el)&&(i.innerHTML="")}}t.Object3DView=a},9482:function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const a=i(n(366)),s=n(8174),r=n(3012).default,o=n(3599).Z;function l(e){return e.replace("#include <scales>",r).replace("#include <ipyvolume>",o)}n(3012),t.scaleTypeMap={linear:1,log:2},t.patchMaterial=function(e){e.onBeforeCompile=e=>{e.vertexShader=l(e.vertexShader),e.fragmentShader=l(e.fragmentShader)}},t.patchShader=l,t.createD3Scale=function(e){if("linear"===e.type)return a.scaleLinear().domain(e.domain);if("log"===e.type)return a.scaleLog().domain(e.domain);throw new Error("Scale not supported: "+e)},t.createColormap=function(e){const t=e?e.color_range:["#ff0000","#ff0000"],n=a.scaleLinear().range(t).domain(s.range(t.length).map((e=>e/(t.length-1)))),i=[];for(let e=0;e<256;e++){const t=e/255,s=a.color(String(n(t))).hex(),r=String(s),o=[parseInt("0x"+r.substring(1,3),16),parseInt("0x"+r.substring(3,5),16),parseInt("0x"+r.substring(5,7),16)];i.push(o[0],o[1],o[2])}const r=new Uint8Array(i),o=new THREE.DataTexture(r,256,1,THREE.RGBFormat,THREE.UnsignedByteType);return o.needsUpdate=!0,o}},7439:function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const a=i(n(8651)),s=n(8174),r=i(n(9600)),o=n(414),l=n(2413),c=n(9482),d=i(n(1961)),_=n(6988),h=i(n(3636)),m=n(504),u={"scatter-vertex":n(1514).Z,"scatter-fragment":n(3604).Z};class p extends l.Object3DView{render(){if(this.figure=this.options.parent,this.figure=this.options.parent,!this.figure)throw"Scatter cannot be displayed, should be added to Figure";this.figure.model.on("change:_shaders",(()=>{console.log("updating scatter shader (hot reload)"),this._update_materials()}),this),this.previous_values={},this.attributes_changed={},window.last_scatter=this,this.texture_loader=new r.TextureLoader,this.textures=null,this.model.get("texture")&&this._load_textures();const e=new r.SphereGeometry(1,2,2),t=new r.SphereBufferGeometry(.5,12,12),n=new r.BoxGeometry(1,1,1),i=new r.Geometry;for(const e of m.vertices){const t=new r.Vector3(e[1],e[2],e[0]);i.vertices.push(t)}let a=0;for(;a<m.indices.length;){const e=[];let t=0,n=!1;for(;!n;)e.push(m.indices[a]),t++,m.indices[a]<0&&(n=!0),a++;e[t-1]=-1-e[t-1];for(let t=0;t<e.length-2;t++){const n=new r.Face3(e[0],e[1+t],e[2+t]);i.faces.push(n)}}const o=new r.PlaneGeometry(2,2,1,1),l=new r.PlaneGeometry(.1,.1,1,1),d=new r.CircleGeometry(1,3,Math.PI/2),_=new r.CircleGeometry(1,32,Math.PI/2),h=new r.CylinderBufferGeometry(0,.2,1),u=new r.CylinderGeometry(.5,.5,1),p=new r.CylinderGeometry(.5,.5,1,100);this.geos={diamond:(new r.BufferGeometry).fromGeometry(e),box:(new r.BufferGeometry).fromGeometry(n),arrow:h,cylinder:(new r.BufferGeometry).fromGeometry(u),cylinder_hr:(new r.BufferGeometry).fromGeometry(p),sphere:t,cat:(new r.BufferGeometry).fromGeometry(i),square_2d:(new r.BufferGeometry).fromGeometry(o),point_2d:(new r.BufferGeometry).fromGeometry(l),circle_2d:(new r.BufferGeometry).fromGeometry(_),triangle_2d:(new r.BufferGeometry).fromGeometry(d)},this.uniforms=Object.assign({domain_x:{type:"2f",value:[0,1]},domain_y:{type:"2f",value:[0,1]},domain_z:{type:"2f",value:[0,1]},domain_size_x:{type:"2f",value:[0,1]},domain_size_y:{type:"2f",value:[0,1]},domain_size_z:{type:"2f",value:[0,1]},domain_aux:{type:"2f",value:[0,1]},domain_color:{type:"2f",value:[0,1]},animation_time_x:{type:"f",value:1},animation_time_y:{type:"f",value:1},animation_time_z:{type:"f",value:1},animation_time_aux:{type:"f",value:1},animation_time_vx:{type:"f",value:1},animation_time_vy:{type:"f",value:1},animation_time_vz:{type:"f",value:1},animation_time_size:{type:"f",value:1},animation_time_color:{type:"f",value:1},geo_matrix:{type:"mat4",value:this.model.get("geo_matrix")},aspect:{type:"vec3",value:[1,1,1]},texture:{type:"t",value:null},texture_previous:{type:"t",value:null},colormap:{type:"t",value:null},id_offset:{type:"f",value:0}},r.UniformsUtils.merge([r.UniformsLib.common,r.UniformsLib.lights]));const f=e=>this.model.get(e)?this.model.get(e).obj.clone():new r.ShaderMaterial;this.material=f("material"),this.material_rgb=f("material"),this.material_id=f("material"),this.line_material=f("line_material"),this.line_material_rgb=f("line_material"),this.line_material_id=f("line_material"),this.materials=[this.material,this.material_id,this.material_rgb,this.line_material,this.line_material_id,this.line_material_rgb],this._update_materials(),this.model.get("material")&&this.model.get("material").on("change",(()=>{this._update_materials()})),this.model.get("line_material")&&this.model.get("line_material").on("change",(()=>{this._update_materials()})),this.model.on("change:geo_matrix",(()=>{this.uniforms.geo_matrix.value=this.model.get("geo_matrix"),this._update_materials(),this.figure.update()})),this.model.on("change:shader_snippets",(()=>{this._update_materials(),this.figure.update()})),this._update_color_scale(),this.create_mesh(),this.add_to_scene(),this.model.on("change:size change:size_selected change:color change:color_selected change:sequence_index change:x change:y change:z change:aux change:selected change:vx change:vy change:vz",this.on_change,this),this.model.on("change:geo change:connected",this.update_,this),this.model.on("change:color_scale",this._update_color_scale,this),this.model.on("change:texture",this._load_textures,this),this.model.on("change:visible",this._update_materials,this),this.model.on("change:geo",(()=>{this._update_materials()}));const g=e=>{const t=e+"_scale",n="domain_"+e,i=()=>{const e=this.model.get(t);let i=0,a=100;e&&(null!==e.min&&(i=e.min),null!==e.max&&(a=e.max)),this.uniforms[n].value=[i,a],this.mesh&&this.figure.update()};return i(),()=>{const n=this.model.previous(t),a=this.model.get(t);n&&n.off("domain_changed",i);const r=Object.assign({},this.scale_defines);r[`SCALE_TYPE_${e}`]=c.scaleTypeMap[a?a.type:"linear"];const o=!s.isEqual(this.scale_defines,r);this.scale_defines=r,(!n&&a||n&&!n||o)&&this._update_materials(),a&&(a.on("domain_changed",i,this),i(),this.figure.update())}};["size_x","size_y","size_z","aux"].forEach((e=>{const t=g(e);t(),this.model.on(`change:${e}_scale`,t,this)})),this.model.on("change:material",this._update_materials,this),this.model.on("change:cast_shadow change:receive_shadow",this.update_,this)}_load_textures(){const e=this.model.get("texture");e.stream?(this.textures=null,this.texture_video=document.createElement("video"),e.stream.then((t=>{this.texture_video.src=window.URL.createObjectURL(t),new r.VideoTexture(this.texture_video).minFilter=r.LinearFilter,this.textures=[e],this.update_()}))):this.textures=this.model.get("texture").map((e=>this.texture_loader.load(e,(e=>{e.wrapS=r.RepeatWrapping,e.wrapT=r.RepeatWrapping,this.update_()}))))}set_scales(e){const t=Object.assign({},this.scale_defines);for(const n of Object.keys(e))this.uniforms[`domain_${n}`].value=e[n].domain,t[`SCALE_TYPE_${n}`]=c.scaleTypeMap[e[n].type];s.isEqual(this.scale_defines,t)||(this.scale_defines=t,this._update_materials())}add_to_scene(){this.figure.rootObject.add(this.mesh),this.line_segments&&this.figure.rootObject.add(this.line_segments)}remove_from_scene(){-1===this.figure.rootObject.children.indexOf(this.mesh)&&console.warn("trying to removing scatter mesh from scene that does not include it"),this.figure.rootObject.remove(this.mesh),this.mesh.geometry.dispose(),this.line_segments&&(this.figure.rootObject.remove(this.line_segments),this.line_segments.geometry.dispose())}on_change(){for(const e of Object.keys(this.model.changedAttributes())){this.previous_values[e]=this.model.previous(e);const t=e.replace("_selected","");"sequence_index"===t?["x","y","z","aux","vx","vy","vz","size","color"].forEach((e=>{s.isArray(this.model.get(e))&&(this.attributes_changed[e]=[e,"sequence_index"])})):"geo"===t||("selected"===t?(this.attributes_changed.color=[e],this.attributes_changed.size=[]):(this.attributes_changed[t]=[e],-1!==["x","y","z","aux","vx","vy","vz","color"].indexOf(t)&&(this.attributes_changed.size=[])))}this.update_()}update_(){this.remove_from_scene(),this.create_mesh(),this.add_to_scene(),this.figure.update()}_get_value(e,t,n){return e?s.isArray(e)&&!s.isNumber(e[0])?e[t%e.length]:e:n}get_next(e,t,n){return this._get_value(this.model.get(e),t,n)}get_previous(e,t,n){return this._get_value(this.previous_values[e]||this.model.get(e),t,n)}_get_value_vec3(e,t,n){return e?s.isArray(e)?e[t%e.length]:e:n}get_next_vec3(e,t,n){return this._get_value_vec3(this.model.get(e),t,n)}get_previous_vec3(e,t,n){return this._get_value_vec3(this.previous_values[e]||this.model.get(e),t,n)}_update_color_scale(){const e=this.model.previous("color_scale"),t=this.model.get("color_scale");e&&(e.off("domain_changed",this._update_color_scale_domain),e.off("colors_changed",this._update_color_scale_texture)),(!e&&t||e&&!e)&&this._update_materials(),t&&(t.on("domain_changed",this._update_color_scale_domain,this),t.on("colors_changed",this._update_color_scale_texture,this),this._update_color_scale_texture(),this._update_color_scale_domain(),this.figure.update()),this.mesh&&this.update_()}_update_color_scale_texture(){const e=this.model.get("color_scale");this.uniforms.colormap.value=c.createColormap(e),this.figure.update()}_update_color_scale_domain(){const e=this.model.get("color_scale"),t=this.model.get("color");if(t){let n,i;n=null!==e.min?e.min:Math.min(...t),i=null!==e.max?e.max:Math.max(...t),this.uniforms.domain_color.value=[n,i]}else null!==e.min&&null!==e.max?this.uniforms.domain_color.value=[e.min,e.max]:console.warn("no color set, and color scale does not have a min or max");this.figure.update()}_update_materials(){this.model.get("material")&&this.material.copy(this.model.get("material").obj),this.model.get("material")&&this.material_rgb.copy(this.model.get("material").obj),this.model.get("line_material")&&this.line_material.copy(this.model.get("line_material").obj),this.model.get("line_material")&&(this.line_material_rgb.copy(this.model.get("line_material").obj),this.line_material_rgb.linewidth=this.line_material.linewidth=this.model.get("line_material").obj.linewidth),this.lighting_model=_.materialToLightingModel(this.material);const e=this.model.get("shader_snippets"),t={};for(const n of Object.keys(e))t["SHADER_SNIPPET_"+n.toUpperCase()]=e[n];this.material.defines=Object.assign(Object.assign({USE_COLOR:!0,USE_COLORMAP:null!==this.model.get("color_scale")},this.scale_defines),t),this.material.defines[`AS_${this.lighting_model}`]=!0,this.material.extensions={derivatives:!0},this.material_id.defines=Object.assign(Object.assign({AS_ID:!0,USE_COLOR:!0},this.scale_defines),t),this.material_id.extensions={derivatives:!0},this.material_rgb.defines=Object.assign(Object.assign({AS_COORDINATE:!0,USE_COLOR:!0},this.scale_defines),t),this.material_rgb.extensions={derivatives:!0},this.line_material.defines=Object.assign(Object.assign({IS_LINE:!0,USE_COLOR:!0},this.scale_defines),t),this.line_material.defines[`AS_${this.lighting_model}`]=!0,this.line_material_rgb.defines={AS_COORDINATE:!0,IS_LINE:!0,USE_COLOR:!0},this.line_material_id.defines={AS_ID:!0,IS_LINE:!0,USE_COLOR:!0},this.material.visible=this.material.visible&&this.model.get("visible"),this.material_rgb.visible=this.material.visible&&this.model.get("visible"),this.material_id.visible=this.material.visible&&this.model.get("visible"),this.line_material.visible=this.line_material.visible&&this.model.get("visible"),this.line_material_rgb.visible=this.line_material.visible&&this.model.get("visible"),this.line_material_id.visible=this.line_material.visible&&this.model.get("visible");const n=this.figure.model.get("_shaders")["scatter-vertex"]||u["scatter-vertex"],i=this.figure.model.get("_shaders")["scatter-fragment"]||u["scatter-fragment"],a=.01*Math.random();this.material_depth=new o.MeshDepthMaterialCustom((()=>{const e=Object.assign({},this.material.defines);return delete e[`AS_${this.lighting_model}`],this.model.get("geo").endsWith("2d")&&(e.AS_SPRITE=!0),Object.assign({AS_DEPTH:!0},e)}),this.uniforms,n,i,{depthPacking:r.RGBADepthPacking,alphaTest:.5+a}),this.material_distance=new o.MeshDistanceMaterialCustom((()=>{const e=Object.assign({},this.material.defines);return delete e[`AS_${this.lighting_model}`],this.model.get("geo").endsWith("2d")&&(e.AS_SPRITE=!0),Object.assign({AS_DISTANCE:!0},e)}),this.uniforms,n,i,{alphaTest:.5+a}),this.materials.forEach((e=>{e.onBeforeCompile=e=>{e.vertexShader=c.patchShader(n),e.fragmentShader=c.patchShader(i),e.uniforms=Object.assign(Object.assign({},e.uniforms),this.uniforms)},e.alphaTest=.5+a,e.needsUpdate=!0,e.lights=!0,this.model.get("aux")&&(e.defines.USE_AUX=!0)}));const s=this.model.get("geo").endsWith("2d");s&&(this.material.defines.USE_SPRITE=!0,this.material_rgb.defines.USE_SPRITE=!0,this.material_id.defines.USE_SPRITE=!0),s&&this.model.get("texture")&&this.textures&&(this.material.defines.USE_TEXTURE=!0),this.material.needsUpdate=!0,this.material_rgb.needsUpdate=!0,this.material_id.needsUpdate=!0,this.line_material.needsUpdate=!0,this.line_material_rgb.needsUpdate=!0,this.line_material_id.needsUpdate=!0,this.mesh&&(this.mesh.customDepthMaterial=this.material_depth,this.mesh.customDistanceMaterial=this.material_distance),this.figure.update()}create_mesh(){let e=this.model.get("geo");e||(e="diamond");const t=e.endsWith("2d"),n=this.geos[e],i=new r.InstancedBufferGeometry,a=n.attributes.position.clone();i.addAttribute("position",a),n.index&&(i.index=n.index),i.computeVertexNormals();const s=this.model.get("sequence_index");let o=this.previous_values.sequence_index;void 0===o&&(o=s);const l=["x","y","z","aux","vx","vy","vz","size","size_selected"],c=[];this.model.get("color_scale")?l.push("color","color_selected"):c.push("color","color_selected");const d=new h.Values(l,[],this.get_next.bind(this),s,c),_=new h.Values(l,[],this.get_previous.bind(this),o,c);0===Math.max(d.length,_.length)&&console.error("no single member is an array, not supported (yet?)"),d.trim(d.length),_.trim(_.length);const m=_.length,u=d.length;if(this.model.get("selected")||this.previous_values.selected){d.ensure_array(["size","size_selected","color","color_selected"]),_.ensure_array(["size","size_selected","color","color_selected"]);let e=this.get_next("selected",s,[]);d.select(e),e=this.get_previous("selected",o,[]),_.select(e)}d.length!==_.length&&(d.ensure_array("size"),_.ensure_array("size")),d.length>_.length?(_.pad(d),_.array.size.fill(0,m)):d.length<_.length&&(d.pad(_),d.array.size.fill(0,u)),this.length=d.length,d.merge_to_vec3(["vx","vy","vz"],"v"),_.merge_to_vec3(["vx","vy","vz"],"v"),d.pop(["size_selected","color_selected"]),_.pop(["size_selected","color_selected"]),d.add_attributes(i,"_next"),_.add_attributes(i,"_previous");const p=new Float32Array(d.length);for(let e=0;e<d.length;e++)p[e]=e;const f=new r.InstancedBufferAttribute(p,1,!1,1);if(i.addAttribute("instance_id",f),t&&this.model.get("texture")&&this.textures&&(this.material.uniforms.texture.value=this.textures[s%this.textures.length],this.material.uniforms.texture_previous.value=this.textures[o%this.textures.length]),this.mesh=new r.Mesh(i,this.material),this.mesh.castShadow=this.model.get("cast_shadow"),this.mesh.receiveShadow=this.model.get("receive_shadow"),this.mesh.customDepthMaterial=this.material_depth,this.mesh.customDistanceMaterial=this.material_distance,this.mesh.material_id=this.material_id,this.mesh.material_rgb=this.material_rgb,this.mesh.material_normal=this.material,this.model.get("connected")){const e=new r.BufferGeometry;d.merge_to_vec3(["x","y","z"],"vertices"),_.merge_to_vec3(["x","y","z"],"vertices"),e.addAttribute("position",new r.BufferAttribute(d.array_vec3.vertices,3)),e.addAttribute("position_previous",new r.BufferAttribute(_.array_vec3.vertices,3)),d.ensure_array(["color"]),_.ensure_array(["color"]),this.model.get("color_scale")?(e.addAttribute("color_next",new r.BufferAttribute(d.array.color,1)),e.addAttribute("color_previous",new r.BufferAttribute(_.array.color,1))):(e.addAttribute("color_next",new r.BufferAttribute(d.array_vec4.color,4)),e.addAttribute("color_previous",new r.BufferAttribute(_.array_vec4.color,4))),e.computeVertexNormals(),this.line_segments=new r.Line(e,this.line_material),this.line_segments.frustumCulled=!1,this.line_segments.castShadow=this.model.get("cast_shadow"),this.line_segments.receiveShadow=this.model.get("receive_shadow")}else this.line_segments=null;for(const e of Object.keys(this.attributes_changed)){const t=this.attributes_changed[e],n="animation_time_"+e,i=()=>{t.forEach((e=>{delete this.previous_values[e]}))},a=e=>{this.uniforms[n].value=e};this.figure.transition(a,i,this)}this.attributes_changed={}}}t.ScatterView=p;class f extends a.WidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"ScatterModel",_view_name:"ScatterView",_model_module:"ipyvolume",_view_module:"ipyvolume",_model_module_version:_.semver_range,_view_module_version:_.semver_range,size:5,size_selected:7,color:"red",color_scale:null,color_selected:"white",geo:"diamond",geo_matrix:[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],sequence_index:0,connected:!1,visible:!0,selected:null,shader_snippets:{size:"\n"},cast_shadow:!0,receive_shadow:!0})}}t.ScatterModel=f,f.serializers=Object.assign(Object.assign({},a.WidgetModel.serializers),{x:d.array_or_json,y:d.array_or_json,z:d.array_or_json,aux:d.array_or_json,aux_scale:{deserialize:a.unpack_models},vx:d.array_or_json,vy:d.array_or_json,vz:d.array_or_json,selected:d.array_or_json,size:d.array_or_json,size_selected:d.array_or_json,size_x_scale:{deserialize:a.unpack_models},size_y_scale:{deserialize:a.unpack_models},size_z_scale:{deserialize:a.unpack_models},color:d.color_or_json,color_scale:{deserialize:a.unpack_models},color_selected:d.color_or_json,texture:d.texture,material:{deserialize:a.unpack_models},line_material:{deserialize:a.unpack_models},popup:{deserialize:a.unpack_models}})},7414:(e,t)=>{"use strict";function n(e,t,n){return[e[0]/t*2-1,1-e[1]/n*2]}Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){this.canvas=e,this.points=[]}mouseMove(e,t){this.points.push([e,t])}close(){this.canvas.getContext("2d").clearRect(0,0,this.canvas.width,this.canvas.height)}draw(){const e=this.canvas.getContext("2d");e.clearRect(0,0,this.canvas.width,this.canvas.height),e.lineWidth=1.5,e.strokeStyle="rgba(255, 0, 0, 1)",e.fillStyle="rgba(255, 0, 0, 0.5)",e.beginPath();for(const t of this.points)e.lineTo(t[0],t[1]);e.closePath(),e.fill(),e.stroke()}getData(e,t){return{type:"lasso",pixel:this.points,device:this.points.map((i=>n(i,e,t)))}}}t.LassoSelector=i;class a{constructor(e){this.canvas=e,this.points=[],this.begin=null,this.end=null}mouseMove(e,t){this.begin?this.end=[e,t]:this.begin=[e,t]}close(){this.canvas.getContext("2d").clearRect(0,0,this.canvas.width,this.canvas.height),this.begin=null,this.end=null}draw(){if(this.begin&&this.end){const e=this.canvas.getContext("2d");e.clearRect(0,0,this.canvas.width,this.canvas.height),e.lineWidth=1.5,e.strokeStyle="rgba(255, 0, 0, 1)",e.fillStyle="rgba(255, 0, 0, 0.5)",e.beginPath();const t=this.begin[0]-this.end[0],n=this.begin[1]-this.end[1],i=Math.sqrt(t*t+n*n);e.arc(this.begin[0],this.begin[1],i,0,2*Math.PI),e.fill(),e.stroke()}}getData(e,t){return{type:"circle",pixel:{begin:this.begin,end:this.end},device:{begin:n(this.begin,e,t),end:n(this.end,e,t)}}}}t.CircleSelector=a;class s{constructor(e){this.canvas=e,this.points=[],this.begin=null,this.end=null}mouseMove(e,t){this.begin?this.end=[e,t]:this.begin=[e,t]}close(){this.canvas.getContext("2d").clearRect(0,0,this.canvas.width,this.canvas.height),this.begin=null,this.end=null}draw(){if(this.begin&&this.end){const e=this.canvas.getContext("2d");e.clearRect(0,0,this.canvas.width,this.canvas.height),e.lineWidth=1.5,e.strokeStyle="rgba(255, 0, 0, 1)",e.fillStyle="rgba(255, 0, 0, 0.5)",e.beginPath(),e.rect(this.begin[0],this.begin[1],this.end[0]-this.begin[0],this.end[1]-this.begin[1]),e.fill(),e.stroke()}}getData(e,t){return{type:"rectangle",pixel:{begin:this.begin,end:this.end},device:{begin:n(this.begin,e,t),end:n(this.end,e,t)}}}}t.RectangleSelector=s,t.selectors={lasso:i,circle:a,rectangle:s}},1961:function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(n(8651)),r=n(8174),o=a(n(5995)),l=i(n(9600)),c=i(n(6988)),d={int8:Int8Array,int16:Int16Array,int32:Int32Array,uint8:Uint8Array,uint16:Uint16Array,uint32:Uint32Array,float32:Float32Array,float64:Float64Array},_={Int8Array:"int8",Int16Array:"int16",Int32Array:"int32",Uint8Array:"uint8",Uint16Array:"uint16",Uint32Array:"uint32",Float32Array:"float32",Float64Array:"float64"};function h(e,t){const n=d[e.dtype];return null==e&&console.log("data is null"),e.data||console.log("data.data is null"),e.data.buffer||console.log("data.data.buffer is null"),new n(e.data.buffer)}function m(e,t){if(null==e)return null;let n=null;return r.isNumber(e)?e:(n=e.map((e=>h(e))),n.original_data=e,n)}function u(e,t){if(null==e)return null;let n=null;function i(e){const t=new Float32Array(3*e.length);for(let n=0;n<e.length;n++){const i=new l.Color(e[n]);t[3*n+0]=i.r,t[3*n+1]=i.g,t[3*n+2]=i.b}return t}if("string"==typeof e)return e;if(void 0!==e.dtype)n=[h(e)];else if(void 0!==e[0].dtype)n=e.map((e=>h(e)));else{const t=c.get_array_dimension(e);1===t&&"string"==typeof e[0]?n=i(e):2===t&&"string"==typeof e[0][0]?n=e.map(i):console.error("don't understand color type")}return n.original_data=e,n}function p(e,t){return r.isNumber(e)?e:null!=e?void 0===e.original_data?e:e.original_data:null}t.deserialize_array_or_json=m,t.deserialize_color_or_json=u,t.serialize_array_or_json=p,t.texture={deserialize:function(e,t){return"string"==typeof e&&e.startsWith("IPY_MODEL_")?s.unpack_models(e,t):e},serialize:function(e,t){return e}},t.array_or_json={deserialize:m,serialize:p},t.color_or_json={deserialize:u,serialize:p};const f={deserialize:function(e,t){return null===e?null:o.default(h(e),e.shape)},serialize:function(e,t){if(null===e)return null;let i=e;return r.isArray(e)&&!e.data&&(i=n(1251)(e)),{data:i.data.buffer,dtype:_[i.data.constructor.name],shape:i.shape}}};t.ndarray=f},7868:function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(n(8651)),r=a(n(1251)),o=i(n(1961)),l=n(6988);class c extends s.DOMWidgetView{render(){this.img=document.createElement("img"),this.img.setAttribute("src",this.model.get("rgba")),this.img.setAttribute("style",this.model.get("style")),this.model.on("change:rgba",(function(){this.img.setAttribute("src",this.model.get("rgba"))}),this),this.model.on("change:style",(function(){this.img.setAttribute("style",this.model.get("style"))}),this),this.el.appendChild(this.img)}}t.TransferFunctionView=c;class d extends s.DOMWidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"TransferFunctionModel",_view_name:"TransferFunctionView",_model_module:"ipyvolume",_view_module:"ipyvolume",_model_module_version:l.semver_range,_view_module_version:l.semver_range,rgba:null})}get_data_array(){const e=[],t=this.get("rgba");for(let n=0;n<t.shape[0];n++)for(let i=0;i<4;i++)e.push(255*t.get(n,i));return new Uint8Array(e)}}t.TransferFunctionModel=d,d.serializers=Object.assign(Object.assign({},s.WidgetModel.serializers),{rgba:o.ndarray}),t.TransferFunctionJsBumpsModel=class extends d{constructor(...e){super(...e),this.on("change:levels",this.recalculate_rgba,this),this.on("change:opacities",this.recalculate_rgba,this),this.on("change:widths",this.recalculate_rgba,this),this.recalculate_rgba()}defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"TransferFunctionJsBumpsModel",levels:[.1,.5,.8],opacities:[.01,.05,.1],widths:[.1,.1,.1]})}recalculate_rgba(){const e=[],t=[[1,0,0],[0,1,0],[0,0,1]],n=this.get("levels"),i=this.get("widths"),a=this.get("opacities");window.rgba=e,window.tfjs=this;for(let s=0;s<256;s++){const r=s/255,o=[0,0,0,0];for(let e=0;e<n.length;e++){const s=t[e],l=Math.exp(-Math.pow(r-n[e],2)/Math.pow(i[e],2));for(let t=0;t<3;t++)o[t]+=s[t]*l*a[e];o[3]+=l*a[e]}let l=o[0];for(let e=1;e<3;e++)l=Math.max(l,o[e]);for(let e=0;e<3;e++)o[e]=Math.min(1,o[e]/l);o[3]=Math.min(1,o[3]),e.push(o)}this.set("rgba",e),this.save_changes()}},t.TransferFunctionWidgetJs3Model=class extends d{constructor(...e){super(...e),this.on("change:level1",this.recalculate_rgba,this),this.on("change:level2",this.recalculate_rgba,this),this.on("change:level3",this.recalculate_rgba,this),this.on("change:opacity1",this.recalculate_rgba,this),this.on("change:opacity2",this.recalculate_rgba,this),this.on("change:opacity3",this.recalculate_rgba,this),this.on("change:width1",this.recalculate_rgba,this),this.on("change:width2",this.recalculate_rgba,this),this.on("change:width3",this.recalculate_rgba,this),this.recalculate_rgba()}defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"TransferFunctionWidgetJs3Model",level1:.1,level2:.5,level3:.8,opacity1:.01,opacity2:.05,opacity3:.1,width1:.1,width2:.1,width3:.1})}recalculate_rgba(){let e=[];const t=[[1,0,0],[0,1,0],[0,0,1]],n=[this.get("level1"),this.get("level2"),this.get("level3")],i=[this.get("width1"),this.get("width2"),this.get("width3")],a=[this.get("opacity1"),this.get("opacity2"),this.get("opacity3")];for(let s=0;s<256;s++){const r=s/255,o=[0,0,0,0];for(let e=0;e<3;e++){const s=t[e],l=Math.exp(-Math.pow(r-n[e],2)/Math.pow(i[e],2));for(let t=0;t<3;t++)o[t]+=s[t]*l*a[e];o[3]+=l*a[e]}let l=o[0];for(let e=1;e<3;e++)l=Math.max(l,o[e]);for(let e=0;e<3;e++)o[e]=Math.min(1,o[e]/l);o[3]=Math.min(1,o[3]),e.push(o)}e=r.default(e),this.set("rgba",e),this.save_changes()}}},3641:()=>{THREE.CombinedCamera=function(e,t,n,i,a,s,r){THREE.Camera.call(this),this.fov=n,this.far=a,this.near=i,this.left=-e/2,this.right=e/2,this.top=t/2,this.bottom=-t/2,this.aspect=e/t,this.zoom=1,this.view=null,this.cameraO=new THREE.OrthographicCamera(e/-2,e/2,t/2,t/-2,s,r),this.cameraP=new THREE.PerspectiveCamera(n,e/t,i,a),this.toPerspective()},THREE.CombinedCamera.prototype=Object.create(THREE.Camera.prototype),THREE.CombinedCamera.prototype.constructor=THREE.CombinedCamera,THREE.CombinedCamera.prototype.toPerspective=function(){this.near=this.cameraP.near,this.far=this.cameraP.far,this.cameraP.aspect=this.aspect,this.cameraP.fov=this.fov/this.zoom,this.cameraP.view=this.view,this.cameraP.updateProjectionMatrix(),this.projectionMatrix=this.cameraP.projectionMatrix,this.inPerspectiveMode=!0,this.inOrthographicMode=!1},THREE.CombinedCamera.prototype.toOrthographic=function(){var e=this.fov,t=this.cameraP.aspect,n=(this.cameraP.near+this.cameraP.far)/2,i=Math.tan(e*Math.PI/180/2)*n,a=i*t;i/=this.zoom,a/=this.zoom,this.cameraO.left=-a,this.cameraO.right=a,this.cameraO.top=i,this.cameraO.bottom=-i,this.cameraO.view=this.view,this.cameraO.updateProjectionMatrix(),this.near=this.cameraO.near,this.far=this.cameraO.far,this.projectionMatrix=this.cameraO.projectionMatrix,this.inPerspectiveMode=!1,this.inOrthographicMode=!0},THREE.CombinedCamera.prototype.copy=function(e){return THREE.Camera.prototype.copy.call(this,e),this.fov=e.fov,this.far=e.far,this.near=e.near,this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this.aspect=e.aspect,this.cameraO.copy(e.cameraO),this.cameraP.copy(e.cameraP),this.inOrthographicMode=e.inOrthographicMode,this.inPerspectiveMode=e.inPerspectiveMode,this},THREE.CombinedCamera.prototype.setViewOffset=function(e,t,n,i,a,s){this.view={fullWidth:e,fullHeight:t,offsetX:n,offsetY:i,width:a,height:s},this.inPerspectiveMode?(this.aspect=e/t,this.toPerspective()):this.toOrthographic()},THREE.CombinedCamera.prototype.clearViewOffset=function(){this.view=null,this.updateProjectionMatrix()},THREE.CombinedCamera.prototype.setSize=function(e,t){this.cameraP.aspect=e/t,this.left=-e/2,this.right=e/2,this.top=t/2,this.bottom=-t/2},THREE.CombinedCamera.prototype.setFov=function(e){this.fov=e,this.inPerspectiveMode?this.toPerspective():this.toOrthographic()},THREE.CombinedCamera.prototype.updateProjectionMatrix=function(){this.inPerspectiveMode?this.toPerspective():(this.toPerspective(),this.toOrthographic())},THREE.CombinedCamera.prototype.setLens=function(e,t){void 0===t&&(t=35);var n=.5*t/(e*Math.max(this.cameraP.aspect,1)),i=2*THREE.Math.RAD2DEG*Math.atan(n);return this.setFov(i),i},THREE.CombinedCamera.prototype.setZoom=function(e){this.zoom=e,this.inPerspectiveMode?this.toPerspective():this.toOrthographic()},THREE.CombinedCamera.prototype.toFrontView=function(){this.rotation.x=0,this.rotation.y=0,this.rotation.z=0},THREE.CombinedCamera.prototype.toBackView=function(){this.rotation.x=0,this.rotation.y=Math.PI,this.rotation.z=0},THREE.CombinedCamera.prototype.toLeftView=function(){this.rotation.x=0,this.rotation.y=-Math.PI/2,this.rotation.z=0},THREE.CombinedCamera.prototype.toRightView=function(){this.rotation.x=0,this.rotation.y=Math.PI/2,this.rotation.z=0},THREE.CombinedCamera.prototype.toTopView=function(){this.rotation.x=-Math.PI/2,this.rotation.y=0,this.rotation.z=0},THREE.CombinedCamera.prototype.toBottomView=function(){this.rotation.x=Math.PI/2,this.rotation.y=0,this.rotation.z=0}},6066:()=>{THREE.DeviceOrientationControls=function(e){var t=this;this.object=e,this.object.rotation.reorder("YXZ"),this.enabled=!0,this.deviceOrientation={},this.screenOrientation=0,this.alpha=0,this.alphaOffsetAngle=0;var n,i,a,s,r=function(e){t.deviceOrientation=e},o=function(){t.screenOrientation=window.orientation||0},l=(n=new THREE.Vector3(0,0,1),i=new THREE.Euler,a=new THREE.Quaternion,s=new THREE.Quaternion(-Math.sqrt(.5),0,0,Math.sqrt(.5)),function(e,t,r,o,l){i.set(r,t,-o,"YXZ"),e.setFromEuler(i),e.multiply(s),e.multiply(a.setFromAxisAngle(n,-l))});this.connect=function(){o(),window.addEventListener("orientationchange",o,!1),window.addEventListener("deviceorientation",r,!1),t.enabled=!0},this.disconnect=function(){window.removeEventListener("orientationchange",o,!1),window.removeEventListener("deviceorientation",r,!1),t.enabled=!1},this.update=function(){if(!1!==t.enabled){var e=t.deviceOrientation.alpha?THREE.Math.degToRad(t.deviceOrientation.alpha)+this.alphaOffsetAngle:0,n=t.deviceOrientation.beta?THREE.Math.degToRad(t.deviceOrientation.beta):0,i=t.deviceOrientation.gamma?THREE.Math.degToRad(t.deviceOrientation.gamma):0,a=t.screenOrientation?THREE.Math.degToRad(t.screenOrientation):0;l(t.object.quaternion,e,n,i,a),this.alpha=e}},this.updateAlphaOffsetAngle=function(e){this.alphaOffsetAngle=e,this.update()},this.dispose=function(){this.disconnect()},this.connect()}},7501:()=>{THREE.OrbitControls=function(e,t){var n,i,a,s,r;this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.target=new THREE.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:THREE.MOUSE.LEFT,ZOOM:THREE.MOUSE.MIDDLE,PAN:THREE.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return u.phi},this.getAzimuthalAngle=function(){return u.theta},this.reset=function(){o.target.copy(o.target0),o.object.position.copy(o.position0),o.object.zoom=o.zoom0,o.object.updateProjectionMatrix(),o.dispatchEvent(l),o.update(),h=_.NONE},this.update=(n=new THREE.Vector3,i=(new THREE.Quaternion).setFromUnitVectors(e.up,new THREE.Vector3(0,1,0)),a=i.clone().inverse(),s=new THREE.Vector3,r=new THREE.Quaternion,function(){var e=o.object.position;return n.copy(e).sub(o.target),n.applyQuaternion(i),u.setFromVector3(n),o.autoRotate&&h===_.NONE&&L(2*Math.PI/60/60*o.autoRotateSpeed),u.theta+=p.theta,u.phi+=p.phi,u.theta=Math.max(o.minAzimuthAngle,Math.min(o.maxAzimuthAngle,u.theta)),u.phi=Math.max(o.minPolarAngle,Math.min(o.maxPolarAngle,u.phi)),u.makeSafe(),u.radius*=f,u.radius=Math.max(o.minDistance,Math.min(o.maxDistance,u.radius)),o.target.add(g),n.setFromSpherical(u),n.applyQuaternion(a),e.copy(o.target).add(n),o.object.lookAt(o.target),!0===o.enableDamping?(p.theta*=1-o.dampingFactor,p.phi*=1-o.dampingFactor):p.set(0,0,0),f=1,g.set(0,0,0),!!(v||s.distanceToSquared(o.object.position)>m||8*(1-r.dot(o.object.quaternion))>m)&&(o.dispatchEvent(l),s.copy(o.object.position),r.copy(o.object.quaternion),v=!1,!0)}),this.dispose=function(){o.domElement.removeEventListener("contextmenu",G,!1),o.domElement.removeEventListener("mousedown",I,!1),o.domElement.removeEventListener("wheel",N,!1),o.domElement.removeEventListener("touchstart",V,!1),o.domElement.removeEventListener("touchend",Y,!1),o.domElement.removeEventListener("touchmove",B,!1),document.removeEventListener("mousemove",F,!1),document.removeEventListener("mouseup",U,!1),window.removeEventListener("keydown",H,!1)};var o=this,l={type:"change"},c={type:"start"},d={type:"end"},_={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},h=_.NONE,m=1e-6,u=new THREE.Spherical,p=new THREE.Spherical,f=1,g=new THREE.Vector3,v=!1,x=new THREE.Vector2,b=new THREE.Vector2,y=new THREE.Vector2,E=new THREE.Vector2,w=new THREE.Vector2,S=new THREE.Vector2,A=new THREE.Vector2,C=new THREE.Vector2,T=new THREE.Vector2;function O(){return Math.pow(.95,o.zoomSpeed)}function L(e){p.theta-=e}function M(e){p.phi-=e}var z,D=(z=new THREE.Vector3,function(e,t){z.setFromMatrixColumn(t,0),z.multiplyScalar(-e),g.add(z)}),k=function(){var e=new THREE.Vector3;return function(t,n){e.setFromMatrixColumn(n,1),e.multiplyScalar(t),g.add(e)}}(),R=function(){var e=new THREE.Vector3;return function(t,n){var i=o.domElement===document?o.domElement.body:o.domElement;if(o.object instanceof THREE.PerspectiveCamera){var a=o.object.position;e.copy(a).sub(o.target);var s=e.length();s*=Math.tan(o.object.fov/2*Math.PI/180),D(2*t*s/i.clientHeight,o.object.matrix),k(2*n*s/i.clientHeight,o.object.matrix)}else o.object instanceof THREE.OrthographicCamera?(D(t*(o.object.right-o.object.left)/o.object.zoom/i.clientWidth,o.object.matrix),k(n*(o.object.top-o.object.bottom)/o.object.zoom/i.clientHeight,o.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),o.enablePan=!1)}}();function P(e){o.object instanceof THREE.PerspectiveCamera?f/=e:o.object instanceof THREE.OrthographicCamera?(o.object.zoom=Math.max(o.minZoom,Math.min(o.maxZoom,o.object.zoom*e)),o.object.updateProjectionMatrix(),v=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),o.enableZoom=!1)}function j(e){o.object instanceof THREE.PerspectiveCamera?f*=e:o.object instanceof THREE.OrthographicCamera?(o.object.zoom=Math.max(o.minZoom,Math.min(o.maxZoom,o.object.zoom/e)),o.object.updateProjectionMatrix(),v=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),o.enableZoom=!1)}function I(e){if(!1!==o.enabled){if(e.preventDefault(),e.button===o.mouseButtons.ORBIT){if(!1===o.enableRotate)return;!function(e){x.set(e.clientX,e.clientY)}(e),h=_.ROTATE}else if(e.button===o.mouseButtons.ZOOM){if(!1===o.enableZoom)return;!function(e){A.set(e.clientX,e.clientY)}(e),h=_.DOLLY}else if(e.button===o.mouseButtons.PAN){if(!1===o.enablePan)return;!function(e){E.set(e.clientX,e.clientY)}(e),h=_.PAN}h!==_.NONE&&(document.addEventListener("mousemove",F,!1),document.addEventListener("mouseup",U,!1),o.dispatchEvent(c))}}function F(e){if(!1!==o.enabled)if(e.preventDefault(),h===_.ROTATE){if(!1===o.enableRotate)return;!function(e){b.set(e.clientX,e.clientY),y.subVectors(b,x);var t=o.domElement===document?o.domElement.body:o.domElement;L(2*Math.PI*y.x/t.clientWidth*o.rotateSpeed),M(2*Math.PI*y.y/t.clientHeight*o.rotateSpeed),x.copy(b),o.update()}(e)}else if(h===_.DOLLY){if(!1===o.enableZoom)return;!function(e){C.set(e.clientX,e.clientY),T.subVectors(C,A),T.y>0?P(O()):T.y<0&&j(O()),A.copy(C),o.update()}(e)}else if(h===_.PAN){if(!1===o.enablePan)return;!function(e){w.set(e.clientX,e.clientY),S.subVectors(w,E),R(S.x,S.y),E.copy(w),o.update()}(e)}}function U(e){!1!==o.enabled&&(document.removeEventListener("mousemove",F,!1),document.removeEventListener("mouseup",U,!1),o.dispatchEvent(d),h=_.NONE)}function N(e){!1===o.enabled||!1===o.enableZoom||h!==_.NONE&&h!==_.ROTATE||(e.preventDefault(),e.stopPropagation(),function(e){e.deltaY<0?j(O()):e.deltaY>0&&P(O()),o.update()}(e),o.dispatchEvent(c),o.dispatchEvent(d))}function H(e){!1!==o.enabled&&!1!==o.enableKeys&&!1!==o.enablePan&&function(e){switch(e.keyCode){case o.keys.UP:R(0,o.keyPanSpeed),o.update();break;case o.keys.BOTTOM:R(0,-o.keyPanSpeed),o.update();break;case o.keys.LEFT:R(o.keyPanSpeed,0),o.update();break;case o.keys.RIGHT:R(-o.keyPanSpeed,0),o.update()}}(e)}function V(e){if(!1!==o.enabled){switch(e.touches.length){case 1:if(!1===o.enableRotate)return;!function(e){x.set(e.touches[0].pageX,e.touches[0].pageY)}(e),h=_.TOUCH_ROTATE;break;case 2:if(!1===o.enableZoom)return;!function(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+n*n);A.set(0,i)}(e),h=_.TOUCH_DOLLY;break;case 3:if(!1===o.enablePan)return;!function(e){E.set(e.touches[0].pageX,e.touches[0].pageY)}(e),h=_.TOUCH_PAN;break;default:h=_.NONE}h!==_.NONE&&o.dispatchEvent(c)}}function B(e){if(!1!==o.enabled)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(!1===o.enableRotate)return;if(h!==_.TOUCH_ROTATE)return;!function(e){b.set(e.touches[0].pageX,e.touches[0].pageY),y.subVectors(b,x);var t=o.domElement===document?o.domElement.body:o.domElement;L(2*Math.PI*y.x/t.clientWidth*o.rotateSpeed),M(2*Math.PI*y.y/t.clientHeight*o.rotateSpeed),x.copy(b),o.update()}(e);break;case 2:if(!1===o.enableZoom)return;if(h!==_.TOUCH_DOLLY)return;!function(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+n*n);C.set(0,i),T.subVectors(C,A),T.y>0?j(O()):T.y<0&&P(O()),A.copy(C),o.update()}(e);break;case 3:if(!1===o.enablePan)return;if(h!==_.TOUCH_PAN)return;!function(e){w.set(e.touches[0].pageX,e.touches[0].pageY),S.subVectors(w,E),R(S.x,S.y),E.copy(w),o.update()}(e);break;default:h=_.NONE}}function Y(e){!1!==o.enabled&&(o.dispatchEvent(d),h=_.NONE)}function G(e){e.preventDefault()}o.domElement.addEventListener("contextmenu",G,!1),o.domElement.addEventListener("mousedown",I,!1),o.domElement.addEventListener("wheel",N,!1),o.domElement.addEventListener("touchstart",V,!1),o.domElement.addEventListener("touchend",Y,!1),o.domElement.addEventListener("touchmove",B,!1),window.addEventListener("keydown",H,!1),this.update()},THREE.OrbitControls.prototype=Object.create(THREE.EventDispatcher.prototype),THREE.OrbitControls.prototype.constructor=THREE.OrbitControls,Object.defineProperties(THREE.OrbitControls.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=e}}})},6166:()=>{THREE.StereoEffect=function(e){var t=new THREE.StereoCamera;t.aspect=.5,this.setEyeSeparation=function(e){t.eyeSep=e},this.setSize=function(t,n){e.setSize(t,n)},this.render=function(n,i){n.updateMatrixWorld(),null===i.parent&&i.updateMatrixWorld(),t.update(i);var a=e.getSize();e.autoClear&&e.clear(),e.setScissorTest(!0),e.setScissor(0,0,a.width/2,a.height),e.setViewport(0,0,a.width/2,a.height),e.render(n,t.cameraL),e.setScissor(a.width/2,0,a.width/2,a.height),e.setViewport(a.width/2,0,a.width/2,a.height),e.render(n,t.cameraR),e.setScissorTest(!1)}}},2403:()=>{var e=e||{};window.THREEx=e,e.FullScreen=e.FullScreen||{},e.FullScreen.available=function(){return this._hasWebkitFullScreen||this._hasMozFullScreen},e.FullScreen.activated=function(){return this._hasWebkitFullScreen?document.webkitIsFullScreen:this._hasMozFullScreen?document.mozFullScreen:void console.assert(!1)},e.FullScreen.request=function(e){e=e||document.body,this._hasWebkitFullScreen?e.webkitRequestFullScreen():this._hasMozFullScreen?e.mozRequestFullScreen():console.assert(!1)},e.FullScreen.cancel=function(){this._hasWebkitFullScreen?document.webkitCancelFullScreen():this._hasMozFullScreen?document.mozCancelFullScreen():console.assert(!1)},e.FullScreen.element=function(){return document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement},e.FullScreen.addFullScreenChangeListener=function(e){document.addEventListener("webkitfullscreenchange",e,!1),document.addEventListener("mozfullscreenchange",e,!1),document.addEventListener("fullscreenchange",e,!1),document.addEventListener("MSFullscreenChange",e,!1)},e.FullScreen.removeFullScreenChangeListener=function(e){document.removeEventListener("webkitfullscreenchange",e,!1),document.removeEventListener("mozfullscreenchange",e,!1),document.removeEventListener("fullscreenchange",e,!1),document.removeEventListener("MSFullscreenChange",e,!1)},e.FullScreen._hasWebkitFullScreen="webkitCancelFullScreen"in document,e.FullScreen._hasMozFullScreen="mozCancelFullScreen"in document},8890:()=>{THREE.TrackballControls=function(e,t){var n=this,i=-1;this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.screen={left:0,top:0,width:0,height:0},this.rotateSpeed=1,this.zoomSpeed=1.2,this.panSpeed=.3,this.noRotate=!1,this.noZoom=!1,this.noPan=!1,this.staticMoving=!1,this.dynamicDampingFactor=.2,this.minDistance=0,this.maxDistance=1/0,this.keys=[65,83,68],this.target=new THREE.Vector3;var a=new THREE.Vector3,s=i,r=i,o=new THREE.Vector3,l=new THREE.Vector2,c=new THREE.Vector2,d=new THREE.Vector3,_=0,h=new THREE.Vector2,m=new THREE.Vector2,u=0,p=0,f=new THREE.Vector2,g=new THREE.Vector2;this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.up0=this.object.up.clone();var v={type:"change"},x={type:"start"},b={type:"end"};this.handleResize=function(){if(this.domElement===document)this.screen.left=0,this.screen.top=0,this.screen.width=window.innerWidth,this.screen.height=window.innerHeight;else{var e=this.domElement.getBoundingClientRect(),t=this.domElement.ownerDocument.documentElement;this.screen.left=e.left+window.pageXOffset-t.clientLeft,this.screen.top=e.top+window.pageYOffset-t.clientTop,this.screen.width=e.width,this.screen.height=e.height}},this.handleEvent=function(e){"function"==typeof this[e.type]&&this[e.type](e)};var y,E,w,S,A,C,T,O,L,M,z,D=(y=new THREE.Vector2,function(e,t){var i=n.domElement===document?n.domElement.body:n.domElement;return y.set(e/i.clientWidth,t/i.clientHeight),y}),k=(new THREE.Vector2,function(e,t){return D(2*e*Math.PI,2*-t*Math.PI)});function R(e){!1!==n.enabled&&(window.removeEventListener("keydown",R),r=s,s===i&&(e.keyCode!==n.keys[0]||n.noRotate?e.keyCode!==n.keys[1]||n.noZoom?e.keyCode!==n.keys[2]||n.noPan||(s=2):s=1:s=0))}function P(e){!1!==n.enabled&&(s=r,window.addEventListener("keydown",R,!1))}function j(e){!1!==n.enabled&&(e.preventDefault(),e.stopPropagation(),s===i&&(s=e.button),0!==s||n.noRotate?1!==s||n.noZoom?2!==s||n.noPan||(f.copy(D(e.pageX,e.pageY)),g.copy(f)):(h.copy(D(e.pageX,e.pageY)),m.copy(h)):(c.copy(k(e.pageX,e.pageY)),l.copy(c)),document.addEventListener("mousemove",I,!1),document.addEventListener("mouseup",F,!1),n.dispatchEvent(x))}function I(e){!1!==n.enabled&&(e.preventDefault(),e.stopPropagation(),0!==s||n.noRotate?1!==s||n.noZoom?2!==s||n.noPan||g.copy(D(e.pageX,e.pageY)):m.copy(D(e.pageX,e.pageY)):(l.copy(c),c.copy(k(e.pageX,e.pageY))),n.update())}function F(e){!1!==n.enabled&&(e.preventDefault(),e.stopPropagation(),s=i,document.removeEventListener("mousemove",I),document.removeEventListener("mouseup",F),n.dispatchEvent(b))}function U(e){if(!1!==n.enabled){switch(e.preventDefault(),e.stopPropagation(),e.deltaMode){case 2:h.y-=.025*e.deltaY;break;case 1:h.y-=.01*e.deltaY;break;default:h.y-=25e-5*e.deltaY}n.dispatchEvent(x),n.dispatchEvent(b),n.update()}}function N(e){if(!1!==n.enabled){switch(e.touches.length){case 1:s=3,c.copy(k(e.touches[0].pageX,e.touches[0].pageY)),l.copy(c);break;default:s=4;var t=e.touches[0].pageX-e.touches[1].pageX,i=e.touches[0].pageY-e.touches[1].pageY;p=u=Math.sqrt(t*t+i*i);var a=(e.touches[0].pageX+e.touches[1].pageX)/2,r=(e.touches[0].pageY+e.touches[1].pageY)/2;f.copy(D(a,r)),g.copy(f)}n.dispatchEvent(x)}}function H(e){if(!1!==n.enabled){switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:l.copy(c),c.copy(k(e.touches[0].pageX,e.touches[0].pageY));break;default:var t=e.touches[0].pageX-e.touches[1].pageX,i=e.touches[0].pageY-e.touches[1].pageY;p=Math.sqrt(t*t+i*i);var a=(e.touches[0].pageX+e.touches[1].pageX)/2,s=(e.touches[0].pageY+e.touches[1].pageY)/2;g.copy(D(a,s))}n.update()}}function V(e){if(!1!==n.enabled){switch(e.touches.length){case 0:s=i;break;case 1:s=3,c.copy(k(e.touches[0].pageX,e.touches[0].pageY)),l.copy(c)}n.dispatchEvent(b),n.update()}}function B(e){e.preventDefault()}this.rotateCamera=(w=new THREE.Vector3,S=new THREE.Quaternion,A=new THREE.Vector3,C=new THREE.Vector3,T=new THREE.Vector3,O=new THREE.Vector3,function(){O.set(c.x-l.x,c.y-l.y,0),(E=O.length())?(o.copy(n.object.position).sub(n.target),A.copy(o).normalize(),C.copy(n.object.up).normalize(),T.crossVectors(C,A).normalize(),C.setLength(c.y-l.y),T.setLength(c.x-l.x),O.copy(C.add(T)),w.crossVectors(O,o).normalize(),E*=n.rotateSpeed,S.setFromAxisAngle(w,E),o.applyQuaternion(S),n.object.up.applyQuaternion(S),d.copy(w),_=E):!n.staticMoving&&_&&(_*=Math.sqrt(1-n.dynamicDampingFactor),o.copy(n.object.position).sub(n.target),S.setFromAxisAngle(d,_),o.applyQuaternion(S),n.object.up.applyQuaternion(S)),l.copy(c)}),this.zoomCamera=function(){var e;4===s?(e=u/p,u=p,o.multiplyScalar(e)):(1!=(e=1+(m.y-h.y)*n.zoomSpeed)&&e>0&&o.multiplyScalar(e),n.staticMoving?h.copy(m):h.y+=(m.y-h.y)*this.dynamicDampingFactor)},this.panCamera=(L=new THREE.Vector2,M=new THREE.Vector3,z=new THREE.Vector3,function(){L.copy(g).sub(f),L.lengthSq()&&(L.multiplyScalar(o.length()*n.panSpeed),z.copy(o).cross(n.object.up).setLength(L.x),z.add(M.copy(n.object.up).setLength(L.y)),n.object.position.add(z),n.target.add(z),n.staticMoving?f.copy(g):f.add(L.subVectors(g,f).multiplyScalar(n.dynamicDampingFactor)))}),this.checkDistances=function(){n.noZoom&&n.noPan||(o.lengthSq()>n.maxDistance*n.maxDistance&&(n.object.position.addVectors(n.target,o.setLength(n.maxDistance)),h.copy(m)),o.lengthSq()<n.minDistance*n.minDistance&&(n.object.position.addVectors(n.target,o.setLength(n.minDistance)),h.copy(m)))},this.update=function(){o.subVectors(n.object.position,n.target),n.noRotate||n.rotateCamera(),n.noZoom||n.zoomCamera(),n.noPan||n.panCamera(),n.object.position.addVectors(n.target,o),n.checkDistances(),n.object.lookAt(n.target),a.distanceToSquared(n.object.position)>1e-6&&(n.dispatchEvent(v),a.copy(n.object.position))},this.reset=function(){s=i,r=i,n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.up.copy(n.up0),o.subVectors(n.object.position,n.target),n.object.lookAt(n.target),a.copy(n.object.position)},this.dispose=function(){this.domElement.removeEventListener("contextmenu",B,!1),this.domElement.removeEventListener("mousedown",j,!1),this.domElement.removeEventListener("wheel",U,!1),this.domElement.removeEventListener("touchstart",N,!1),this.domElement.removeEventListener("touchend",V,!1),this.domElement.removeEventListener("touchmove",H,!1),document.removeEventListener("mousemove",I,!1),document.removeEventListener("mouseup",F,!1),window.removeEventListener("keydown",R,!1),window.removeEventListener("keyup",P,!1)},this.domElement.addEventListener("contextmenu",B,!1),this.domElement.addEventListener("mousedown",j,!1),this.domElement.addEventListener("wheel",U,!1),this.domElement.addEventListener("touchstart",N,!1),this.domElement.addEventListener("touchend",V,!1),this.domElement.addEventListener("touchmove",H,!1),window.addEventListener("keydown",R,!1),window.addEventListener("keyup",P,!1),this.handleResize(),this.update()},THREE.TrackballControls.prototype=Object.create(THREE.EventDispatcher.prototype),THREE.TrackballControls.prototype.constructor=THREE.TrackballControls},9697:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Transition=class{constructor(e,t,n,i=1){this.on_done=t,this.on_animation=e,this.animation_exponent=i,this.duration=n,this.time_start=(new Date).getTime(),this.cancelled=!1,this.called_on_done=!1}is_done(){return(new Date).getTime()-this.time_start>=this.duration||this.cancelled}cancel(){this.cancelled=!0}update(){if(this.cancelled)return;const e=((new Date).getTime()-this.time_start)/this.duration;let t=Math.min(1,e);t=Math.pow(t,this.animation_exponent),this.on_animation(t),e>=1&&!this.called_on_done&&(this.called_on_done=!0,this.on_done())}}},6988:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=i(n(4600));function s(e){if(document.body.createTextRange){const t=document.body.createTextRange();t.moveToElementText(e),t.select()}else if(window.getSelection){const t=window.getSelection(),n=document.createRange();n.selectNodeContents(e),t.removeAllRanges(),t.addRange(n)}}t.semver_range=n(306).version,t.is_typedarray=function(e){return a.default(e)},t.is_arraybuffer=function(e){return ArrayBuffer.isView(e)},t.get_array_dimension=function(e){let t=0;for(;void 0!==e[0];)e=e[0],t+=1;return t},t.download_image=function(e){const t=document.createElement("a");if(t.download="ipyvolume.png",t.href=e,document.createEvent){const e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}else t.fireEvent&&t.fireEvent("onclick")},t.select_text=s,t.copy_image_to_clipboard=function(e){const t=document.createElement("img");t.contentEditable="true",t.src=e;const n=document.createElement("div");n.contentEditable="true",n.appendChild(t),document.body.appendChild(n),s(t),document.execCommand("Copy"),document.body.removeChild(n)},t.materialToLightingModel=function(e){return"MeshPhysicalMaterial"===e.type?"PHYSICAL":"MeshLambertMaterial"===e.type?"LAMBERT":"MeshPhongMaterial"===e.type?"PHONG":"DEFAULT"}},3636:function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const a=n(8174),s=i(n(9600)),r=i(n(6988));class o{constructor(e,t,n,i,a=[]){this.length=1/0,this.scalar={},this.scalar_vec3={},this.scalar_vec4={},this.array={},this.array_vec3={},this.array_vec4={},this.values={};for(const t of e){const e=n(t,i,o.defaults[t]);r.is_typedarray(e)?("selected"!==t&&(this.length=Math.min(this.length,e.length)),this.array[t]=e):this.scalar[t]=e,this.values[t]=e}for(const e of t){let t=n(e,i,o.defaults[e]);if(-1!==e.indexOf("color")&&"string"==typeof t){const e=new s.Color(t);t=new Float32Array([e.r,e.g,e.b])}r.is_typedarray(t)&&t.length>3?(this.array_vec3[e]=t,this.length=Math.min(this.length,t.length/3)):this.scalar_vec3[e]=t,this.values[e]=t}for(const e of a){let t=n(e,i,o.defaults[e]);if(-1!==e.indexOf("color")&&"string"==typeof t){const e=new s.Color(t);t=new Float32Array([e.r,e.g,e.b,1])}r.is_typedarray(t)&&t.length>4?(this.array_vec4[e]=t,this.length=Math.min(this.length,t.length/4)):this.scalar_vec4[e]=t,this.values[e]=t}this.length==1/0&&(this.length=1)}trim(e){this.array=a.mapValues(this.array,(t=>t.length===e?t:t.slice(0,e))),this.array_vec3=a.mapValues(this.array_vec3,(t=>t.length===3*e?t:t.slice(0,3*e))),this.array_vec4=a.mapValues(this.array_vec4,(t=>t.length===4*e?t:t.slice(0,4*e))),this.length=e}ensure_array(e){const t=a.isArray(e)?e:[e];for(const e of t){void 0!==this.scalar[e]&&((this.array[e]=new Float32Array(this.length)).fill(this.scalar[e]),delete this.scalar[e],delete this.values[e]);const t=this.scalar_vec3[e],n=this.scalar_vec4[e];if(void 0!==t){const n=this.array_vec3[e]=new Float32Array(3*this.length);for(let e=0;e<this.length;e++)n[3*e+0]=t[0],n[3*e+1]=t[1],n[3*e+2]=t[2];delete this.scalar_vec3[e],delete this.values[e]}if(void 0!==n){this.array_vec4[e]=new Float32Array(4*this.length);const t=this.array_vec4[e];for(let e=0;e<this.length;e++)t[4*e+0]=n[0],t[4*e+1]=n[1],t[4*e+2]=n[2],t[4*e+3]=n[3];delete this.scalar_vec4[e],delete this.values[e]}}}grow(e){this.array=a.mapValues(this.array,(t=>{const n=new t.constructor(e);return n.set(t),n})),this.array_vec3=a.mapValues(this.array_vec3,(t=>{const n=new t.constructor(3*e);return n.set(t),n})),this.length=length}pad(e){this.array=a.mapValues(this.array,((t,n)=>{const i=new t.constructor(e.length);return void 0===e.array[n]?i.fill(e.scalar[n],this.length):i.set(e.array[n].slice(this.length),this.length),i.set(t),i})),this.array_vec3=a.mapValues(this.array_vec3,((t,n)=>{const i=new t.constructor(3*e.length);if(void 0===e.array_vec3[n]){const t=e.scalar_vec3[n];for(let n=this.length;n<e.length;n++)i[3*n+0]=t[0],i[3*n+1]=t[1],i[3*n+2]=t[2]}else i.set(e.array_vec3[n].slice(3*this.length),3*this.length);return i.set(t),i})),this.array_vec4=a.mapValues(this.array_vec4,((t,n)=>{const i=new t.constructor(4*e.length);if(void 0===e.array_vec4[n]){const t=e.scalar_vec4[n];for(let n=this.length;n<e.length;n++)i[4*n+0]=t[0],i[4*n+1]=t[1],i[4*n+2]=t[2],i[4*n+3]=t[3]}else i.set(e.array_vec4[n].slice(4*this.length),4*this.length);return i.set(t),i})),this.length=e.length}select(e){const t=this.array.size=this.array.size.slice(),n=this.array.size_selected,i=this.array_vec4.color=this.array_vec4.color.slice(),a=this.array_vec4.color_selected;e.forEach(((e,s)=>{s<this.length&&(t[s]=n[s],i[4*s+0]=a[4*s+0],i[4*s+1]=a[4*s+1],i[4*s+2]=a[4*s+2],i[4*s+3]=a[4*s+3])}))}merge_to_vec3(e,t){const n=e.length,i=new Float32Array(this.length*n);e.forEach(((e,t)=>{this.ensure_array(e);const a=this.array[e];for(let e=0;e<this.length;e++)i[e*n+t]=a[e];delete this.array[e],delete this.values[e]})),this.array_vec3[t]=i}pop(e){(a.isArray(e)?e:[e]).forEach(((e,t)=>{[this.scalar,this.scalar_vec3,this.array,this.array_vec3].forEach((t=>{void 0!==t[e]&&delete t[e]}))}))}add_attributes(e,t=""){t=t,a.forOwn(this.array,((n,i)=>{if(-1===i.indexOf("selected")){const a=new s.InstancedBufferAttribute(n,1,!1,1);e.addAttribute(i+t,a)}})),a.forOwn(this.array_vec3,((n,i)=>{if(-1===i.indexOf("selected")){const a=new s.InstancedBufferAttribute(n,3,!1,1);a.normalized=-1!==i.indexOf("color"),e.addAttribute(i+t,a)}})),a.forOwn(this.array_vec4,((n,i)=>{if(-1===i.indexOf("selected")){const a=new s.InstancedBufferAttribute(n,4,!1,1);a.normalized=-1!==i.indexOf("color"),e.addAttribute(i+t,a)}})),a.forOwn(this.scalar,((n,i)=>{if(-1===i.indexOf("selected")){const a=new s.InstancedBufferAttribute(new Float32Array([n]),1,!1,this.length);e.addAttribute(i+t,a)}})),a.forOwn(this.scalar_vec3,((n,i)=>{if(-1===i.indexOf("selected")){const a=new s.InstancedBufferAttribute(n,3,!1,this.length);a.normalized=-1!==i.indexOf("color"),e.addAttribute(i+t,a)}})),a.forOwn(this.scalar_vec4,((n,i)=>{if(-1===i.indexOf("selected")){const a=new s.InstancedBufferAttribute(n,4,!1,this.length);a.normalized=-1!==i.indexOf("color"),e.addAttribute(i+t,a)}}))}}t.Values=o,o.defaults={vx:0,vy:1,vz:0,x:0,y:0,z:0,size:0}},2981:function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const a=i(n(8651)),s=n(8174),r=i(n(9600)),o=n(9482),l=n(6988),c={box_fragment:n(4633).Z,box_vertex:n(3897).Z};class d extends a.WidgetView{render(){this.renderer=this.options.parent,this.attributes_changed={},this.data=[],this.renderer.getRenderSize(),this.texture_loader=new r.TextureLoader,this.tf_set(),this.data_set();const e=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};this.model.on("change:rendering_method",e),e(),this.model.on("change:data",this.data_set,this);const t=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};this.model.on("change:data_min change:data_max change:show_min change:show_max",t,this),t();const n=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};this.model.on("change:clamp_min change:clamp_max",n,this),n();const i=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};i(),this.model.on("change:opacity_scale",i);const a=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};a(),this.model.on("change:lighting",a);const s=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};s(),this.model.on("change:ray_steps",s);const o=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};o(),this.model.on("change:brightness",o),this.model.on("change:tf",this.tf_set,this),this.model.on("change:extent",(()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()}));const l=()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()};l(),this.model.get("material").on("change",l),this.model.on("change:visible",(()=>{this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()})),window.last_volume=this}get_ray_steps(){let e=this.model.get("ray_steps");return null==e&&(e=s.max(this.data_shape)),e}data_set(){this.volume=this.model.volume,this.texture_volume=this.model.texture_volume,this.data_shape=[this.volume.slice_shape[0],this.volume.slice_shape[1],this.volume.slices],this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()}tf_set(){this.model.get("tf")&&(this.model.get("tf").on("change:rgba",this.tf_changed,this),this.tf_changed())}tf_changed(){this.renderer.rebuild_multivolume_rendering_material(),this.renderer.update()}set_scales(e){this.model.set_scales(e)}}t.VolumeView=d;class _ extends a.WidgetModel{initialize(e,t){super.initialize(e,t);const n=()=>{if(this.volume=this.get("data"),!this.volume)return;const e=new Uint8Array(this.volume.tiles.buffer);this.texture_volume=new r.DataTexture(e,this.volume.image_shape[0],this.volume.image_shape[1],r.RGBAFormat,r.UnsignedByteType),this.texture_volume.magFilter=r.LinearFilter,this.texture_volume.minFilter=r.LinearFilter,this.uniform_volumes_values.rows=this.volume.rows,this.uniform_volumes_values.columns=this.volume.columns,this.uniform_volumes_values.slices=this.volume.slices,this.uniform_volumes_values.size=this.volume.image_shape,this.uniform_volumes_values.slice_size=this.volume.slice_shape,this.uniform_volumes_values.data_range=[this.get("data_min"),this.get("data_max")],this.uniform_volumes_values.show_range=[this.get("show_min"),this.get("show_max")],this.texture_volume.needsUpdate=!0,this.uniform_data.value=[this.texture_volume],this.uniform_data.value=[this.texture_volume]};this.on("change:data",(()=>{n()})),this.uniform_volumes_values={scale:[1,1,1],offset:[0,0,0]},this.uniform_data={type:"tv",value:[]},n(),this.on("change:data_min change:data_max change:show_min change:show_max",(()=>{this.uniform_volumes_values.data_range=[this.get("data_min"),this.get("data_max")],this.uniform_volumes_values.show_range=[this.get("show_min"),this.get("show_max")]}),this);const i=()=>{this.uniform_volumes_values.clamp_min=this.get("clamp_min"),this.uniform_volumes_values.clamp_max=this.get("clamp_max")};this.on("change:clamp_min change:clamp_max",i,this),i();const a=()=>{this.uniform_volumes_values.opacity_scale=this.get("opacity_scale")};a(),this.on("change:opacity_scale",a);const s=()=>{this.uniform_volumes_values.lighting=this.get("lighting")};s(),this.on("change:lighting",s);const o=()=>{this.uniform_volumes_values.brightness=this.get("brightness")};o(),this.on("change:brightness",o);const l=()=>{const e=this.get("material").obj,t=new r.Color("white");this.uniform_volumes_values.diffuseColor=e.color||t,this.uniform_volumes_values.specular=e.specular||t,this.uniform_volumes_values.shininess=e.shininess||t,this.uniform_volumes_values.emissive=e.emissive||t};l(),this.get("material").on("change",l),this.box_material=new r.ShaderMaterial({uniforms:{offset:{type:"3f",value:[0,0,0]},scale:{type:"3f",value:[1,1,1]}},fragmentShader:c.box_fragment,vertexShader:c.box_vertex,side:r.BackSide}),this.vol_box_mesh=new r.Mesh(this.vol_box_geo,this.box_material),this.vol_box_mesh.name="Box for "+this.get("description"),this.vol_box_geo=new r.BoxBufferGeometry(1,1,1),this.vol_box_mesh.isVolume=!0,this.vol_box_mesh.updateMatrix(),this.vol_box_mesh.matrixAutoUpdate=!0,this.uniform_transfer_function={type:"tv",value:[]},this.on("change:tf",this.tf_set,this),this.tf_set()}tf_set(){this.get("tf")&&(this.get("tf").on("change:rgba",this.tf_changed,this),this.tf_changed())}tf_changed(){const e=this.get("tf");e&&(this.texture_tf=new r.DataTexture(e.get_data_array(),e.get("rgba").shape[0],1,r.RGBAFormat,r.UnsignedByteType),this.texture_tf.needsUpdate=!0,this.uniform_transfer_function.value=[this.texture_tf])}is_max_intensity(){return"MAX_INTENSITY"===this.get("rendering_method")}is_normal(){return"NORMAL"===this.get("rendering_method")}set_scales(e){const t=o.createD3Scale(e.x).range([0,1]),n=o.createD3Scale(e.y).range([0,1]),i=o.createD3Scale(e.z).range([0,1]),a=this.get("extent"),s=t(a[0][0]),l=t(a[0][1]),c=n(a[1][0]),d=n(a[1][1]),_=i(a[2][0]),h=i(a[2][1]),m=Math.max(s,0),u=Math.min(l,1),p=Math.max(c,0),f=Math.min(d,1),g=Math.max(_,0),v=Math.min(h,1);this.box_geo=new r.BoxBufferGeometry(1,1,1),this.box_geo.translate(.5,.5,.5),this.box_geo.scale(u-m,f-p,v-g),this.box_geo.translate(m,p,g),this.box_geo.translate(-.5,-.5,-.5),this.vol_box_mesh.geometry=this.box_geo,this.uniform_volumes_values.scale=[1/(l-s),1/(d-c),1/(h-_)],this.uniform_volumes_values.offset=[-s,-c,-_]}add_to_scene(e){e.add(this.vol_box_mesh)}remove_from_scene(e){e.remove(this.vol_box_mesh)}defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:"VolumeModel",_view_name:"VolumeView",_model_module:"ipyvolume",_view_module:"ipyvolume",_model_module_version:l.semver_range,_view_module_version:l.semver_range,sequence_index:0,step_size:.01,opacity_scale:1,brightness:1,extent:null,lighting:!0,rendering_method:"NORMAL",clamp_min:!1,clamp_max:!1,data_range:null,show_range:null,show_min:0,show_max:1,data_min:0,data_max:1,ray_steps:null,material:null,visible:!0})}}t.VolumeModel=_,_.serializers=Object.assign(Object.assign({},a.WidgetModel.serializers),{tf:{deserialize:a.unpack_models},data:{serialize:e=>e},material:{deserialize:a.unpack_models}})},3612:(e,t,n)=>{(e.exports=n(9252)(!1)).push([e.id,"a.ipyvolume-toolicon  {\n    text-align: center;\n    padding: 2px 2px; /* Some top and bottom padding */\n    color: #1867c0;\n    position: relative;\n    display: inline-block;\n}\n\n.fa-inactive {\n    opacity: 0.3;\n}\n.fa-disabled {\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n\n.ipyvolume-toolicon-inactive {\n    opacity: 0.3;\n}\n\n.ipyvolume-toolicon:hover .ipyvolume-toolicon-dropdown-container {\n\tdisplay: block;\n}\n.ipyvolume-toolicon-dropdown-container  {\n\tdisplay: none;\n\tposition: absolute;\n\tz-index: 10;\n\tmin-width: 200px;\n\tbackground-color: #999;\n\tbox-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n\tbackground-color: #f9f9f9;\n\tpadding-left: 2px;\n\tfont-family: Verdana, Geneva, Tahoma, sans-serif;\n\n}\n.ipyvolume-toolicon-dropdown  {\n\ttext-align: left;\n\tdisplay: block;\n}\n\n.ipyvolume-popup-container {\n\tposition: absolute;\n\tz-index: 3;\n\twhite-space: nowrap;\n}\n\n.ipyvolume-canvas-container {\n\tposition: relative;\n\tmargin: 5px; /* otherwise we get scrollbars */\n}\n\n/* the default is white */\n.ipyvolume-popup-container > .p-Widget > .vuetify-styles > .v-application {\n\tbackground-color: unset;\n}\n",""])},9252:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,i=e[1]||"",a=e[3];if(!a)return i;if(t&&"function"==typeof btoa){var s=(n=a,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),r=a.sources.map((function(e){return"/*# sourceURL="+a.sourceRoot+e+" */"}));return[i].concat(r).concat([s]).join("\n")}return[i].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},a=0;a<this.length;a++){var s=this[a][0];"number"==typeof s&&(i[s]=!0)}for(a=0;a<e.length;a++){var r=e[a];"number"==typeof r[0]&&i[r[0]]||(n&&!r[2]?r[2]=n:n&&(r[2]="("+r[2]+") and ("+n+")"),t.push(r))}},t}},4633:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="varying vec4 vertex_color;\n\nvoid main(void) {\n    gl_FragColor = vertex_color;\n}\n"},3897:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="varying vec4 vertex_color;\nuniform vec3 scale;\nuniform vec3 offset;\n\nvoid main(void) {\n    vec3 pos = position;\n    gl_Position = projectionMatrix *\n                modelViewMatrix *\n                vec4(pos,1.0);\n    //vertex_color = vec4((pos + vec3(0.5, 0.5, 0.5))*scale + offset, 1);\n    vertex_color = vec4((pos + vec3(0.5, 0.5, 0.5)), 1);\n}\n"},3599:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="struct Volume\n{\n    float opacity_scale;\n    float brightness;\n    vec2 data_range;\n    vec2 show_range;\n    float rows;\n    float columns;\n    float slices;\n    vec2 size;\n    vec2 slice_size;\n    bool clamp_min;\n    bool clamp_max;\n    vec3 scale;\n    vec3 offset;\n    bool lighting;\n\n    // phong lighting models parameters\n    vec3 diffuseColor;\n    vec3 specular;\n    vec3 emissive;\n    float shininess;\n};\n\nvec2 compute_slice_offset(float slice, float columns, vec2 uv_slice_spacing) {\n    float column = floor((slice+0.5) / (columns));\n    float row = slice - column * columns;\n    return uv_slice_spacing * vec2(row, column);\n}\n\nvec4 sample_as_3d_texture(sampler2D tex, vec2 tex_size, vec3 texCoord, vec2 slice_size, float slices, float rows, float columns) {\n  float slice   = texCoord.z*slices*(slices-1.)/slices ;\n  float slice_z  = floor(slice);\n  float slice_z_offset = fract(slice);\n\n  vec2 pixel = 1./tex_size;\n  vec2 uv_slice_spacing = slice_size/tex_size;\n\n  vec2 coord = vec2(texCoord.x, texCoord.y);\n  vec2 uv = pixel * 0.5 + coord * (uv_slice_spacing - pixel);\n\n  vec2 slice0_offset = compute_slice_offset(slice_z, columns, uv_slice_spacing);\n  vec2 slice1_offset = compute_slice_offset(slice_z + 1.0, columns, uv_slice_spacing);\n\n  vec4 slice0_color = texture2D(tex, slice0_offset + uv);\n  vec4 slice1_color = texture2D(tex, slice1_offset + uv);\n  return mix(slice0_color, slice1_color, slice_z_offset);\n}"},1624:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="#include <ipyvolume>\n\n#ifdef USE_VOLUME\nuniform sampler2D volume_texture;\nuniform sampler2D transfer_function;\nuniform Volume volume;\n#endif //USE_VOLUME\n\n\n// mesh-fragment shader\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\nvarying vec4 vertex_color;\nvarying vec3 vertex_position;\nvarying vec2 vertex_uv;\nvarying vec3 vPositionEye;\n\n#ifdef USE_TEXTURE\n    uniform sampler2D texture;\n    uniform sampler2D texture_previous;\n    uniform float animation_time_texture;\n#endif\n\n    // taken similar to phong shading\n    #include <common>\n    #include <packing>\n    #include <dithering_pars_fragment>\n    #include <color_pars_fragment>\n    #include <uv_pars_fragment>\n    #include <uv2_pars_fragment>\n    #include <map_pars_fragment>\n    #include <alphamap_pars_fragment>\n    #include <aomap_pars_fragment>\n    #include <lightmap_pars_fragment>\n    #include <emissivemap_pars_fragment>\n    #include <envmap_pars_fragment>\n    #include <gradientmap_pars_fragment>\n    #include <fog_pars_fragment>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    // #include <lights_phong_pars_fragment>\n    #include <shadowmap_pars_fragment>\n    #include <shadowmask_pars_fragment> // extra compared to phong\n\n    #include <bumpmap_pars_fragment>\n    #include <normalmap_pars_fragment>\n    #include <specularmap_pars_fragment>\n    #include <logdepthbuf_pars_fragment>\n    #include <clipping_planes_pars_fragment>\n    void main(void)\n    {\n        #if defined( AS_COORDINATE ) || defined( AS_ID )\n            // should we ignore shading for RGB pass?\n            gl_FragColor = vec4(vertex_color.rgb, 1.0);\n        #else\n            // 0 when in shadow, 1 if visible\n            float shadow_visibility = getShadowMask();\n            #ifdef IS_LINE\n                gl_FragColor = vec4(vertex_color.rgb * shadow_visibility, vertex_color.a);\n            #else\n                vec3 fdx = dFdx( vPositionEye );\n                vec3 fdy = dFdy( vPositionEye );\n                vec3 normal = normalize( cross( fdx, fdy ) );\n                float diffuse = dot( normal, vec3( 0.0, 0.0, 1.0 ) );\n\n                #if defined(USE_TEXTURE)\n                    vec4 sample = mix(texture2D(texture_previous, vertex_uv), texture2D(texture, vertex_uv), animation_time_texture);\n                    gl_FragColor = vec4(clamp(diffuse, 0.2, 1.) * sample.rgb * shadow_visibility, 1.0);\n                #elif defined(USE_VOLUME)\n\t\t\t\t\tvec3 sample_position = vertex_position*volume.scale + vec3(0.5, 0.5, 0.5);\n\t\t\t\t\tvec4 sample = sample_as_3d_texture(volume_texture, volume.size, sample_position, volume.slice_size, volume.slices, volume.rows, volume.columns);\n\n\t\t\t\t\t// quite similar to volr-fragment.glsl\n\t\t\t\t\tfloat raw_data_value = sample.a;\n\t\t\t\t\tfloat scaled_data_value = (raw_data_value*(volume.data_range[1] - volume.data_range[0])) + volume.data_range[0];\n\t\t\t\t\tfloat data_value = (scaled_data_value - volume.show_range[0])/(volume.show_range[1] - volume.show_range[0]);\n\t\t\t\t\tvec4 color_sample = texture2D(transfer_function, vec2(data_value, 0.5));\n\n\t\t\t\t\t// TODO: 30 should be configurable\n\t\t\t\t\tgl_FragColor.rgb = color_sample.rgb * volume.brightness * color_sample.a * 30.;\n\t\t\t\t\tgl_FragColor.a = 1.;\n                #else\n                    gl_FragColor = vec4(clamp(diffuse, 0.2, 1.) * vertex_color.rgb * shadow_visibility, vertex_color.a);\n                #endif // USE_TEXTURE / USE_VOLUME\n            #endif // IS_LINE\n        #endif // defined( AS_COORDINATE ) || defined( AS_ID )\n    }\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n\n\n\n#ifdef AS_LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\n\n#ifdef DOUBLE_SIDED\n\n\tvarying vec3 vLightBack;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\n\t#include <lightmap_fragment>\n\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\n\t#else\n\n\t\treflectedLight.directDiffuse = vLightFront;\n\n\t#endif\n\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n    #define PHYSICAL\n    uniform vec3 diffuse;\n    uniform vec3 emissive;\n    uniform float roughness;\n    uniform float metalness;\n    uniform float opacity;\n    uniform float emissiveIntensity;\n\n    #ifndef STANDARD\n        uniform float clearCoat;\n        uniform float clearCoatRoughness;\n    #endif\n\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <packing>\n    #include <dithering_pars_fragment>\n    #include <color_pars_fragment>\n    #include <uv_pars_fragment>\n    #include <uv2_pars_fragment>\n    #include <map_pars_fragment>\n    #include <alphamap_pars_fragment>\n    #include <aomap_pars_fragment>\n    #include <lightmap_pars_fragment>\n    #include <emissivemap_pars_fragment>\n    #include <bsdfs>\n    #include <cube_uv_reflection_fragment>\n    #include <envmap_pars_fragment>\n    #include <envmap_physical_pars_fragment>\n    #include <fog_pars_fragment>\n    #include <lights_pars_begin>\n    #include <lights_physical_pars_fragment>\n    #include <shadowmap_pars_fragment>\n    #include <bumpmap_pars_fragment>\n    #include <normalmap_pars_fragment>\n    #include <roughnessmap_pars_fragment>\n    #include <metalnessmap_pars_fragment>\n    #include <logdepthbuf_pars_fragment>\n    #include <clipping_planes_pars_fragment>\n\nvoid main(void)\n{\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0, 1.0, 1.0, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive * emissiveIntensity;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_PHYSICAL\n#ifdef AS_DISTANCE\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n#endif//AS_DISTANCE\n\n#ifdef AS_DEPTH\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\n\t#endif\n\n}\n#endif //AS_DEPTH\n"},1367:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="// mesh-vertex shader\n#define USE_SCALE_X\n#define USE_SCALE_Y\n#define USE_SCALE_Z\n#include <scales>\n#include <ipyvolume>\n\n\n // for animation, all between 0 and 1\nuniform float animation_time_x;\nuniform float animation_time_y;\nuniform float animation_time_z;\nuniform float animation_time_u;\nuniform float animation_time_v;\nuniform float animation_time_color;\n\nuniform vec2 domain_x;\nuniform vec2 domain_y;\nuniform vec2 domain_z;\n\nvarying vec4 vertex_color;\nvarying vec3 vertex_position;\nvarying vec3 vPositionEye;\n\nattribute vec3 position_previous;\nuniform vec3 position_offset;\n\n#ifdef USE_TEXTURE\n    attribute float u;\n    attribute float v;\n    attribute float u_previous;\n    attribute float v_previous;\n    varying vec2 vertex_uv;\n#endif\n\n#ifdef USE_COLORMAP\n    attribute float color_current;\n    attribute float color_previous;\n    uniform vec2 domain_color;\n#else\n    attribute vec4 color_current;\n    attribute vec4 color_previous;\n#endif\nuniform sampler2D colormap;\n\nuniform float id_offset;\n\nvec4 encodeId(float v) {\n    vec4 color;\n    // matches Figure.readId\n    color.b = floor(v / 256.0 / 256.0);\n    color.g = floor((v - color.b * 256.0 * 256.0) / 256.0);\n    color.r = floor(v - color.b * 256.0 * 256.0 - color.g * 256.0);\n    color.a = 255.0;\n    // normalize\n    return color / 255.0;\n}\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    // similar to phong\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n\n#ifdef AS_LAMBERT\n    #define LAMBERT\n    varying vec3 vLightFront;\n\n    #ifdef DOUBLE_SIDED\n        varying vec3 vLightBack;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_LAMBERT\n\n#ifdef AS_PHONG\n    #define PHONG\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_PHONG\n\n#ifdef AS_PHYSICAL\n    #define PHYSICAL\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DEPTH\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_DEPTH\n#ifdef AS_DISTANCE\n    #define DISTANCE\n\n    varying vec3 vWorldPosition;\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_DISTANCE\n\nvoid main(void) {\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    #include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n#ifdef AS_LAMBERT\n    #include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\t    vNormal = normalize( transformedNormal );\n    #endif\n\n\t#include <begin_vertex>\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\t    vNormal = normalize( transformedNormal );\n    #endif\n\n\t#include <begin_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DEPTH\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n#endif //AS_DEPTH\n#ifdef AS_DISTANCE\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n#endif //AS_DISTANCE\n\n    vec3 animation_time = vec3(animation_time_x, animation_time_y, animation_time_z);\n    vec3 animated_position = mix(position_previous, position, animation_time) + position_offset;\n\n    transformed = vec3(SCALE_X(animated_position.x), SCALE_Y(animated_position.y), SCALE_Z(animated_position.z));\n    vertex_position = transformed;\n    // gl_Position = projectionMatrix *\n    //             modelViewMatrix *\n    //             vec4(model_pos, 1.0);\n    // vec3 positionEye = ( modelViewMatrix * vec4(model_pos, 1.0 ) ).xyz;\n    // vertex_position = positionEye;\n\n    #if defined( AS_COORDINATE )\n        // vertex_color = vec4(model_pos + vec3(0.5, 0.5, 0.5), 1.0);\n        vertex_color = vec4(transformed + vec3(0.5, 0.5, 0.5), 1.0);\n    #elif defined( AS_ID )\n        vertex_color = encodeId(id_offset);\n    #else\n        #ifdef USE_COLORMAP\n            float color_animated = mix(color_previous, color_current, animation_time_color);\n            float color_index = scale_transform_linear(color_animated, vec2(0.0, 1.0), domain_color);\n            vertex_color = texture2D(colormap, vec2(color_index, 0));\n        #else\n            vertex_color = mix(color_previous, color_current, animation_time_color);\n        #endif\n    #endif\n\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( transformed, 1.0 );;\n    // vec3 model_pos = vec3(SCALE_X(animated_position.x), SCALE_Y(animated_position.y), SCALE_Z(animated_position.z));\n    // gl_Position = projectionMatrix *\n    //             modelViewMatrix *\n    //             vec4(model_pos, 1.0);\n    // vec3 positionEye = ( modelViewMatrix * vec4(model_pos, 1.0 ) ).xyz;\n    // vertex_position = positionEye;\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n\n#ifdef USE_TEXTURE\n    vertex_uv = vec2(mix(u_previous, u, animation_time_u), mix(v_previous, v, animation_time_v));\n#endif\n\n    #if defined(USE_COLOR) && !(defined(AS_DEPTH) || defined(AS_DISTANCE))\n        vColor = vertex_color.rgb;\n    #endif\n\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n    vec3 positionEye = ( modelViewMatrix * vec4(transformed, 1.0 ) ).xyz;\n    vPositionEye = positionEye;\n\t// #include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n#ifdef AS_LAMBERT\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DISTANCE\n    #include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n#endif //AS_DISTANCE\n#ifdef AS_DEPTH\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#endif //AS_DEPTH\n}\n"},3012:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});const i="#define SCALE_TYPE_LINEAR 1\n#define SCALE_TYPE_LOG 2\n\n\n#ifdef USE_SCALE_X\n    #if SCALE_TYPE_x == SCALE_TYPE_LINEAR\n        #define SCALE_X(x) scale_transform_linear(x, vec2(-0.5, 0.5), domain_x)\n    #elif SCALE_TYPE_x == SCALE_TYPE_LOG\n        #define SCALE_X(x) scale_transform_log(x, vec2(-0.5, 0.5), domain_x)\n    #endif\n#endif\n\n#ifdef USE_SCALE_Y\n    #if SCALE_TYPE_y == SCALE_TYPE_LINEAR\n        #define SCALE_Y(x) scale_transform_linear(x, vec2(-0.5, 0.5), domain_y)\n    #elif SCALE_TYPE_y == SCALE_TYPE_LOG\n        #define SCALE_Y(x) scale_transform_log(x, vec2(-0.5, 0.5), domain_y)\n    #endif\n#endif\n\n#ifdef USE_SCALE_Z\n    #if SCALE_TYPE_z == SCALE_TYPE_LINEAR\n        #define SCALE_Z(x) scale_transform_linear(x, vec2(-0.5, 0.5), domain_z)\n    #elif SCALE_TYPE_z == SCALE_TYPE_LOG\n        #define SCALE_Z(x) scale_transform_log(x, vec2(-0.5, 0.5), domain_z)\n    #endif\n#endif\n\n#ifdef USE_SCALE_SIZE_X\n    #if SCALE_TYPE_size_x == SCALE_TYPE_LINEAR\n        #define SCALE_SIZE_X(x) scale_transform_linear(x, vec2(0.0, 1.0), domain_size_x)\n    #elif SCALE_TYPE_size_x == SCALE_TYPE_LOG\n        #define SCALE_SIZE_X(x) scale_transform_log(x, vec2(0.0, 1.0), domain_size_x)\n    #endif\n#endif\n\n#ifdef USE_SCALE_SIZE_Y\n    #if SCALE_TYPE_size_y == SCALE_TYPE_LINEAR\n        #define SCALE_SIZE_Y(x) scale_transform_linear(x, vec2(0.0, 1.0), domain_size_y)\n    #elif SCALE_TYPE_size_y == SCALE_TYPE_LOG\n        #define SCALE_SIZE_Y(x) scale_transform_log(x, vec2(0.0, 1.0), domain_size_y)\n    #endif\n#endif\n\n#ifdef USE_SCALE_SIZE_Z\n    #if SCALE_TYPE_size_z == SCALE_TYPE_LINEAR\n        #define SCALE_SIZE_Z(x) scale_transform_linear(x, vec2(0.0, 1.0), domain_size_z)\n    #elif SCALE_TYPE_size_z == SCALE_TYPE_LOG\n        #define SCALE_SIZE_Z(x) scale_transform_log(x, vec2(0.0, 1.0), domain_size_z)\n    #endif\n#endif\n\n#ifdef USE_SCALE_AUX\n    #if SCALE_TYPE_aux == SCALE_TYPE_LINEAR\n        #define SCALE_AUX(x) scale_transform_linear(x, vec2(0.0, 1.0), domain_aux)\n    #elif SCALE_TYPE_aux == SCALE_TYPE_LOG\n        #define SCALE_AUX(x) scale_transform_log(x, vec2(0.0, 1.0), domain_aux)\n    #endif\n#endif\n\nfloat scale_transform_linear(float domain_value, vec2 range, vec2 domain) {\n    float normalized = (domain_value - domain[0]) / (domain[1] - domain[0]);\n    float range_value = normalized * (range[1] - range[0]) + range[0];\n    return range_value;\n}\n\nfloat scale_transform_linear_inverse(float range_value, vec2 range, vec2 domain) {\n    float normalized = (range_value - range[0]) / (range[1] - range[0]);\n    float domain_value = normalized * (domain[1] - domain[0]) + domain[0];\n    return domain_value;\n}\n\nfloat scale_transform_log(float domain_value, vec2 range, vec2 domain) {\n    float normalized = (log(domain_value) - log(domain[0])) / (log(domain[1]) - log(domain[0]));\n    float range_value = normalized * (range[1] - range[0]) + range[0];\n    return range_value;\n}\n\nfloat scale_transform_log_inverse(float range_value, vec2 range, vec2 domain) {\n    float normalized = (range_value - range[0]) / (range[1] - range[0]);\n    float domain_value = exp(normalized * (log(domain[1]) - log(domain[0])) + log(domain[0]));\n    return domain_value;\n}\n"},3604:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="// scatter-fragment shader\nvarying vec4 vertex_color;\nvarying vec3 vertex_position;\nvarying vec2 vertex_uv;\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    // extra only used for the default shading\n\n    #ifdef USE_TEXTURE\n        uniform sampler2D texture;\n        uniform sampler2D texture_previous;\n        uniform float animation_time_texture;\n    #endif\n    // end of extra only used for the default shading\n    // taken similar to phong shading\n    #include <common>\n    #include <packing>\n    #include <dithering_pars_fragment>\n    #include <color_pars_fragment>\n    #include <uv_pars_fragment>\n    #include <uv2_pars_fragment>\n    #include <map_pars_fragment>\n    #include <alphamap_pars_fragment>\n    #include <aomap_pars_fragment>\n    #include <lightmap_pars_fragment>\n    #include <emissivemap_pars_fragment>\n    #include <envmap_pars_fragment>\n    #include <gradientmap_pars_fragment>\n    #include <fog_pars_fragment>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    // #include <lights_phong_pars_fragment>\n    #include <shadowmap_pars_fragment>\n    #include <shadowmask_pars_fragment> // extra compared to phong\n\n    #include <bumpmap_pars_fragment>\n    #include <normalmap_pars_fragment>\n    #include <specularmap_pars_fragment>\n    #include <logdepthbuf_pars_fragment>\n    #include <clipping_planes_pars_fragment>\n\n\nvoid main(void)\n{\n    #if defined(AS_COORDINATE)\n        gl_FragColor = vertex_color;\n    #elif defined(AS_ID)\n        gl_FragColor = vertex_color;\n    #else //AS_COORDINATE\n        // 0 when in shadow, 1 if visible\n        #ifdef IS_LINE\n            gl_FragColor = vertex_color;\n        #else //IS_LINE\n            #ifdef USE_SPRITE\n                #ifdef USE_TEXTURE\n                    gl_FragColor = mix(texture2D(texture_previous, vertex_uv), texture2D(texture, vertex_uv), animation_time_texture);\n                #else\n                    gl_FragColor = vertex_color;\n                #endif //USE_TEXTURE\n            #else //USE_SPRITE\n                vec3 fdxmy = dFdx( vertex_position );\n                vec3 fdymy = dFdy( vertex_position );\n                vec3 normalmy = normalize( cross( fdxmy, fdymy ) );\n                float diffuse = dot( normalmy, vec3( 0.0, 0.0, 1.0 ) );\n\n                gl_FragColor = vec4(clamp(diffuse, 0.2, 1.) * vertex_color.rgb, vertex_color.a);\n            #endif//USE_SPRITE\n            float shadow_visibility = getShadowMask();\n            gl_FragColor.rgb *= shadow_visibility;\n        #endif //IS_LINE\n    #endif //AS_COORDINATE\n    #include <fog_fragment>\n}\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE )\n\n#ifdef AS_LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\n\n#ifdef DOUBLE_SIDED\n\n\tvarying vec3 vLightBack;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\n\t#include <lightmap_fragment>\n\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\n\t#else\n\n\t\treflectedLight.directDiffuse = vLightFront;\n\n\t#endif\n\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n    #define PHYSICAL\n    uniform vec3 diffuse;\n    uniform vec3 emissive;\n    uniform float roughness;\n    uniform float metalness;\n    uniform float opacity;\n    uniform float emissiveIntensity;\n\n    #ifndef STANDARD\n        uniform float clearCoat;\n        uniform float clearCoatRoughness;\n    #endif\n\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <packing>\n    #include <dithering_pars_fragment>\n    #include <color_pars_fragment>\n    #include <uv_pars_fragment>\n    #include <uv2_pars_fragment>\n    #include <map_pars_fragment>\n    #include <alphamap_pars_fragment>\n    #include <aomap_pars_fragment>\n    #include <lightmap_pars_fragment>\n    #include <emissivemap_pars_fragment>\n    #include <bsdfs>\n    #include <cube_uv_reflection_fragment>\n    #include <envmap_pars_fragment>\n    #include <envmap_physical_pars_fragment>\n    #include <fog_pars_fragment>\n    #include <lights_pars_begin>\n    #include <lights_physical_pars_fragment>\n    #include <shadowmap_pars_fragment>\n    #include <bumpmap_pars_fragment>\n    #include <normalmap_pars_fragment>\n    #include <roughnessmap_pars_fragment>\n    #include <metalnessmap_pars_fragment>\n    #include <logdepthbuf_pars_fragment>\n    #include <clipping_planes_pars_fragment>\n\nvoid main(void)\n{\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0, 1.0, 1.0, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive * emissiveIntensity;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n#endif //AS_PHYSICAL\n#ifdef AS_DISTANCE\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n#endif//AS_DISTANCE\n\n#ifdef AS_DEPTH\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\n\t#endif\n\n}\n#endif //AS_DEPTH\n"},1514:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="// scatter-vertex shader\n#define USE_SCALE_X\n#define USE_SCALE_Y\n#define USE_SCALE_Z\n#define USE_SCALE_SIZE_X\n#define USE_SCALE_SIZE_Y\n#define USE_SCALE_SIZE_Z\n#define USE_SCALE_AUX\n#include <scales>\n\n// for animation, all between 0 and 1\nuniform float animation_time_x;\nuniform float animation_time_y;\nuniform float animation_time_z;\nuniform float animation_time_aux;\nuniform float animation_time_vx;\nuniform float animation_time_vy;\nuniform float animation_time_vz;\nuniform float animation_time_size;\nuniform float animation_time_color;\n\nuniform vec2 domain_x;\nuniform vec2 domain_y;\nuniform vec2 domain_z;\nuniform vec2 domain_aux;\n\nuniform vec2 domain_size_x;\nuniform vec2 domain_size_y;\nuniform vec2 domain_size_z;\n\nuniform mat4 geo_matrix;\nuniform vec3 aspect;\n\nvarying vec4 vertex_color;\nvarying vec3 vertex_position;\nvarying vec2 vertex_uv;\n\n#ifdef IS_LINE\n    attribute vec3 position_previous;\n#else\n    attribute float x_next;\n    attribute float x_previous;\n    attribute float y_next;\n    attribute float y_previous;\n    attribute float z_next;\n    attribute float z_previous;\n#ifdef USE_AUX\n    attribute float aux_next;\n    attribute float aux_previous;\n#endif\n    attribute vec3 v_next;\n    attribute vec3 v_previous;\n\n    attribute float size_next;\n    attribute float size_previous;\n#endif\n\n#ifdef USE_COLORMAP\n    attribute float color_next;\n    attribute float color_previous;\n    uniform vec2 domain_color;\n#else\n    attribute vec4 color_next;\n    attribute vec4 color_previous;\n#endif\n\nuniform sampler2D colormap;\n\nattribute float instance_id;\nuniform float id_offset;\n\nvec4 encodeId(float v) {\n    vec4 color;\n    // matches Figure.readId\n    color.b = floor(v / 256.0 / 256.0);\n    color.g = floor((v - color.b * 256.0 * 256.0) / 256.0);\n    color.r = floor(v - color.b * 256.0 * 256.0 - color.g * 256.0);\n    color.a = 255.0;\n    // normalize\n    return color / 255.0;\n}\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    // similar to phong\n    // varying vec3 vColor;\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n\n#ifdef AS_LAMBERT\n    #define LAMBERT\n    varying vec3 vLightFront;\n\n    #ifdef DOUBLE_SIDED\n        varying vec3 vLightBack;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <bsdfs>\n    #include <lights_pars_begin>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n    #define PHONG\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <envmap_pars_vertex>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n    #define PHYSICAL\n    varying vec3 vViewPosition;\n\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <uv2_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <shadowmap_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DEPTH\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_DEPTH\n#ifdef AS_DISTANCE\n    #define DISTANCE\n\n    varying vec3 vWorldPosition;\n\n    #include <common>\n    #include <uv_pars_vertex>\n    #include <displacementmap_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <skinning_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n#endif //AS_DISTANCE\n\n\nvoid main(void) {\n    vec3 animation_time = vec3(animation_time_x, animation_time_y, animation_time_z);\n    vec3 animation_time_v = vec3(animation_time_vx, animation_time_vy, animation_time_vz);\n\n#ifdef IS_LINE\n    vec3 position_current = mix(position_previous, position, animation_time);\n    vec3 model_pos = vec3(SCALE_X(position_current.x), SCALE_Y(position_current.y), SCALE_Z(position_current.z));\n    vec4 view_pos = modelViewMatrix * vec4(model_pos, 1.0);\n#else\n    vec3 vector_next = v_next;\n    vec3 vector_previous = v_previous;\n    vec3 position_offset_next = vec3(x_next, y_next, z_next);\n    vec3 position_offset_previous = vec3(x_previous, y_previous, z_previous);\n\n    // assume the vector points to the y axis\n    vec3 vector_current = mix(normalize(vector_previous), normalize(vector_next), animation_time_v)\n           * mix(length(vector_previous), length(vector_next), (animation_time_vx+ animation_time_vy+ animation_time_vz)/3.);\n    vec3 y_axis = normalize(vector_current);\n    // we may have bad luck, and alight with 1 vector, so take two vectors, and we'll always find a non-zero vector\n    vec3 some_z_vector_a = vec3(0., 1., 1.);\n    vec3 some_z_vector_b = normalize(vec3(0., 2., 1.));\n    vec3 x_axis = normalize(cross(y_axis, some_z_vector_a)  + cross(y_axis, some_z_vector_b));\n    vec3 z_axis = -normalize(cross(y_axis, x_axis)); // - to keep it right handed\n    //float vector_length = length(vector_current);\n    // the following matrix should point it to the direction of 'vector'\n    mat3 move_to_vector = mat3(x_axis, y_axis, z_axis);\n\n    float size_current = mix(size_previous, size_next, animation_time_size);\n    // TODO: replace the 0. in SCALE_SIZE_X(0.) by a uniform, so we can make it work with log?\n    vec3 size_vector = vec3(SCALE_SIZE_X(size_current) - SCALE_SIZE_X(0.), SCALE_SIZE_Y(size_current) - SCALE_SIZE_Y(0.), SCALE_SIZE_Z(size_current) -  SCALE_SIZE_Z(0.));\n#ifdef USE_AUX\n    float aux_current = mix(aux_previous, aux_next, animation_time_aux);\n#endif\n    vec3 position_current_offset = mix(position_offset_previous, position_offset_next, animation_time);\n    vec3 model_pos = vec3(SCALE_X(position_current_offset.x), SCALE_Y(position_current_offset.y), SCALE_Z(position_current_offset.z));\n    // vec3 model_pos = vec3((position_current_offset.x), (position_current_offset.y), (position_current_offset.z));\n    SHADER_SNIPPET_SIZE;\n    //vec3 pos = (pos_object ) / size;// - 0.5;\n    #ifdef USE_SPRITE\n        // if we are a sprite, we add the position in view coordinates, and need to\n        vec4 view_pos = modelViewMatrix * vec4(model_pos, 1.0);\n        view_pos += vec4((position.xy)*(s*0.5),0,0);\n    #else\n        // the position is the orignal mesh position, so we scale and add that to the central location\n        // and we also rotate it into the direction of the vector v\n        vec4 position_transformed = geo_matrix * vec4(position, 1.0);\n        position_transformed.xyz = position_transformed.xyz / position_transformed.w;\n        // correct the aspect of the bounding box, so that glyphs are not transformed\n        position_transformed.xyz = position_transformed.xyz / aspect;\n        model_pos += move_to_vector * (position_transformed.xyz*size_vector);\n        vec4 view_pos = viewMatrix * vec4(model_pos, 1.0);\n    #endif\n#endif\n\n    // we repeat threejs's shader, up to begin_vertex\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n\n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n\n    #include <begin_vertex>\n#endif //defined( AS_DEFAULT ) || defined( AS_COORDINATE )\n#ifdef AS_LAMBERT\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n\n    #include <beginnormal_vertex>\n    objectNormal = move_to_vector * objectNormal;\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n\n    #include <begin_vertex>\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n\n    #include <beginnormal_vertex>\n    objectNormal = move_to_vector * objectNormal;\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n\n    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n        vNormal = normalize( transformedNormal );\n    #endif\n\n    #include <begin_vertex>\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n\n    #include <beginnormal_vertex>\n    objectNormal = move_to_vector * objectNormal;\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n\n    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n        vNormal = normalize( transformedNormal );\n    #endif\n\n    #include <begin_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DEPTH\n    #include <uv_vertex>\n\n    #include <skinbase_vertex>\n\n    #ifdef USE_DISPLACEMENTMAP\n\n        #include <beginnormal_vertex>\n        #include <morphnormal_vertex>\n        #include <skinnormal_vertex>\n\n    #endif\n\n    #include <begin_vertex>\n#endif //AS_DEPTH\n#ifdef AS_DISTANCE\n    #include <uv_vertex>\n\n    #include <skinbase_vertex>\n\n    #ifdef USE_DISPLACEMENTMAP\n\n        #include <beginnormal_vertex>\n        #include <morphnormal_vertex>\n        #include <skinnormal_vertex>\n\n    #endif\n\n    #include <begin_vertex>\n#endif //AS_DISTANCE\n\n    // after begin_vertex, we modify transformed\n    transformed = model_pos;\n\n    // mvPosition = view_pos;\n    gl_Position = projectionMatrix * view_pos;\n    // vec3 positionEye = ( modelViewMatrix * vec4( model_pos, 1.0 ) ).xyz;\n    // vertex_position = positionEye;\n    vertex_uv = position.xy / 2. - 0.5;\n#if defined( AS_COORDINATE )\n    vertex_color = vec4(model_pos + vec3(0.5, 0.5, 0.5), 1.0);\n#elif defined( AS_ID )\n    vertex_color = encodeId(instance_id + id_offset);\n#else\n    #ifdef USE_COLORMAP\n        float color_current = mix(color_previous, color_next, animation_time_color);\n        float color_index = scale_transform_linear(color_current, vec2(0.0, 1.0), domain_color);\n        vertex_color = texture2D(colormap, vec2(color_index, 0));\n    #else\n        vertex_color = mix(color_previous, color_next, animation_time_color);\n    #endif\n#endif\n    #if defined(USE_COLOR) && !(defined(AS_DEPTH) || defined(AS_DISTANCE))\n        vColor = vertex_color.rgb;\n    #endif\n\n\n#if defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n\n\n    #include <worldpos_vertex>\n    vec3 positionEye = ( modelViewMatrix * vec4(transformed, 1.0 ) ).xyz;\n    vertex_position = positionEye;\n    // vViewPosition = - mvPosition.xyz;\n    // #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>    \n#endif // defined( AS_DEFAULT ) || defined( AS_COORDINATE ) || defined( AS_ID )\n#ifdef AS_LAMBERT\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <lights_lambert_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n#endif //AS_LAMBERT\n#ifdef AS_PHONG\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n\n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n#endif //AS_PHONG\n#ifdef AS_PHYSICAL\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n\n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n#endif //AS_PHYSICAL\n#ifdef AS_DISTANCE\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <worldpos_vertex>\n    #include <clipping_planes_vertex>\n\n    vWorldPosition = worldPosition.xyz;\n#endif //AS_DISTANCE\n#ifdef AS_DEPTH\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n#endif //AS_DEPTH\n}\n"},4714:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="varying  vec2 tex_uv;\n\n#if defined(PANORAMA_360) || defined(PANORAMA_180)\nuniform samplerCube tex;\n#else\nuniform sampler2D tex;\n#endif\n\n\nvoid main(void) {\n\tconst float PI = 3.141592653589793238462643383;\n#if defined(PANORAMA_360)\n\tfloat phi   = (1.-tex_uv.x)* PI * 2.0;\n\tfloat theta = (1.-tex_uv.y) * PI;\n    vec3 uvw = vec3(sin(phi) * sin(theta),\n                               cos(theta),\n                    cos(phi) * sin(theta)\n                    );\n    gl_FragColor = textureCube(tex, uvw);\n#elif defined(PANORAMA_180)\n\tfloat x = (tex_uv.x-0.5)*2.;\n\tfloat y = (tex_uv.y-0.5)*2.;\n\tfloat r = sqrt(x*x + y*y);\n\tif(r > 1.)\n\t\tdiscard;\n\tfloat theta = r * PI/2.;\n\tfloat phi = atan(y, x);\n\tvec3 uvw = vec3(cos(phi) * sin(theta),\n\t\t\t\t\tsin(phi) * sin(theta),\n\t\t\t\t\t          -cos(theta));\n    gl_FragColor = textureCube(tex, uvw);\n#else\n    gl_FragColor = texture2D(tex, tex_uv);\n#endif\n}\n"},2772:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="varying vec2 tex_uv;\n\nvoid main(void) {\n    gl_Position = projectionMatrix *\n                modelViewMatrix *\n                vec4(position,1.0);\n    tex_uv = vec2(position.x+0.5, position.y+0.5);\n}\n"},5790:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="uniform sampler2D map;\nvarying vec2 vUv;\n#include <packing>\n\nvoid main ()\n{\n    vec4 rgbaDepth = texture2D (map, vUv);\n    float fDepth = unpackRGBAToDepth(rgbaDepth);\n    gl_FragColor = vec4 (vec3 (fDepth), 1.0);\n    // gl_FragColor = vec4 (vec3 (rgbaDepth.w), 1.0);\n}\n\n"},9306:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="varying vec2 vUv;\n\nvoid main ()\n{\n    vUv = vec2 (uv.x, 1.0 - uv.y);\n    gl_Position = projectionMatrix * modelViewMatrix * vec4 (position, 1.0);\n}\n"},3389:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="precision highp float;\n#include <common>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n\nuniform mat3 normalMatrix;\n\nuniform sampler2D back_tex;\nuniform sampler2D geometry_depth_tex;\n\n\n#include <ipyvolume>\n\n// samplers in structs has bad support, so we put it here\n#if (VOLUME_COUNT > 0)\nuniform sampler2D data[VOLUME_COUNT];\nuniform sampler2D transfer_function[VOLUME_COUNT];\nuniform Volume volumes[VOLUME_COUNT];\n#endif\n\n#if (VOLUME_COUNT_MAX_INT > 0)\nuniform Volume volumes_max_int[VOLUME_COUNT_MAX_INT];\nuniform sampler2D data_max_int[VOLUME_COUNT_MAX_INT];\nuniform sampler2D transfer_function_max_int[VOLUME_COUNT_MAX_INT];\nfloat max_values[VOLUME_COUNT_MAX_INT];\nfloat max_depth[VOLUME_COUNT_MAX_INT];\nbool  has_values[VOLUME_COUNT_MAX_INT];\n// for MAX_INT, we cannot add the coordinate directly, we do it after we found the max\nvec4  max_weighted_coordinate[VOLUME_COUNT_MAX_INT];\nvec4  max_colors[VOLUME_COUNT_MAX_INT];\n#endif\n\nstruct Layer {\n    float depth;\n    vec4 color;\n    bool skip;\n};\n\nLayer layers[VOLUME_COUNT_MAX_INT+1];\n\n\n//uniform float brightness;\n\n//uniform sampler2D colormap;\n//uniform int colormap_index;\n//uniform int surfaces;\n//uniform float opacity[4];\n//uniform float level[4];\n//uniform float width[4];\nuniform vec2 render_size;\n\nvarying vec3 front;\n\n// for lighting\nuniform mat3 mvMatrix;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvec3 light_dir;\nvec3 eye;\n//uniform float color_index;\n\nuniform int steps;\n\n\nuniform float ambient_coefficient;\nuniform float diffuse_coefficient;\nuniform float specular_coefficient;\nuniform float specular_exponent;\n\nmat3 transpose3(mat3 m) {\n    vec3 v0 = m[0];\n    vec3 v1 = m[1];\n    vec3 v2 = m[2];\n    return mat3(\n        vec3(v0.x, v1.x, v2.x),\n        vec3(v0.y, v1.y, v2.y),\n        vec3(v0.z, v1.z, v2.z)\n        );\n}\n\nvec2 sample(sampler2D data, Volume volume, vec3 ray_pos, inout vec3 normal) {\n    vec3 pos_relative = (ray_pos+volume.offset)*volume.scale;\n    if(any(lessThan(pos_relative, vec3(0.))) || any(greaterThan(pos_relative, vec3(1.))))\n        return vec2(0.0);\n    vec4 sample = sample_as_3d_texture(data, volume.size, pos_relative, volume.slice_size, volume.slices, volume.rows, volume.columns);\n    normal = (-sample.xyz)*2.+1.;\n    // this seems to match observations, not fully sure why x and z are flipped.\n    normal.xyz = normal.zyx;\n\n    float raw_data_value = sample.a; //(sample.a - data_min) * data_scale;\n    float scaled_data_value = (raw_data_value*(volume.data_range[1] - volume.data_range[0])) + volume.data_range[0];\n    float data_value = (scaled_data_value - volume.show_range[0])/(volume.show_range[1] - volume.show_range[0]);\n    // TODO: how do we deal with this with multivolume rendering\n    // if(((data_value < 0.) && !volume.clamp_min) || ((data_value > 1.) && !volume.clamp_max)) {\n    //     ray_pos += ray_delta;\n    //     continue;\n    // }\n    data_value = clamp(data_value, 0., 1.);\n    return vec2(data_value, 1);\n}\n\nvec4 apply_lighting(vec4 color, vec3 objectNormal, vec3 position, Volume volume) {\n    // only do phong lighting when we have lights\n    #if ( NUM_POINT_LIGHTS > 0 ) || ( NUM_SPOT_LIGHTS > 0 ) || ( NUM_DIR_LIGHTS > 0 ) || ( NUM_RECT_AREA_LIGHTS > 0 ) || ( NUM_HEMI_LIGHTS > 0 )\n        vec3 normal = normalize(normalMatrix * objectNormal);\n        vec3 vViewPosition = position;\n        vec3 emissive = volume.emissive;\n\n\n        // this is quite similar to meshphong_frag.glsl\n        vec4 diffuseColor = color;\n        ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n        vec3 totalEmissiveRadiance = emissive;\n\n\n        // the replacement for: #include <lights_phong_fragment>\n        BlinnPhongMaterial material;\n        material.diffuseColor = diffuseColor.rgb;\n        material.specularColor = volume.specular;\n        material.specularShininess = volume.shininess;\n        material.specularStrength = 1.0;\n\n        #include <lights_fragment_begin>\n        // we don't support light maps\n        // #include <lights_fragment_maps>\n        // no need to include this for Phong, but more consistent with mesh_phong_frag.glsl\n        #include <lights_fragment_end>\n\n        // modulation (not supported)\n        #include <aomap_fragment>\n\n        vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n        // also not supported\n        // #include <envmap_fragment>\n\n        vec4 result = vec4( outgoingLight, diffuseColor.a );\n    #else\n        vec4 result = color;\n    #endif\n\n    return result;\n}\n\nvec4 add_sample(sampler2D data, sampler2D transfer_function, Volume volume, vec3 ray_pos, vec4 color_in) {\n    vec4 color;\n    vec3 pos_relative = (ray_pos+volume.offset)*volume.scale;\n    /*vec4 sample_x = sample_as_3d_texture(volume, size, pos + vec3(delta, 0, 0), slice_size, slices, rows, columns);\n    vec4 sample_y = sample_as_3d_texture(volume, size, pos + vec3(0, delta, 0), slice_size, slices, rows, columns);\n    vec4 sample_z = sample_as_3d_texture(volume, size, pos + vec3(0, 0, delta), slice_size, slices, rows, columns);\n\n    vec3 normal = normalize(vec3((sample_x[0]-sample[0])/delta, (sample_y[0]-sample[0])/delta, (sample_z[0]-sample[0])/delta));\n    normal = -vec3(normal.x, normal.y, normal.z);\n    float cosangle_light = max((dot(light_dir, normal)), 0.);\n    float cosangle_eye = max((dot(eye, normal)), 0.);*/\n\n    vec3 normal;\n    vec2 sample = sample(data, volume, ray_pos, normal);\n    float data_value = sample[0];\n    if(sample[1] == 0.0)\n        return color_in;\n    if(((data_value < 0.) && !volume.clamp_min) || ((data_value > 1.) && !volume.clamp_max))\n        return color_in;\n\n    vec4 color_sample = texture2D(transfer_function, vec2(data_value, 0.5));\n    if(volume.lighting) {\n        color_sample = apply_lighting(color_sample, normal, ray_pos, volume);\n    }\n\n    // float intensity = color_sample.a;\n    //float alpha_sample = intensity * sign(data_value) * sign(1.-data_value) * 100. / float(steps) * ray_length;//clamp(1.-chisq, 0., 1.) * 0.5;//1./128.* length(color_sample) * 100.;\n    // float alpha_sample = intensity * 100. / float(steps);//clamp(1.-chisq, 0., 1.) * 0.5;//1./128.* length(color_sample) * 100.;\n    // alpha_sample = clamp(alpha_sample * volume.opacity_scale, 0., 1.);\n\n    //float intensity = texture2D(transfer_function, vec2(data_value, 0.5)).a;\n    //color_sample = texture2D(transfer_function, data_value);\n    //vec4 color_sample = texture2D(colormap, vec2(sample.a, colormap_index_scaled));\n    //color_sample = texture2D(volume, ray_pos.yz);\n    //float alpha_sample = opacity*intensity;//1./128.* length(color_sample) * 100.;\n    // float alpha_total = color_in.a + alpha_sample;\n    // color.rgb = color_in.rgb + (1.0 - alpha_total) * color_sample.rgb * alpha_sample;\n    // color.a = alpha_total;\n    vec4 dst = color_in;\n    vec4 src = color_sample;\n    src.a *= clamp(100./float(steps) * volume.opacity_scale, 0.0, 1.0);\n    #ifdef COORDINATE\n        color.a   = src.a  + dst.a;\n        color.rgb = dst.xyz + ray_pos * src.a;\n    #else\n        color.rgb = (1.0-dst.a) * src.rgb * src.a * volume.brightness + dst.rgb;\n        color.a   = src.a  + dst.a;\n    #endif\n    return color;\n}\n\nvec4 blend_pre_multiplied(vec4 dst, vec4 src) {\n    return dst * (1.0-src.a) + src;\n}\n\nconst int MAX_STEPS = 1000;\nvec2 pixel;\n\nvec4 cast_ray(vec3 ray_begin, vec3 ray_end, vec4 color) {\n    vec3 ray_direction = ray_end - ray_begin;\n    vec3 ray_delta = normalize(ray_direction) * (1./float(steps));\n    vec3 ray_pos = ray_begin;\n\n    float ray_length = length(ray_direction);\n    float ray_length_delta = length(ray_delta);\n    float ray_length_traveled = 0.;\n\n    vec2 pixel = vec2(gl_FragCoord.x, gl_FragCoord.y) / render_size;\n    vec4 voxel_view_space_coord;\n    float voxel_frag_depth;\n    vec4 geometry_depth;\n\n    for(int i = 0; i < MAX_STEPS; i++) {\n        geometry_depth = texture2D(geometry_depth_tex, pixel); \n        voxel_view_space_coord = projectionMatrix * modelViewMatrix * vec4(ray_pos+vec3(-0.5, -0.5, -0.5),1.0);\n        voxel_frag_depth = ((voxel_view_space_coord.z / voxel_view_space_coord.w)+1.0)/2.0;\n        if(geometry_depth.x > 0.0 && voxel_frag_depth > geometry_depth.x){\n            break;\n        }\n\n        {{#volumes}}\n            color = add_sample(data[{{.}}], transfer_function[{{.}}], volumes[{{.}}], ray_pos, color);\n        {{/volumes}}\n        if(color.a >= 1.)\n            break;\n        ray_pos += ray_delta;\n        ray_length_traveled += ray_length_delta;\n        if(ray_length_traveled >= ray_length)\n            break;\n    }\n    return color;\n}\n\nvoid cast_ray_max(vec3 ray_begin, vec3 ray_end);\n\nvoid main(void) {\n#ifdef METHOD_MAX_INTENSITY\n    float max_value = 0.;\n    float max_cosangle_light = 0.;\n    float max_cosangle_eye = 0.;\n#endif\n\n\n    pixel = vec2(gl_FragCoord.x, gl_FragCoord.y) / render_size;\n    vec4 color = vec4(0, 0, 0, 0);\n    // float color_index;\n\n    //mat3 rotation = mat3(mvMatrix);\n    mat3 rotation = (mat3(viewMatrix));\n    light_dir = normalize(vec3(-1,-1,1) * rotation);\n    eye = vec3(0, 0, 1) * rotation;\n\n    float delta = 1.0/256./2.;\n\n#ifdef COORDINATE\n    // contains the weighted coordinate, where the last component is the weight\n    // diving by w gives it the average value\n    vec4 weighted_coordinate = vec4(0., 0., 0., 0.);\n#endif \n    vec3 ray_begin = front;\n    vec3 ray_end = texture2D(back_tex, pixel).rgb;\n    vec3 ray_begin0 = ray_begin;\n    vec3 ray_end0 = ray_end;\n    cast_ray_max(ray_begin, ray_end);\n    #if (VOLUME_COUNT_MAX_INT > 1)\n        // TODO: horrible sort, fix!!\n        for(int i = 0; i < VOLUME_COUNT_MAX_INT-1; i++) {\n            for(int j = 1; j < VOLUME_COUNT_MAX_INT; j++) {\n                if(has_values[i] && has_values[j] && (i < j)) {\n                    if(max_depth[j] < max_depth[i]) {\n                        float depth = max_depth[i];\n                        max_depth[i] = max_depth[j];\n                        max_depth[j] = depth;\n                        vec4 color = max_colors[i];\n                        max_colors[i] = max_colors[j];\n                        max_colors[j] = color;\n                    }\n                }\n            }\n        }\n    #endif\n    #if (VOLUME_COUNT_MAX_INT > 0)\n        for(int i = 0; i < VOLUME_COUNT_MAX_INT; i++) {\n            layers[i].depth = 0.0;\n            layers[i].color = vec4(0.0);\n            if(has_values[i]) {\n                layers[i].depth = max_depth[i];\n                layers[i].color = max_colors[i];\n            }\n        }\n    #endif\n    // last layer is the absolute end of the volume, its color is fully transparant\n    layers[VOLUME_COUNT_MAX_INT].depth = 1.0;\n    layers[VOLUME_COUNT_MAX_INT].color = vec4(0.0);\n    float depth = -100.0;\n    ray_begin = ray_begin0;\n    for(int i = 0; i < VOLUME_COUNT_MAX_INT+1; i++) {\n        // TODO: debug this, it seems that > makes more sense, but gives artifacts in the situation of\n        // having 2 max int volr, 1 normal, the 2nd will have holes when it's the only volume in the los.\n        if(layers[i].depth >= depth)\n        {\n            ray_end = ray_begin0 + (ray_end0 - ray_begin0) * layers[i].depth;\n            color = cast_ray(ray_begin, ray_end, color);\n            #ifdef COORDINATE\n                // color += layers[i].color;\n                color = blend_pre_multiplied(layers[i].color, color);\n            #else\n                color = blend_pre_multiplied(layers[i].color, color);\n            #endif\n            ray_begin = ray_end;\n            depth = layers[i].depth;\n        }\n    }\n\n    #ifdef COORDINATE\n        vec3 average_coordinate = color.xyz/color.a;\n        gl_FragColor = vec4(average_coordinate, color.a);\n    #else\n        gl_FragColor = color;\n    #endif\n    // code below is used for debugging purposes\n    // float x = floor((pixel.x *500. / 10.));\n    // float y = floor((pixel.y *500. / 10.));\n    // // gl_FragColor = vec4(x / 10., 0.0, 0.0, 1.0);\n    // // gl_FragColor = vec4(y / 10., 0.0, 0.0, 1.0);\n    // vec2 result;\n    // float eps = 1. - 1e-4;\n    // float modulo = mod(x, y * eps);\n    // float offset = x - modulo * y;\n    // offset = floor(x / y);\n    // gl_FragColor = vec4(mod(x, x) > 0. ? 1.0 : 0., 0.0, 0.0, 1.0);\n    // gl_FragColor = vec4(modulo >= x ? 1.0 : 0., 0.0, 0.0, 1.0);\n    // gl_FragColor = vec4(offset >= 0.5 ? 1.0 : 0., 0.0, 0.0, 1.0);\n    // gl_FragColor = vec4(offset/x, 0.0, 0.0, 1.0);\n    // eps = 0.;\n    // gl_FragColor = vec4(float(int(x / (y - eps))) / 1., 0.0, 0.0, 1.0);\n    // gl_FragColor = vec4(texture2D(data[0], pixel).a * 140., 0., 0., 1.0);\n    // gl_FragColor = vec4(ray_begin.xyz, 1.);\n    // gl_FragColor = vec4(ray_begin.xyz, 0.1) * brightness;\n    //gl_FragColor = vec4(rotation[0], 1) * brightness;\n    // gl_FragColor = vec4(alpha_total, 0., 0., 1.);\n    //gl_FragColor = texture2D(volume, vec2(ray_begin.x, ray_begin.y));\n    // gl_FragColor = vec4(ray_begin.x, ray_begin.y, ray_begin.z, 1.);\n    // gl_FragColor = texture2D(transfer_function, vec2(pixel.x, 0.5));\n    //gl_FragColor = vec4(texture2D(volume, vec2(pixel.x, pixel.y)).rgb, 1.0);\n    // gl_FragColor = vec4(pixel.x, pixel.y, 0, 1);\n    // gl_FragColor = vec4(ray_end, 1.);\n    // gl_FragColor = vec4(ray_begin, 1);\n    //float tintensity = texture2D(transfer_function, vec2(pixel.x / 1., 0.5)).a;\n    //gl_FragColor = vec4(0, tintensity, 0., 1.);\n    //gl_FragColor = vec4(ray_e, 1);\n}\n\n\n\n\nvoid cast_ray_max(vec3 ray_begin, vec3 ray_end) {\n    vec3 ray_direction = ray_end - ray_begin;\n    vec3 ray_delta = normalize(ray_direction) * (1./float(steps));\n    vec3 ray_pos = ray_begin;\n\n    float ray_length = length(ray_direction);\n    float ray_length_delta = length(ray_delta);\n    float ray_length_traveled = 0.;\n\n    vec4 voxel_view_space_coord;\n    float voxel_frag_depth;\n    vec4 geometry_depth;\n    for(int i = 0; i < MAX_STEPS; i++) {\n\n        {{#volumes_max_int}}\n        {\n            vec3 normal;\n            vec2 sample = sample(data_max_int[{{.}}], volumes_max_int[{{.}}], ray_pos, normal);\n            if(sample.x > max_values[{{.}}] && sample.y > 0.0) {\n                max_values[{{.}}] = sample.x;\n                has_values[{{.}}] = true;\n                // the weight of the coordinate equals its opacity\n                max_colors[{{.}}] = texture2D(transfer_function_max_int[{{.}}], vec2(max_values[{{.}}], 0.5));\n                if(volumes_max_int[{{.}}].lighting)\n                    max_colors[{{.}}] = apply_lighting(max_colors[{{.}}], normal, ray_pos, volumes_max_int[{{.}}]);\n                float alpha = clamp(max_colors[{{.}}].a * volumes_max_int[{{.}}].opacity_scale * 10., 0., 1.);\n                max_colors[{{.}}].a = alpha;\n                #ifdef COORDINATE\n                    max_colors[{{.}}].rgb = ray_pos * alpha; // no need to use brightness for the coordinates\n                #else\n                    max_colors[{{.}}].rgb *= alpha * volumes_max_int[{{.}}].brightness; // pre-blend\n                #endif\n                max_weighted_coordinate[{{.}}].xyz = ray_pos * alpha;\n                max_weighted_coordinate[{{.}}].a = alpha;\n                max_depth[{{.}}] = ray_length_traveled/ray_length;\n            }\n        }\n        {{/volumes_max_int}}\n\n        ray_pos += ray_delta;\n        ray_length_traveled += ray_length_delta;\n        if(ray_length_traveled >= ray_length)\n            break;\n    }\n}"},8476:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i="//attribute vec3 aVertexPosition;\n\n//uniform mat4 uMVMatrix;\n//uniform mat4 uPMatrix;\nvarying vec3 front;\n\nvoid main(void) {\n    //gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n    gl_Position = projectionMatrix *\n                modelViewMatrix *\n                vec4(position,1.0);\n    //vertex_color = vec4(aVertexPosition, 1);\n    front = position+vec3(0.5, 0.5, 0.5);\n}\n"},4593:(e,t,n)=>{var i=n(3612);"string"==typeof i&&(i=[[e.id,i,""]]);n(6723)(i,{transform:void 0}),i.locals&&(e.exports=i.locals)},6723:(e,t,n)=>{var i,a,s={},r=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=i.apply(this,arguments)),a}),o=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e.call(this,n)),t[n]}}((function(e){return document.querySelector(e)})),l=null,c=0,d=[],_=n(1947);function h(e,t){for(var n=0;n<e.length;n++){var i=e[n],a=s[i.id];if(a){a.refs++;for(var r=0;r<a.parts.length;r++)a.parts[r](i.parts[r]);for(;r<i.parts.length;r++)a.parts.push(v(i.parts[r],t))}else{var o=[];for(r=0;r<i.parts.length;r++)o.push(v(i.parts[r],t));s[i.id]={id:i.id,refs:1,parts:o}}}}function m(e,t){for(var n=[],i={},a=0;a<e.length;a++){var s=e[a],r=t.base?s[0]+t.base:s[0],o={css:s[1],media:s[2],sourceMap:s[3]};i[r]?i[r].parts.push(o):n.push(i[r]={id:r,parts:[o]})}return n}function u(e,t){var n=o(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=d[d.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(t)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function f(e){var t=document.createElement("style");return e.attrs.type="text/css",g(t,e.attrs),u(e,t),t}function g(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function v(e,t){var n,i,a,s;if(t.transform&&e.css){if(!(s=t.transform(e.css)))return function(){};e.css=s}if(t.singleton){var r=c++;n=l||(l=f(t)),i=y.bind(null,n,r,!1),a=y.bind(null,n,r,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",g(t,e.attrs),u(e,t),t}(t),i=w.bind(null,n,t),a=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=f(t),i=E.bind(null,n),a=function(){p(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=r()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=m(e,t);return h(n,t),function(e){for(var i=[],a=0;a<n.length;a++){var r=n[a];(o=s[r.id]).refs--,i.push(o)}for(e&&h(m(e,t),t),a=0;a<i.length;a++){var o;if(0===(o=i[a]).refs){for(var l=0;l<o.parts.length;l++)o.parts[l]();delete s[o.id]}}}};var x,b=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join("\n")});function y(e,t,n,i){var a=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=b(t,a);else{var s=document.createTextNode(a),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function E(e,t){var n=t.css,i=t.media;if(i&&e.setAttribute("media",i),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function w(e,t,n){var i=n.css,a=n.sourceMap,s=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||s)&&(i=_(i)),a&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var r=new Blob([i],{type:"text/css"}),o=e.href;e.href=URL.createObjectURL(r),o&&URL.revokeObjectURL(o)}},1947:e=>{e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var a,s=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(s)?e:(a=0===s.indexOf("//")?s:0===s.indexOf("/")?n+s:i+s.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}},306:e=>{"use strict";e.exports=JSON.parse('{"version":"0.6.0-alpha.10"}')}}]);